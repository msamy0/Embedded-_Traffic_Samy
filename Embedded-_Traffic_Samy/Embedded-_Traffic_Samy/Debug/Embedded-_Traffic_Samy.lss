
Embedded-_Traffic_Samy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000011c4  00001258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  0080006e  0080006e  00001266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000192e  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a56  00000000  00000000  00002d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d4  00000000  00000000  000037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bf  00000000  00000000  00004b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ba  00000000  00000000  0000535b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	4b 04       	cpc	r4, r11
      56:	48 04       	cpc	r4, r8
      58:	af 04       	cpc	r10, r15
      5a:	a0 04       	cpc	r10, r0
      5c:	a3 04       	cpc	r10, r3
      5e:	a6 04       	cpc	r10, r6
      60:	a9 04       	cpc	r10, r9
      62:	ac 04       	cpc	r10, r12

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ec       	ldi	r30, 0xC4	; 196
      78:	f1 e1       	ldi	r31, 0x11	; 17
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	ae e6       	ldi	r26, 0x6E	; 110
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	af 39       	cpi	r26, 0x9F	; 159
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
      9a:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <turn_off_all_leds>:
	}
}

void turn_off_all_leds() // function to turn off every thing
{
LED_blink_stop(CAR_YELLOW_LED_PIN,LEDs_PORT);
      a2:	60 e0       	ldi	r22, 0x00	; 0
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_blink_stop>
LED_blink_stop(PERSON_YELLOW_LED_PIN,LEDs_PORT);
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	85 e0       	ldi	r24, 0x05	; 5
      ae:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_blink_stop>
DIO_write_port(LEDs_PORT,OFF_value);
      b2:	60 e0       	ldi	r22, 0x00	; 0
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	0e 94 02 03 	call	0x604	; 0x604 <DIO_write_port>
      ba:	08 95       	ret

000000bc <app_init>:
 */ 
#include "app.h"



void app_init() {
      bc:	ef 92       	push	r14
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
	/* traffic LED initializations */
	LED_init(CAR_RED_LED_PIN, LEDs_PORT);
      c2:	60 e0       	ldi	r22, 0x00	; 0
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(CAR_GREEN_LED_PIN, LEDs_PORT);
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(CAR_YELLOW_LED_PIN, LEDs_PORT);
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	82 e0       	ldi	r24, 0x02	; 2
      d6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(PERSON_RED_LED_PIN, LEDs_PORT);
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	84 e0       	ldi	r24, 0x04	; 4
      de:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(PERSON_GREEN_LED_PIN, LEDs_PORT);
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	86 e0       	ldi	r24, 0x06	; 6
      e6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(PERSON_YELLOW_LED_PIN, LEDs_PORT);
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	85 e0       	ldi	r24, 0x05	; 5
      ee:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	
	/* pedestrian leds initialization */
	LED_init(PEDESTRIAN_LED_PIN,PEDESTRIAN_LED_PORT);
      f2:	61 e0       	ldi	r22, 0x01	; 1
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	
	/* Global interrupts initialization*/
	sei();
      fa:	78 94       	sei
	external_interrupt_sense_mode(BUTTON_INTERRUPT_NUM,rising_edge);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 2e 03 	call	0x65c	; 0x65c <external_interrupt_sense_mode>
	external_interrupt_init(BUTTON_INTERRUPT_NUM);
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 8a 03 	call	0x714	; 0x714 <external_interrupt_init>

	/*timer initialization*/
	timer_init(timer_0,interrupt_disable,pre_1024,TRAFFIC_INTERVAL,millis);
     10a:	ee 24       	eor	r14, r14
     10c:	e3 94       	inc	r14
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	10 e4       	ldi	r17, 0x40	; 64
     112:	2c e9       	ldi	r18, 0x9C	; 156
     114:	35 e4       	ldi	r19, 0x45	; 69
     116:	47 e0       	ldi	r20, 0x07	; 7
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	0e 94 9c 03 	call	0x738	; 0x738 <timer_init>
	timer_init(timer_2,interrupt_enable,pre_1024,Y_B_INTERVAL,millis);
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	2a ef       	ldi	r18, 0xFA	; 250
     126:	33 e4       	ldi	r19, 0x43	; 67
     128:	47 e0       	ldi	r20, 0x07	; 7
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 9c 03 	call	0x738	; 0x738 <timer_init>
	
	/*init all variables status*/
	traffic_status_mask = MODE_1_MASK;
     132:	81 e4       	ldi	r24, 0x41	; 65
     134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
	stop_timer_0_flag = 0;
     138:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
	pedstrain_press_flag = 0;
     13c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
	pedstrain_mode_flag = 0;
     140:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <pedstrain_mode_flag>
	in_delay_flag = 0;
     144:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
	turn_off_all_leds();
     148:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
}
     14c:	1f 91       	pop	r17
     14e:	0f 91       	pop	r16
     150:	ef 90       	pop	r14
     152:	08 95       	ret

00000154 <traffic_mode_1_CR_PG>:
}

void traffic_mode_1_CR_PG()
{	
	/* check whether to execute this function or exit depending on the current mask*/
	if(traffic_status_mask != MODE_1_MASK)
     154:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     158:	81 34       	cpi	r24, 0x41	; 65
     15a:	11 f5       	brne	.+68     	; 0x1a0 <traffic_mode_1_CR_PG+0x4c>
		return;
	}
	else
	{
		
		turn_off_all_leds();//erase last mode condition
     15c:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_RED_LED_PIN,LEDs_PORT);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_on(PERSON_GREEN_LED_PIN,LEDs_PORT);
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	86 e0       	ldi	r24, 0x06	; 6
     16c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>

		in_delay_flag = 1; // flag that let the ISR0 that code is in loop now
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0(); //do busy wait holding current led status
     176:	0e 94 46 05 	call	0xa8c	; 0xa8c <blocking_delay_0>
		in_delay_flag = 0;
     17a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
		
		/*this condition will be true if pedestrian is pressed in the last delay*/
		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     17e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	51 f4       	brne	.+20     	; 0x19a <traffic_mode_1_CR_PG+0x46>
     186:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	31 f4       	brne	.+12     	; 0x19a <traffic_mode_1_CR_PG+0x46>
		{
			//if yes, clear the press_flag and let mode_flag on until we finish a full pedestrian loop
			pedstrain_press_flag = 0;
     18e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_2_MASK; // return to mode_1 as we have a pedestrian want to pass
     192:	82 e8       	ldi	r24, 0x82	; 130
     194:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     198:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_2_MASK;//move to the next logical mode as a normal traffic light
     19a:	82 e8       	ldi	r24, 0x82	; 130
     19c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     1a0:	08 95       	ret

000001a2 <traffic_mode_2_CRY_PGY>:
	}
}

void traffic_mode_2_CRY_PGY()
{
	if(traffic_status_mask != MODE_2_MASK)
     1a2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     1a6:	82 38       	cpi	r24, 0x82	; 130
     1a8:	51 f5       	brne	.+84     	; 0x1fe <traffic_mode_2_CRY_PGY+0x5c>
		return;
	}
	else
	{
		
		turn_off_all_leds();
     1aa:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_RED_LED_PIN,LEDs_PORT);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(CAR_YELLOW_LED_PIN,LEDs_PORT);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		LED_on(PERSON_GREEN_LED_PIN,LEDs_PORT);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(PERSON_YELLOW_LED_PIN,LEDs_PORT);
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	85 e0       	ldi	r24, 0x05	; 5
     1ca:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		
		in_delay_flag = 1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0();
     1d4:	0e 94 46 05 	call	0xa8c	; 0xa8c <blocking_delay_0>
		in_delay_flag = 0;
     1d8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
		
		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     1dc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	51 f4       	brne	.+20     	; 0x1f8 <traffic_mode_2_CRY_PGY+0x56>
     1e4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	31 f4       	brne	.+12     	; 0x1f8 <traffic_mode_2_CRY_PGY+0x56>
		{
			pedstrain_press_flag =0;
     1ec:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_1_MASK;
     1f0:	81 e4       	ldi	r24, 0x41	; 65
     1f2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     1f6:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_3_MASK;
     1f8:	84 e1       	ldi	r24, 0x14	; 20
     1fa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     1fe:	08 95       	ret

00000200 <traffic_mode_3_CG_PR>:
	}
}

void traffic_mode_3_CG_PR()
{
	if(traffic_status_mask != 0b00010100)
     200:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     204:	84 31       	cpi	r24, 0x14	; 20
     206:	39 f5       	brne	.+78     	; 0x256 <traffic_mode_3_CG_PR+0x56>
		return;
	}
	else
	{
		
		turn_off_all_leds();
     208:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_GREEN_LED_PIN,LEDs_PORT);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_on(PERSON_RED_LED_PIN,LEDs_PORT);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	84 e0       	ldi	r24, 0x04	; 4
     218:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		
		/*reaching mode 3 means the pedestrian loop is finished, so clear pedestrian_mode_flag*/
		pedstrain_mode_flag = 0;
     21c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <pedstrain_mode_flag>
		PORTB &=~ (1<<0);
     220:	88 b3       	in	r24, 0x18	; 24
     222:	8e 7f       	andi	r24, 0xFE	; 254
     224:	88 bb       	out	0x18, r24	; 24
		
		in_delay_flag = 1;
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0();
     22c:	0e 94 46 05 	call	0xa8c	; 0xa8c <blocking_delay_0>
		in_delay_flag = 0;
     230:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
		
		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     234:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	51 f4       	brne	.+20     	; 0x250 <traffic_mode_3_CG_PR+0x50>
     23c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	31 f4       	brne	.+12     	; 0x250 <traffic_mode_3_CG_PR+0x50>
		{
			pedstrain_press_flag =0;
     244:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_4_MASK;
     248:	88 e2       	ldi	r24, 0x28	; 40
     24a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     24e:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_4_MASK;
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     256:	08 95       	ret

00000258 <traffic_mode_4_CGY_PRY>:
	}
}

void traffic_mode_4_CGY_PRY()
{
	if(traffic_status_mask != MODE_4_MASK)
     258:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     25c:	88 32       	cpi	r24, 0x28	; 40
     25e:	51 f5       	brne	.+84     	; 0x2b4 <traffic_mode_4_CGY_PRY+0x5c>
		return;
	}
	else
	{
		
		turn_off_all_leds();
     260:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_GREEN_LED_PIN,LEDs_PORT);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(CAR_YELLOW_LED_PIN,LEDs_PORT);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		LED_on(PERSON_RED_LED_PIN,LEDs_PORT);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(PERSON_YELLOW_LED_PIN,LEDs_PORT);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	85 e0       	ldi	r24, 0x05	; 5
     280:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		
		in_delay_flag = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0();
     28a:	0e 94 46 05 	call	0xa8c	; 0xa8c <blocking_delay_0>
		in_delay_flag = 0;
     28e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>

		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     292:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	51 f4       	brne	.+20     	; 0x2ae <traffic_mode_4_CGY_PRY+0x56>
     29a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	31 f4       	brne	.+12     	; 0x2ae <traffic_mode_4_CGY_PRY+0x56>
		{
			pedstrain_press_flag =0;
     2a2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_1_MASK;
     2a6:	81 e4       	ldi	r24, 0x41	; 65
     2a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     2ac:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_1_MASK;
     2ae:	81 e4       	ldi	r24, 0x41	; 65
     2b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     2b4:	08 95       	ret

000002b6 <app_start>:

void app_start()
{
	while(1) // loop infinite
	{
		traffic_mode_1_CR_PG(); //car_red_led + pedestrian_green_led
     2b6:	0e 94 aa 00 	call	0x154	; 0x154 <traffic_mode_1_CR_PG>
		traffic_mode_2_CRY_PGY();
     2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <traffic_mode_2_CRY_PGY>
		traffic_mode_3_CG_PR();
     2be:	0e 94 00 01 	call	0x200	; 0x200 <traffic_mode_3_CG_PR>
		traffic_mode_4_CGY_PRY();
     2c2:	0e 94 2c 01 	call	0x258	; 0x258 <traffic_mode_4_CGY_PRY>
     2c6:	f7 cf       	rjmp	.-18     	; 0x2b6 <app_start>

000002c8 <__vector_1>:
		}
	}
}

ISR(INT0_vect)//pedestrian button
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	8f 93       	push	r24
	if (!pedstrain_mode_flag && in_delay_flag)//only work if it is not in pedestrian mode and in delay
     2d4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     2d8:	81 11       	cpse	r24, r1
     2da:	17 c0       	rjmp	.+46     	; 0x30a <__vector_1+0x42>
     2dc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <in_delay_flag>
     2e0:	88 23       	and	r24, r24
     2e2:	99 f0       	breq	.+38     	; 0x30a <__vector_1+0x42>
	{
		pedstrain_press_flag = 1 ; //raise flags 
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <pedstrain_press_flag>
		pedstrain_mode_flag = 1 ;
     2ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <pedstrain_mode_flag>
		PEDESTRIAN_LED_PORT_REG |= (1<<PEDESTRIAN_LED_PIN);//for debugging, turn on pedestrian mode led 
     2ee:	88 b3       	in	r24, 0x18	; 24
     2f0:	81 60       	ori	r24, 0x01	; 1
     2f2:	88 bb       	out	0x18, r24	; 24
		
		/*raise stop_timer_0_flag to exit any busy wait delay (blocking delay)*/
		if(traffic_status_mask !=MODE_4_MASK && traffic_status_mask !=MODE_1_MASK )
     2f4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     2f8:	88 32       	cpi	r24, 0x28	; 40
     2fa:	39 f0       	breq	.+14     	; 0x30a <__vector_1+0x42>
     2fc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     300:	81 34       	cpi	r24, 0x41	; 65
     302:	19 f0       	breq	.+6      	; 0x30a <__vector_1+0x42>
		{
			stop_timer_0_flag =1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		}
	}
}
     30a:	8f 91       	pop	r24
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <__vector_5>:

/*this timer_2 over flow flag used in blink timing for the yellow leds*/
ISR(TIMER2_OVF_vect)
{
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	2f 93       	push	r18
     322:	3f 93       	push	r19
     324:	4f 93       	push	r20
     326:	5f 93       	push	r21
     328:	6f 93       	push	r22
     32a:	7f 93       	push	r23
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
	delay_2.n_overflow_flag++;
     33c:	c1 e9       	ldi	r28, 0x91	; 145
     33e:	d0 e0       	ldi	r29, 0x00	; 0
     340:	6a 85       	ldd	r22, Y+10	; 0x0a
     342:	7b 85       	ldd	r23, Y+11	; 0x0b
     344:	8c 85       	ldd	r24, Y+12	; 0x0c
     346:	9d 85       	ldd	r25, Y+13	; 0x0d
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e8       	ldi	r20, 0x80	; 128
     34e:	5f e3       	ldi	r21, 0x3F	; 63
     350:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
     354:	6a 87       	std	Y+10, r22	; 0x0a
     356:	7b 87       	std	Y+11, r23	; 0x0b
     358:	8c 87       	std	Y+12, r24	; 0x0c
     35a:	9d 87       	std	Y+13, r25	; 0x0d
	if (delay_2.n_overflow_flag >= delay_2.n_overflow)
     35c:	6a 85       	ldd	r22, Y+10	; 0x0a
     35e:	7b 85       	ldd	r23, Y+11	; 0x0b
     360:	8c 85       	ldd	r24, Y+12	; 0x0c
     362:	9d 85       	ldd	r25, Y+13	; 0x0d
     364:	2c 81       	ldd	r18, Y+4	; 0x04
     366:	3d 81       	ldd	r19, Y+5	; 0x05
     368:	4e 81       	ldd	r20, Y+6	; 0x06
     36a:	5f 81       	ldd	r21, Y+7	; 0x07
     36c:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     370:	88 23       	and	r24, r24
     372:	64 f0       	brlt	.+24     	; 0x38c <__vector_5+0x76>
	{
		LEDs_PORT_REG ^= (1<<CAR_YELLOW_LED_PIN) ^ (1<<PERSON_YELLOW_LED_PIN);
     374:	9b b3       	in	r25, 0x1b	; 27
     376:	84 e2       	ldi	r24, 0x24	; 36
     378:	89 27       	eor	r24, r25
     37a:	8b bb       	out	0x1b, r24	; 27
		delay_2.n_overflow_flag =0;	
     37c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <delay_2+0xa>
     380:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <delay_2+0xb>
     384:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <delay_2+0xc>
     388:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <delay_2+0xd>
	}
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	bf 91       	pop	r27
     396:	af 91       	pop	r26
     398:	9f 91       	pop	r25
     39a:	8f 91       	pop	r24
     39c:	7f 91       	pop	r23
     39e:	6f 91       	pop	r22
     3a0:	5f 91       	pop	r21
     3a2:	4f 91       	pop	r20
     3a4:	3f 91       	pop	r19
     3a6:	2f 91       	pop	r18
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <LED_init>:
{
	DIO_write(led_pin, led_port, OFF_value);
}
void LED_toggle(uint8_t led_pin, EN_port_name led_port)
{
	DIO_toggle(led_pin, led_port);
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DIO_init>
     3b8:	08 95       	ret

000003ba <LED_on>:
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <DIO_write>
     3c0:	08 95       	ret

000003c2 <LED_blink_start>:
}
void LED_blink_start(uint8_t led_pin, EN_port_name led_port)
{
	DIO_write(led_pin, led_port, ON_value);
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <DIO_write>
	non_blocking_delay_2(start);
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 b3 05 	call	0xb66	; 0xb66 <non_blocking_delay_2>
     3ce:	08 95       	ret

000003d0 <LED_blink_stop>:
}
void LED_blink_stop(uint8_t led_pin, EN_port_name led_port)
{
	DIO_write(led_pin, led_port, OFF_value);
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <DIO_write>
	non_blocking_delay_2(stop);	
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 b3 05 	call	0xb66	; 0xb66 <non_blocking_delay_2>
     3dc:	08 95       	ret

000003de <main>:
 */ 
#include "Application/app.h"

int main(void)
{
app_init();
     3de:	0e 94 5e 00 	call	0xbc	; 0xbc <app_init>
app_start();
     3e2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <app_start>

}
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	08 95       	ret

000003ec <DIO_init>:
*/
#include "dio.h"

void DIO_init(uint8_t pin_num, EN_port_name port_name, EN_pin_direction direction)
{
	switch (port_name)
     3ec:	61 30       	cpi	r22, 0x01	; 1
     3ee:	39 f1       	breq	.+78     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     3f0:	38 f0       	brcs	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3f2:	62 30       	cpi	r22, 0x02	; 2
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <DIO_init+0xc>
     3f6:	42 c0       	rjmp	.+132    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     3f8:	63 30       	cpi	r22, 0x03	; 3
     3fa:	09 f4       	brne	.+2      	; 0x3fe <DIO_init+0x12>
     3fc:	5e c0       	rjmp	.+188    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     3fe:	08 95       	ret
	{
		case A:
			if (direction == OUT_pin)
     400:	41 30       	cpi	r20, 0x01	; 1
     402:	69 f4       	brne	.+26     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			{
				DDRA |= (1 << pin_num);
     404:	4a b3       	in	r20, 0x1a	; 26
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	b9 01       	movw	r22, r18
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	8a 95       	dec	r24
     414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     416:	cb 01       	movw	r24, r22
     418:	84 2b       	or	r24, r20
     41a:	8a bb       	out	0x1a, r24	; 26
				break;
     41c:	08 95       	ret
			}
			else if (direction == IN_pin)
     41e:	41 11       	cpse	r20, r1
     420:	6a c0       	rjmp	.+212    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				DDRA &=~ (1 << pin_num);
     422:	4a b3       	in	r20, 0x1a	; 26
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	b9 01       	movw	r22, r18
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42c:	66 0f       	add	r22, r22
     42e:	77 1f       	adc	r23, r23
     430:	8a 95       	dec	r24
     432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     434:	cb 01       	movw	r24, r22
     436:	80 95       	com	r24
     438:	84 23       	and	r24, r20
     43a:	8a bb       	out	0x1a, r24	; 26
				break;
     43c:	08 95       	ret
				//Handel Error
				break;
			}

		case B:
			if (direction == OUT_pin)
     43e:	41 30       	cpi	r20, 0x01	; 1
     440:	69 f4       	brne	.+26     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			{
				DDRB |= (1 << pin_num);
     442:	47 b3       	in	r20, 0x17	; 23
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	b9 01       	movw	r22, r18
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44c:	66 0f       	add	r22, r22
     44e:	77 1f       	adc	r23, r23
     450:	8a 95       	dec	r24
     452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     454:	cb 01       	movw	r24, r22
     456:	84 2b       	or	r24, r20
     458:	87 bb       	out	0x17, r24	; 23
				break;
     45a:	08 95       	ret
			}
			else if (direction == IN_pin)
     45c:	41 11       	cpse	r20, r1
     45e:	4b c0       	rjmp	.+150    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				DDRB &= ~(1 << pin_num);
     460:	47 b3       	in	r20, 0x17	; 23
     462:	21 e0       	ldi	r18, 0x01	; 1
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	b9 01       	movw	r22, r18
     468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46a:	66 0f       	add	r22, r22
     46c:	77 1f       	adc	r23, r23
     46e:	8a 95       	dec	r24
     470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     472:	cb 01       	movw	r24, r22
     474:	80 95       	com	r24
     476:	84 23       	and	r24, r20
     478:	87 bb       	out	0x17, r24	; 23
				break;
     47a:	08 95       	ret
			{
				//Handel Error
				break;
			}
		case C:
			if (direction == OUT_pin)
     47c:	41 30       	cpi	r20, 0x01	; 1
     47e:	69 f4       	brne	.+26     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			{
				DDRC |= (1 << pin_num);
     480:	44 b3       	in	r20, 0x14	; 20
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	b9 01       	movw	r22, r18
     488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     48a:	66 0f       	add	r22, r22
     48c:	77 1f       	adc	r23, r23
     48e:	8a 95       	dec	r24
     490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     492:	cb 01       	movw	r24, r22
     494:	84 2b       	or	r24, r20
     496:	84 bb       	out	0x14, r24	; 20
				break;
     498:	08 95       	ret
			}
			else if (direction == IN_pin)
     49a:	41 11       	cpse	r20, r1
     49c:	2c c0       	rjmp	.+88     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				DDRC &= ~(1 << pin_num);
     49e:	44 b3       	in	r20, 0x14	; 20
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	b9 01       	movw	r22, r18
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4a8:	66 0f       	add	r22, r22
     4aa:	77 1f       	adc	r23, r23
     4ac:	8a 95       	dec	r24
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	cb 01       	movw	r24, r22
     4b2:	80 95       	com	r24
     4b4:	84 23       	and	r24, r20
     4b6:	84 bb       	out	0x14, r24	; 20
				break;
     4b8:	08 95       	ret
				//Handel Error
				break;
			}

		case D:
			if (direction == OUT_pin)
     4ba:	41 30       	cpi	r20, 0x01	; 1
     4bc:	69 f4       	brne	.+26     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
			{
				DDRD |= (1 << pin_num);
     4be:	41 b3       	in	r20, 0x11	; 17
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	b9 01       	movw	r22, r18
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4c8:	66 0f       	add	r22, r22
     4ca:	77 1f       	adc	r23, r23
     4cc:	8a 95       	dec	r24
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4d0:	cb 01       	movw	r24, r22
     4d2:	84 2b       	or	r24, r20
     4d4:	81 bb       	out	0x11, r24	; 17
				break;
     4d6:	08 95       	ret
			}
			else if (direction == IN_pin)
     4d8:	41 11       	cpse	r20, r1
     4da:	0d c0       	rjmp	.+26     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				DDRD &= ~(1 << pin_num);
     4dc:	41 b3       	in	r20, 0x11	; 17
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	b9 01       	movw	r22, r18
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     4e6:	66 0f       	add	r22, r22
     4e8:	77 1f       	adc	r23, r23
     4ea:	8a 95       	dec	r24
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4ee:	cb 01       	movw	r24, r22
     4f0:	80 95       	com	r24
     4f2:	84 23       	and	r24, r20
     4f4:	81 bb       	out	0x11, r24	; 17
     4f6:	08 95       	ret

000004f8 <DIO_write>:

}

void DIO_write(uint8_t pin_num, EN_port_name port_name, EN_pin_value value)
{
	switch (port_name)
     4f8:	61 30       	cpi	r22, 0x01	; 1
     4fa:	39 f1       	breq	.+78     	; 0x54a <DIO_write+0x52>
     4fc:	38 f0       	brcs	.+14     	; 0x50c <DIO_write+0x14>
     4fe:	62 30       	cpi	r22, 0x02	; 2
     500:	09 f4       	brne	.+2      	; 0x504 <DIO_write+0xc>
     502:	42 c0       	rjmp	.+132    	; 0x588 <DIO_write+0x90>
     504:	63 30       	cpi	r22, 0x03	; 3
     506:	09 f4       	brne	.+2      	; 0x50a <DIO_write+0x12>
     508:	5e c0       	rjmp	.+188    	; 0x5c6 <DIO_write+0xce>
     50a:	08 95       	ret
	{
		case A:
			if (value == ON_value)
     50c:	41 30       	cpi	r20, 0x01	; 1
     50e:	69 f4       	brne	.+26     	; 0x52a <DIO_write+0x32>
			{
				PORTA |= (1 << pin_num);
     510:	4b b3       	in	r20, 0x1b	; 27
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	b9 01       	movw	r22, r18
     518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_write+0x26>
     51a:	66 0f       	add	r22, r22
     51c:	77 1f       	adc	r23, r23
     51e:	8a 95       	dec	r24
     520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_write+0x22>
     522:	cb 01       	movw	r24, r22
     524:	84 2b       	or	r24, r20
     526:	8b bb       	out	0x1b, r24	; 27
				break;
     528:	08 95       	ret
			}
			else if (value == OFF_value)
     52a:	41 11       	cpse	r20, r1
     52c:	6a c0       	rjmp	.+212    	; 0x602 <DIO_write+0x10a>
			{
				PORTA &= ~(1 << pin_num);
     52e:	4b b3       	in	r20, 0x1b	; 27
     530:	21 e0       	ldi	r18, 0x01	; 1
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	b9 01       	movw	r22, r18
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_write+0x44>
     538:	66 0f       	add	r22, r22
     53a:	77 1f       	adc	r23, r23
     53c:	8a 95       	dec	r24
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_write+0x40>
     540:	cb 01       	movw	r24, r22
     542:	80 95       	com	r24
     544:	84 23       	and	r24, r20
     546:	8b bb       	out	0x1b, r24	; 27
				break;
     548:	08 95       	ret
				//Handel Error
				break;
			}

		case B:
			if (value == ON_value)
     54a:	41 30       	cpi	r20, 0x01	; 1
     54c:	69 f4       	brne	.+26     	; 0x568 <DIO_write+0x70>
			{
				PORTB |= (1 << pin_num);
     54e:	48 b3       	in	r20, 0x18	; 24
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	b9 01       	movw	r22, r18
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_write+0x64>
     558:	66 0f       	add	r22, r22
     55a:	77 1f       	adc	r23, r23
     55c:	8a 95       	dec	r24
     55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_write+0x60>
     560:	cb 01       	movw	r24, r22
     562:	84 2b       	or	r24, r20
     564:	88 bb       	out	0x18, r24	; 24
				break;
     566:	08 95       	ret
			}
			else if (value == OFF_value)
     568:	41 11       	cpse	r20, r1
     56a:	4b c0       	rjmp	.+150    	; 0x602 <DIO_write+0x10a>
			{
				PORTB &= ~(1 << pin_num);
     56c:	48 b3       	in	r20, 0x18	; 24
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	b9 01       	movw	r22, r18
     574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_write+0x82>
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	8a 95       	dec	r24
     57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_write+0x7e>
     57e:	cb 01       	movw	r24, r22
     580:	80 95       	com	r24
     582:	84 23       	and	r24, r20
     584:	88 bb       	out	0x18, r24	; 24
				break;
     586:	08 95       	ret
				//Handel Error
				break;
			}

		case C:
			if (value == ON_value)
     588:	41 30       	cpi	r20, 0x01	; 1
     58a:	69 f4       	brne	.+26     	; 0x5a6 <DIO_write+0xae>
			{
				PORTC |= (1 << pin_num);
     58c:	45 b3       	in	r20, 0x15	; 21
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	b9 01       	movw	r22, r18
     594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_write+0xa2>
     596:	66 0f       	add	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	8a 95       	dec	r24
     59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_write+0x9e>
     59e:	cb 01       	movw	r24, r22
     5a0:	84 2b       	or	r24, r20
     5a2:	85 bb       	out	0x15, r24	; 21
				break;
     5a4:	08 95       	ret
			}
			else if (value == OFF_value)
     5a6:	41 11       	cpse	r20, r1
     5a8:	2c c0       	rjmp	.+88     	; 0x602 <DIO_write+0x10a>
			{
				PORTC &= ~(1 << pin_num);
     5aa:	45 b3       	in	r20, 0x15	; 21
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	b9 01       	movw	r22, r18
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_write+0xc0>
     5b4:	66 0f       	add	r22, r22
     5b6:	77 1f       	adc	r23, r23
     5b8:	8a 95       	dec	r24
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_write+0xbc>
     5bc:	cb 01       	movw	r24, r22
     5be:	80 95       	com	r24
     5c0:	84 23       	and	r24, r20
     5c2:	85 bb       	out	0x15, r24	; 21
				break;
     5c4:	08 95       	ret
				//Handel Error
				break;
			}

		case D:
			if (value == ON_value)
     5c6:	41 30       	cpi	r20, 0x01	; 1
     5c8:	69 f4       	brne	.+26     	; 0x5e4 <DIO_write+0xec>
			{
				PORTD |= (1 << pin_num);
     5ca:	42 b3       	in	r20, 0x12	; 18
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	b9 01       	movw	r22, r18
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_write+0xe0>
     5d4:	66 0f       	add	r22, r22
     5d6:	77 1f       	adc	r23, r23
     5d8:	8a 95       	dec	r24
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_write+0xdc>
     5dc:	cb 01       	movw	r24, r22
     5de:	84 2b       	or	r24, r20
     5e0:	82 bb       	out	0x12, r24	; 18
				break;
     5e2:	08 95       	ret
			}
			else if (value == OFF_value)
     5e4:	41 11       	cpse	r20, r1
     5e6:	0d c0       	rjmp	.+26     	; 0x602 <DIO_write+0x10a>
			{
				PORTD &= ~(1 << pin_num);
     5e8:	42 b3       	in	r20, 0x12	; 18
     5ea:	21 e0       	ldi	r18, 0x01	; 1
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	b9 01       	movw	r22, r18
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_write+0xfe>
     5f2:	66 0f       	add	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	8a 95       	dec	r24
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_write+0xfa>
     5fa:	cb 01       	movw	r24, r22
     5fc:	80 95       	com	r24
     5fe:	84 23       	and	r24, r20
     600:	82 bb       	out	0x12, r24	; 18
     602:	08 95       	ret

00000604 <DIO_write_port>:
	}
}

void DIO_write_port(EN_port_name port_name, EN_pin_value value)
{
	switch (port_name)
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	79 f0       	breq	.+30     	; 0x626 <DIO_write_port+0x22>
     608:	28 f0       	brcs	.+10     	; 0x614 <DIO_write_port+0x10>
     60a:	82 30       	cpi	r24, 0x02	; 2
     60c:	a9 f0       	breq	.+42     	; 0x638 <DIO_write_port+0x34>
     60e:	83 30       	cpi	r24, 0x03	; 3
     610:	e1 f0       	breq	.+56     	; 0x64a <DIO_write_port+0x46>
     612:	08 95       	ret
	{
		case A:
			if (value == ON_value)
     614:	61 30       	cpi	r22, 0x01	; 1
     616:	19 f4       	brne	.+6      	; 0x61e <DIO_write_port+0x1a>
			{
				PORTA = 0xff;
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	8b bb       	out	0x1b, r24	; 27
     61c:	08 95       	ret
			}
			else if (value == OFF_value)
     61e:	61 11       	cpse	r22, r1
     620:	1c c0       	rjmp	.+56     	; 0x65a <DIO_write_port+0x56>
			{
				PORTA = 0x00;
     622:	1b ba       	out	0x1b, r1	; 27
     624:	08 95       	ret
			}
			break;
		case B:
			if (value == ON_value)
     626:	61 30       	cpi	r22, 0x01	; 1
     628:	19 f4       	brne	.+6      	; 0x630 <DIO_write_port+0x2c>
			{
				PORTA = 0xff;
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	8b bb       	out	0x1b, r24	; 27
     62e:	08 95       	ret
			}
			else if (value == OFF_value)
     630:	61 11       	cpse	r22, r1
     632:	13 c0       	rjmp	.+38     	; 0x65a <DIO_write_port+0x56>
			{
				PORTA = 0x00;
     634:	1b ba       	out	0x1b, r1	; 27
     636:	08 95       	ret
			}
			break;
		case C:
			if (value == ON_value)
     638:	61 30       	cpi	r22, 0x01	; 1
     63a:	19 f4       	brne	.+6      	; 0x642 <DIO_write_port+0x3e>
			{
				PORTA = 0xff;
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	8b bb       	out	0x1b, r24	; 27
     640:	08 95       	ret
			}
			else if (value == OFF_value)
     642:	61 11       	cpse	r22, r1
     644:	0a c0       	rjmp	.+20     	; 0x65a <DIO_write_port+0x56>
			{
				PORTA = 0x00;
     646:	1b ba       	out	0x1b, r1	; 27
     648:	08 95       	ret
			}
			break;
		case D:
			if (value == ON_value)
     64a:	61 30       	cpi	r22, 0x01	; 1
     64c:	19 f4       	brne	.+6      	; 0x654 <DIO_write_port+0x50>
			{
				PORTA = 0xff;
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	8b bb       	out	0x1b, r24	; 27
     652:	08 95       	ret
			}
			else if (value == OFF_value)
     654:	61 11       	cpse	r22, r1
     656:	01 c0       	rjmp	.+2      	; 0x65a <DIO_write_port+0x56>
			{
				PORTA = 0x00;
     658:	1b ba       	out	0x1b, r1	; 27
     65a:	08 95       	ret

0000065c <external_interrupt_sense_mode>:
	sei();
}

void external_interrupt_sense_mode(uint8_t interrupt_num,  INT_sense_mode mode)
{
	switch (interrupt_num)
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	31 f1       	breq	.+76     	; 0x6ac <external_interrupt_sense_mode+0x50>
     660:	20 f0       	brcs	.+8      	; 0x66a <external_interrupt_sense_mode+0xe>
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	09 f4       	brne	.+2      	; 0x668 <external_interrupt_sense_mode+0xc>
     666:	43 c0       	rjmp	.+134    	; 0x6ee <external_interrupt_sense_mode+0x92>
     668:	08 95       	ret
	{
		/***********************************************/
		case 0: //in case user chose External interrupt 0
			if (mode == rising_edge)
     66a:	61 11       	cpse	r22, r1
     66c:	04 c0       	rjmp	.+8      	; 0x676 <external_interrupt_sense_mode+0x1a>
			{
				MCUCR |= (1<<ISC00) | (1<<ISC01);//setting (MCU Control Register Bit-0 and Bit-1) for rising edge mode
     66e:	85 b7       	in	r24, 0x35	; 53
     670:	83 60       	ori	r24, 0x03	; 3
     672:	85 bf       	out	0x35, r24	; 53
				break;
     674:	08 95       	ret
			}
			else if (mode == falling_edge)
     676:	61 30       	cpi	r22, 0x01	; 1
     678:	39 f4       	brne	.+14     	; 0x688 <external_interrupt_sense_mode+0x2c>
			{
				MCUCR &= ~(1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for falling edge mode
     67a:	85 b7       	in	r24, 0x35	; 53
     67c:	8e 7f       	andi	r24, 0xFE	; 254
     67e:	85 bf       	out	0x35, r24	; 53
				MCUCR |= (1<<ISC01); 
     680:	85 b7       	in	r24, 0x35	; 53
     682:	82 60       	ori	r24, 0x02	; 2
     684:	85 bf       	out	0x35, r24	; 53
				
				break;
     686:	08 95       	ret
			}
			
			else if (mode == logic_change)
     688:	62 30       	cpi	r22, 0x02	; 2
     68a:	39 f4       	brne	.+14     	; 0x69a <external_interrupt_sense_mode+0x3e>
			{
				MCUCR |= (1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for logic change mode
     68c:	85 b7       	in	r24, 0x35	; 53
     68e:	81 60       	ori	r24, 0x01	; 1
     690:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC01);
     692:	85 b7       	in	r24, 0x35	; 53
     694:	8d 7f       	andi	r24, 0xFD	; 253
     696:	85 bf       	out	0x35, r24	; 53
				
				break;
     698:	08 95       	ret
			}
			
			else if (mode == low_level)
     69a:	63 30       	cpi	r22, 0x03	; 3
     69c:	d1 f5       	brne	.+116    	; 0x712 <external_interrupt_sense_mode+0xb6>
			{
				MCUCR &= ~(1<<ISC00); //setting (MCU Control Register Bit-0 and Bit-1) for low_level mode
     69e:	85 b7       	in	r24, 0x35	; 53
     6a0:	8e 7f       	andi	r24, 0xFE	; 254
     6a2:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC01);
     6a4:	85 b7       	in	r24, 0x35	; 53
     6a6:	8d 7f       	andi	r24, 0xFD	; 253
     6a8:	85 bf       	out	0x35, r24	; 53
				break;
     6aa:	08 95       	ret
				break;
			}
			
		/***********************************************/
		case 1: //in case user chose External interrupt 1
			if (mode == rising_edge)
     6ac:	61 11       	cpse	r22, r1
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <external_interrupt_sense_mode+0x5c>
			{
				MCUCR |= (1<<ISC10) | (1<<ISC11);	//setting (MCU Control Register Bit-2 and Bit-3) for rising edge mode
     6b0:	85 b7       	in	r24, 0x35	; 53
     6b2:	8c 60       	ori	r24, 0x0C	; 12
     6b4:	85 bf       	out	0x35, r24	; 53
				break;
     6b6:	08 95       	ret
			}
			else if (mode == falling_edge)
     6b8:	61 30       	cpi	r22, 0x01	; 1
     6ba:	39 f4       	brne	.+14     	; 0x6ca <external_interrupt_sense_mode+0x6e>
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for falling edge mode
     6bc:	85 b7       	in	r24, 0x35	; 53
     6be:	8b 7f       	andi	r24, 0xFB	; 251
     6c0:	85 bf       	out	0x35, r24	; 53
				MCUCR |= (1<<ISC11); 
     6c2:	85 b7       	in	r24, 0x35	; 53
     6c4:	88 60       	ori	r24, 0x08	; 8
     6c6:	85 bf       	out	0x35, r24	; 53
				break;
     6c8:	08 95       	ret
			}
		
			else if (mode == logic_change)
     6ca:	62 30       	cpi	r22, 0x02	; 2
     6cc:	39 f4       	brne	.+14     	; 0x6dc <external_interrupt_sense_mode+0x80>
			{
				MCUCR |= (1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for logic change mode
     6ce:	85 b7       	in	r24, 0x35	; 53
     6d0:	84 60       	ori	r24, 0x04	; 4
     6d2:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC11);
     6d4:	85 b7       	in	r24, 0x35	; 53
     6d6:	87 7f       	andi	r24, 0xF7	; 247
     6d8:	85 bf       	out	0x35, r24	; 53
				break;
     6da:	08 95       	ret
			}
		
			else if (mode == low_level)
     6dc:	63 30       	cpi	r22, 0x03	; 3
     6de:	c9 f4       	brne	.+50     	; 0x712 <external_interrupt_sense_mode+0xb6>
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for low_level mode
     6e0:	85 b7       	in	r24, 0x35	; 53
     6e2:	8b 7f       	andi	r24, 0xFB	; 251
     6e4:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC11);
     6e6:	85 b7       	in	r24, 0x35	; 53
     6e8:	87 7f       	andi	r24, 0xF7	; 247
     6ea:	85 bf       	out	0x35, r24	; 53
				break;
     6ec:	08 95       	ret
				break;
			}
		
		/***********************************************/
		case 2: //in case user chose External interrupt 2
			if (mode == rising_edge)
     6ee:	61 11       	cpse	r22, r1
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <external_interrupt_sense_mode+0x9e>
			{
				MCUCSR |= (1<<ISC2);	//setting (MCUCSR Bit-6) for rising edge mode
     6f2:	84 b7       	in	r24, 0x34	; 52
     6f4:	80 64       	ori	r24, 0x40	; 64
     6f6:	84 bf       	out	0x34, r24	; 52
				break;
     6f8:	08 95       	ret
			}
			else if (mode == falling_edge)
     6fa:	61 30       	cpi	r22, 0x01	; 1
     6fc:	21 f4       	brne	.+8      	; 0x706 <external_interrupt_sense_mode+0xaa>
			{
				MCUCSR &= ~(1<<ISC2); //setting (MCUCSR Bit-6) for falling edge mode
     6fe:	84 b7       	in	r24, 0x34	; 52
     700:	8f 7b       	andi	r24, 0xBF	; 191
     702:	84 bf       	out	0x34, r24	; 52
				break;
     704:	08 95       	ret
			}
		
			else if (mode == logic_change || mode == low_level)
     706:	62 50       	subi	r22, 0x02	; 2
     708:	62 30       	cpi	r22, 0x02	; 2
     70a:	18 f4       	brcc	.+6      	; 0x712 <external_interrupt_sense_mode+0xb6>
			{
				/*force setting (MCUCSR Bit-6) for rising edge mode
				as logic change and low level modes are not options for EXT_INT2*/
				MCUCSR |= (1<<ISC2);	
     70c:	84 b7       	in	r24, 0x34	; 52
     70e:	80 64       	ori	r24, 0x40	; 64
     710:	84 bf       	out	0x34, r24	; 52
     712:	08 95       	ret

00000714 <external_interrupt_init>:
}


void external_interrupt_init(uint8_t interrupt_num)
{
	switch (interrupt_num)
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	41 f0       	breq	.+16     	; 0x728 <external_interrupt_init+0x14>
     718:	18 f0       	brcs	.+6      	; 0x720 <external_interrupt_init+0xc>
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	49 f0       	breq	.+18     	; 0x730 <external_interrupt_init+0x1c>
     71e:	08 95       	ret
	{
		case 0:
		{
			GICR |= 1<<6; //setting bit-6 in GICR register HIGH to enable interrupt 0
     720:	8b b7       	in	r24, 0x3b	; 59
     722:	80 64       	ori	r24, 0x40	; 64
     724:	8b bf       	out	0x3b, r24	; 59
			break;
     726:	08 95       	ret
		}
		case 1:
		{
			GICR |= (1<<INT1);//setting bit-7 in GICR register HIGH to enable interrupt 1
     728:	8b b7       	in	r24, 0x3b	; 59
     72a:	80 68       	ori	r24, 0x80	; 128
     72c:	8b bf       	out	0x3b, r24	; 59
			break;
     72e:	08 95       	ret
		}
		case 2:
		{
			GICR |= (1<<INT2);//setting bit-5 in GICR register HIGH to enable interrupt 2
     730:	8b b7       	in	r24, 0x3b	; 59
     732:	80 62       	ori	r24, 0x20	; 32
     734:	8b bf       	out	0x3b, r24	; 59
     736:	08 95       	ret

00000738 <timer_init>:
static const ST_delay clear_delay = {0,0,0,0}; // used to clear delay structure before each initialization



void timer_init(EN_timer_num timer_num,EN_timer_interrupt timer_interrupt_init, EN_timer_prescaler prescaler, double delay_value, EN_delay_unit delay_unit)
{
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	6f 92       	push	r6
     73e:	7f 92       	push	r7
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	00 d0       	rcall	.+0      	; 0x75a <timer_init+0x22>
     75a:	00 d0       	rcall	.+0      	; 0x75c <timer_init+0x24>
     75c:	1f 92       	push	r1
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	8d 83       	std	Y+5, r24	; 0x05
     764:	69 83       	std	Y+1, r22	; 0x01
     766:	74 2e       	mov	r7, r20
     768:	48 01       	movw	r8, r16
     76a:	59 01       	movw	r10, r18
     76c:	1e 2d       	mov	r17, r14
	//terminate if delay is 0 
	if (delay_value <=0)
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	a9 01       	movw	r20, r18
     774:	c5 01       	movw	r24, r10
     776:	b4 01       	movw	r22, r8
     778:	0e 94 6f 06 	call	0xcde	; 0xcde <__cmpsf2>
     77c:	18 16       	cp	r1, r24
     77e:	0c f0       	brlt	.+2      	; 0x782 <timer_init+0x4a>
     780:	6f c1       	rjmp	.+734    	; 0xa60 <__stack+0x201>
	{
		return;
	}
	
	// interrupt enable or not 
	switch (timer_interrupt_init)
     782:	29 81       	ldd	r18, Y+1	; 0x01
     784:	22 23       	and	r18, r18
     786:	19 f0       	breq	.+6      	; 0x78e <timer_init+0x56>
     788:	21 30       	cpi	r18, 0x01	; 1
     78a:	a1 f0       	breq	.+40     	; 0x7b4 <timer_init+0x7c>
     78c:	25 c0       	rjmp	.+74     	; 0x7d8 <timer_init+0xa0>
	{
		case interrupt_enable:
			switch (timer_num)
     78e:	8d 81       	ldd	r24, Y+5	; 0x05
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	41 f0       	breq	.+16     	; 0x7a4 <timer_init+0x6c>
     794:	18 f0       	brcs	.+6      	; 0x79c <timer_init+0x64>
     796:	82 30       	cpi	r24, 0x02	; 2
     798:	49 f0       	breq	.+18     	; 0x7ac <timer_init+0x74>
     79a:	1e c0       	rjmp	.+60     	; 0x7d8 <timer_init+0xa0>
			{	
				case timer_0:
					TIMSK |= (1<<TOIE0);
     79c:	89 b7       	in	r24, 0x39	; 57
     79e:	81 60       	ori	r24, 0x01	; 1
     7a0:	89 bf       	out	0x39, r24	; 57
					break;
     7a2:	1a c0       	rjmp	.+52     	; 0x7d8 <timer_init+0xa0>

				case timer_1:
					TIMSK |= (1<<TOIE1);
     7a4:	89 b7       	in	r24, 0x39	; 57
     7a6:	84 60       	ori	r24, 0x04	; 4
     7a8:	89 bf       	out	0x39, r24	; 57
					break;
     7aa:	16 c0       	rjmp	.+44     	; 0x7d8 <timer_init+0xa0>
										
				case timer_2:
					TIMSK |= (1<<TOIE2);
     7ac:	89 b7       	in	r24, 0x39	; 57
     7ae:	80 64       	ori	r24, 0x40	; 64
     7b0:	89 bf       	out	0x39, r24	; 57
					break;				
     7b2:	12 c0       	rjmp	.+36     	; 0x7d8 <timer_init+0xa0>
			}
			break;
				
		case interrupt_disable:
			switch (timer_num)
     7b4:	2d 81       	ldd	r18, Y+5	; 0x05
     7b6:	21 30       	cpi	r18, 0x01	; 1
     7b8:	41 f0       	breq	.+16     	; 0x7ca <timer_init+0x92>
     7ba:	18 f0       	brcs	.+6      	; 0x7c2 <timer_init+0x8a>
     7bc:	22 30       	cpi	r18, 0x02	; 2
     7be:	49 f0       	breq	.+18     	; 0x7d2 <timer_init+0x9a>
     7c0:	0b c0       	rjmp	.+22     	; 0x7d8 <timer_init+0xa0>
			{
				case timer_0:
					TIMSK &=~ (1<<TOIE0);
     7c2:	89 b7       	in	r24, 0x39	; 57
     7c4:	8e 7f       	andi	r24, 0xFE	; 254
     7c6:	89 bf       	out	0x39, r24	; 57
					break;
     7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <timer_init+0xa0>

				case timer_1:
					TIMSK &=~ (1<<TOIE1);
     7ca:	89 b7       	in	r24, 0x39	; 57
     7cc:	8b 7f       	andi	r24, 0xFB	; 251
     7ce:	89 bf       	out	0x39, r24	; 57
					break;
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <timer_init+0xa0>
										
				case timer_2:
					TIMSK &=~ (1<<TOIE2);
     7d2:	89 b7       	in	r24, 0x39	; 57
     7d4:	8f 7b       	andi	r24, 0xBF	; 191
     7d6:	89 bf       	out	0x39, r24	; 57
			break;
			
	}
	
	// reset delay structure according to the timer being initialized 
		switch(timer_num)
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	71 f0       	breq	.+28     	; 0x7fa <timer_init+0xc2>
     7de:	18 f0       	brcs	.+6      	; 0x7e6 <timer_init+0xae>
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	a9 f0       	breq	.+42     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7e4:	1d c0       	rjmp	.+58     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	{	
		case timer_0:	
			delay_0 = clear_delay ;
     7e6:	8e e0       	ldi	r24, 0x0E	; 14
     7e8:	e0 e6       	ldi	r30, 0x60	; 96
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	a2 e8       	ldi	r26, 0x82	; 130
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	01 90       	ld	r0, Z+
     7f2:	0d 92       	st	X+, r0
     7f4:	8a 95       	dec	r24
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <timer_init+0xb8>
			break;
     7f8:	13 c0       	rjmp	.+38     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		
		case timer_1:
			delay_1 = clear_delay ;
     7fa:	8e e0       	ldi	r24, 0x0E	; 14
     7fc:	e0 e6       	ldi	r30, 0x60	; 96
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	a4 e7       	ldi	r26, 0x74	; 116
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	01 90       	ld	r0, Z+
     806:	0d 92       	st	X+, r0
     808:	8a 95       	dec	r24
     80a:	e1 f7       	brne	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			break;
     80c:	09 c0       	rjmp	.+18     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		
		case timer_2:
			delay_2 = clear_delay ;
     80e:	8e e0       	ldi	r24, 0x0E	; 14
     810:	e0 e6       	ldi	r30, 0x60	; 96
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	a1 e9       	ldi	r26, 0x91	; 145
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	8a 95       	dec	r24
     81e:	e1 f7       	brne	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	double timer_init_value = 0;
	double residual_buffer=0;
	double T_tick =0;
	
	/* timer size setting*/
	switch (timer_num)
     820:	2d 81       	ldd	r18, Y+5	; 0x05
     822:	21 30       	cpi	r18, 0x01	; 1
     824:	49 f0       	breq	.+18     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
			break;
	}
	
	/* defining timer calculations variables*/
	uint16_t prescaler_value =1;
	double timer_size =256;
     826:	0f 2e       	mov	r0, r31
     828:	c1 2c       	mov	r12, r1
     82a:	d1 2c       	mov	r13, r1
     82c:	f0 e8       	ldi	r31, 0x80	; 128
     82e:	ef 2e       	mov	r14, r31
     830:	f3 e4       	ldi	r31, 0x43	; 67
     832:	ff 2e       	mov	r15, r31
     834:	f0 2d       	mov	r31, r0
     836:	08 c0       	rjmp	.+16     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			timer_size =256;
			break;
		}
		case timer_1:
		{
			timer_size =65536;
     838:	0f 2e       	mov	r0, r31
     83a:	c1 2c       	mov	r12, r1
     83c:	d1 2c       	mov	r13, r1
     83e:	f0 e8       	ldi	r31, 0x80	; 128
     840:	ef 2e       	mov	r14, r31
     842:	f7 e4       	ldi	r31, 0x47	; 71
     844:	ff 2e       	mov	r15, r31
     846:	f0 2d       	mov	r31, r0
			break;
		}
	}
	
	/* converting delay units to micro-seconds as calcualtions are held in micro-seconds */
	switch (delay_unit)
     848:	11 23       	and	r17, r17
     84a:	19 f0       	breq	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     84c:	11 30       	cpi	r17, 0x01	; 1
     84e:	61 f0       	breq	.+24     	; 0x868 <__stack+0x9>
     850:	15 c0       	rjmp	.+42     	; 0x87c <__stack+0x1d>
	{
		case seconds:
		{
			delay_value = delay_value*1000000;
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	34 e2       	ldi	r19, 0x24	; 36
     856:	44 e7       	ldi	r20, 0x74	; 116
     858:	59 e4       	ldi	r21, 0x49	; 73
     85a:	c5 01       	movw	r24, r10
     85c:	b4 01       	movw	r22, r8
     85e:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     862:	4b 01       	movw	r8, r22
     864:	5c 01       	movw	r10, r24
			break;
     866:	0a c0       	rjmp	.+20     	; 0x87c <__stack+0x1d>
		}

		case millis:
		{
			delay_value = delay_value * 1000;
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	4a e7       	ldi	r20, 0x7A	; 122
     86e:	54 e4       	ldi	r21, 0x44	; 68
     870:	c5 01       	movw	r24, r10
     872:	b4 01       	movw	r22, r8
     874:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     878:	4b 01       	movw	r8, r22
     87a:	5c 01       	movw	r10, r24
		}

	}
	
	/* setting prescaler depending on the user choice, if automatic, then the could will evaluate it depending on the delay value*/
	switch (prescaler)
     87c:	47 2d       	mov	r20, r7
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	48 30       	cpi	r20, 0x08	; 8
     882:	51 05       	cpc	r21, r1
     884:	28 f4       	brcc	.+10     	; 0x890 <__stack+0x31>
     886:	fa 01       	movw	r30, r20
     888:	e6 5d       	subi	r30, 0xD6	; 214
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
     88c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__tablejump2__>
			delay_2 = clear_delay ;
			break;
	}
	
	/* defining timer calculations variables*/
	uint16_t prescaler_value =1;
     890:	01 e0       	ldi	r16, 0x01	; 1
     892:	10 e0       	ldi	r17, 0x00	; 0
     894:	75 c0       	rjmp	.+234    	; 0x980 <__stack+0x121>
	/* setting prescaler depending on the user choice, if automatic, then the could will evaluate it depending on the delay value*/
	switch (prescaler)
	{
		case automatic:
		{
			if (delay_value <= 1024)
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	40 e8       	ldi	r20, 0x80	; 128
     89c:	54 e4       	ldi	r21, 0x44	; 68
     89e:	c5 01       	movw	r24, r10
     8a0:	b4 01       	movw	r22, r8
     8a2:	0e 94 6f 06 	call	0xcde	; 0xcde <__cmpsf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	0c f0       	brlt	.+2      	; 0x8ac <__stack+0x4d>
     8aa:	5c c0       	rjmp	.+184    	; 0x964 <__stack+0x105>
			{
				prescaler_value = 1;
			}
			
			else if (delay_value > 1024 && delay_value <= 10240 )
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e8       	ldi	r20, 0x80	; 128
     8b2:	54 e4       	ldi	r21, 0x44	; 68
     8b4:	c5 01       	movw	r24, r10
     8b6:	b4 01       	movw	r22, r8
     8b8:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     8bc:	18 16       	cp	r1, r24
     8be:	5c f4       	brge	.+22     	; 0x8d6 <__stack+0x77>
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e2       	ldi	r20, 0x20	; 32
     8c6:	56 e4       	ldi	r21, 0x46	; 70
     8c8:	c5 01       	movw	r24, r10
     8ca:	b4 01       	movw	r22, r8
     8cc:	0e 94 6f 06 	call	0xcde	; 0xcde <__cmpsf2>
     8d0:	18 16       	cp	r1, r24
     8d2:	0c f0       	brlt	.+2      	; 0x8d6 <__stack+0x77>
     8d4:	4a c0       	rjmp	.+148    	; 0x96a <__stack+0x10b>
			{
				prescaler_value = 8;
			}
			
			else if (delay_value > 10240 && delay_value <= 102400 )
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e2       	ldi	r20, 0x20	; 32
     8dc:	56 e4       	ldi	r21, 0x46	; 70
     8de:	c5 01       	movw	r24, r10
     8e0:	b4 01       	movw	r22, r8
     8e2:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     8e6:	18 16       	cp	r1, r24
     8e8:	54 f4       	brge	.+20     	; 0x8fe <__stack+0x9f>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	48 ec       	ldi	r20, 0xC8	; 200
     8f0:	57 e4       	ldi	r21, 0x47	; 71
     8f2:	c5 01       	movw	r24, r10
     8f4:	b4 01       	movw	r22, r8
     8f6:	0e 94 6f 06 	call	0xcde	; 0xcde <__cmpsf2>
     8fa:	18 16       	cp	r1, r24
     8fc:	cc f5       	brge	.+114    	; 0x970 <__stack+0x111>
			{
				prescaler_value = 64;
			}
			else if (delay_value > 102400 && delay_value <= 1024000 )
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	48 ec       	ldi	r20, 0xC8	; 200
     904:	57 e4       	ldi	r21, 0x47	; 71
     906:	c5 01       	movw	r24, r10
     908:	b4 01       	movw	r22, r8
     90a:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     90e:	18 16       	cp	r1, r24
     910:	54 f4       	brge	.+20     	; 0x926 <__stack+0xc7>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	4a e7       	ldi	r20, 0x7A	; 122
     918:	59 e4       	ldi	r21, 0x49	; 73
     91a:	c5 01       	movw	r24, r10
     91c:	b4 01       	movw	r22, r8
     91e:	0e 94 6f 06 	call	0xcde	; 0xcde <__cmpsf2>
     922:	18 16       	cp	r1, r24
     924:	44 f5       	brge	.+80     	; 0x976 <__stack+0x117>
			{
				prescaler_value = 256;
			}
			else if (delay_value > 1024000 )
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	4a e7       	ldi	r20, 0x7A	; 122
     92c:	59 e4       	ldi	r21, 0x49	; 73
     92e:	c5 01       	movw	r24, r10
     930:	b4 01       	movw	r22, r8
     932:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     936:	18 16       	cp	r1, r24
     938:	0c f1       	brlt	.+66     	; 0x97c <__stack+0x11d>
			delay_2 = clear_delay ;
			break;
	}
	
	/* defining timer calculations variables*/
	uint16_t prescaler_value =1;
     93a:	01 e0       	ldi	r16, 0x01	; 1
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	20 c0       	rjmp	.+64     	; 0x980 <__stack+0x121>
			prescaler_value = 8;
			break;
		}
		case pre_32:
		{
			prescaler_value = 32;
     940:	00 e2       	ldi	r16, 0x20	; 32
     942:	10 e0       	ldi	r17, 0x00	; 0
			break;
     944:	1d c0       	rjmp	.+58     	; 0x980 <__stack+0x121>
		}		
		case pre_64:
		{
			prescaler_value = 64;
     946:	00 e4       	ldi	r16, 0x40	; 64
     948:	10 e0       	ldi	r17, 0x00	; 0
			break;
     94a:	1a c0       	rjmp	.+52     	; 0x980 <__stack+0x121>
		}
		case pre_128:
		{
			prescaler_value = 128;
     94c:	00 e8       	ldi	r16, 0x80	; 128
     94e:	10 e0       	ldi	r17, 0x00	; 0
			break;
     950:	17 c0       	rjmp	.+46     	; 0x980 <__stack+0x121>
		}		
		case pre_256:
		{
			prescaler_value = 256;
     952:	00 e0       	ldi	r16, 0x00	; 0
     954:	11 e0       	ldi	r17, 0x01	; 1
			break;
     956:	14 c0       	rjmp	.+40     	; 0x980 <__stack+0x121>
		}
		case pre_1024:
		{
			prescaler_value = 1024;
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	14 e0       	ldi	r17, 0x04	; 4
			break;
     95c:	11 c0       	rjmp	.+34     	; 0x980 <__stack+0x121>
			prescaler_value = 1;
			break;
		}	
		case pre_8:
		{
			prescaler_value = 8;
     95e:	08 e0       	ldi	r16, 0x08	; 8
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	0e c0       	rjmp	.+28     	; 0x980 <__stack+0x121>
	{
		case automatic:
		{
			if (delay_value <= 1024)
			{
				prescaler_value = 1;
     964:	01 e0       	ldi	r16, 0x01	; 1
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	0b c0       	rjmp	.+22     	; 0x980 <__stack+0x121>
			}
			
			else if (delay_value > 1024 && delay_value <= 10240 )
			{
				prescaler_value = 8;
     96a:	08 e0       	ldi	r16, 0x08	; 8
     96c:	10 e0       	ldi	r17, 0x00	; 0
     96e:	08 c0       	rjmp	.+16     	; 0x980 <__stack+0x121>
			}
			
			else if (delay_value > 10240 && delay_value <= 102400 )
			{
				prescaler_value = 64;
     970:	00 e4       	ldi	r16, 0x40	; 64
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	05 c0       	rjmp	.+10     	; 0x980 <__stack+0x121>
			}
			else if (delay_value > 102400 && delay_value <= 1024000 )
			{
				prescaler_value = 256;
     976:	00 e0       	ldi	r16, 0x00	; 0
     978:	11 e0       	ldi	r17, 0x01	; 1
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x121>
			}
			else if (delay_value > 1024000 )
			{
				prescaler_value = 1024;
     97c:	00 e0       	ldi	r16, 0x00	; 0
     97e:	14 e0       	ldi	r17, 0x04	; 4
		}	
	}


	/*****************************************start timer math***********************************************/
	T_tick = ( ((double)prescaler_value) / (FCPU/1000000) );
     980:	b8 01       	movw	r22, r16
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 15 07 	call	0xe2a	; 0xe2a <__floatunsisf>
     98a:	2b 01       	movw	r4, r22
     98c:	3c 01       	movw	r6, r24
	max_delay = timer_size * T_tick;
     98e:	9b 01       	movw	r18, r22
     990:	ac 01       	movw	r20, r24
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     99a:	6b 01       	movw	r12, r22
     99c:	7c 01       	movw	r14, r24

	if (max_delay >= delay_value)
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	c5 01       	movw	r24, r10
     9a4:	b4 01       	movw	r22, r8
     9a6:	0e 94 6f 06 	call	0xcde	; 0xcde <__cmpsf2>
     9aa:	18 16       	cp	r1, r24
     9ac:	84 f0       	brlt	.+32     	; 0x9ce <__stack+0x16f>
	{
		timer_init_value = round((max_delay - delay_value) / T_tick);
     9ae:	a5 01       	movw	r20, r10
     9b0:	94 01       	movw	r18, r8
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	0e 94 02 06 	call	0xc04	; 0xc04 <__subsf3>
     9ba:	a3 01       	movw	r20, r6
     9bc:	92 01       	movw	r18, r4
     9be:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     9c2:	0e 94 9b 08 	call	0x1136	; 0x1136 <round>
	
	/* defining timer calculations variables*/
	uint16_t prescaler_value =1;
	double timer_size =256;
	double max_delay = 0;
	double n_overflow = 0;
     9c6:	81 2c       	mov	r8, r1
     9c8:	91 2c       	mov	r9, r1
     9ca:	54 01       	movw	r10, r8
     9cc:	2a c0       	rjmp	.+84     	; 0xa22 <__stack+0x1c3>
		timer_init_value = round((max_delay - delay_value) / T_tick);
	}
	
	else 
	{	
		residual_buffer = fmod(delay_value,max_delay);
     9ce:	a7 01       	movw	r20, r14
     9d0:	96 01       	movw	r18, r12
     9d2:	c5 01       	movw	r24, r10
     9d4:	b4 01       	movw	r22, r8
     9d6:	0e 94 5d 07 	call	0xeba	; 0xeba <fmod>
     9da:	69 83       	std	Y+1, r22	; 0x01
     9dc:	7a 83       	std	Y+2, r23	; 0x02
     9de:	8b 83       	std	Y+3, r24	; 0x03
     9e0:	9c 83       	std	Y+4, r25	; 0x04
		
		n_overflow = ((delay_value - residual_buffer)/max_delay) + 1 ; // (int)(delay/max_delay)
     9e2:	9b 01       	movw	r18, r22
     9e4:	ac 01       	movw	r20, r24
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	0e 94 02 06 	call	0xc04	; 0xc04 <__subsf3>
     9ee:	a7 01       	movw	r20, r14
     9f0:	96 01       	movw	r18, r12
     9f2:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e8       	ldi	r20, 0x80	; 128
     9fc:	5f e3       	ldi	r21, 0x3F	; 63
     9fe:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
     a02:	4b 01       	movw	r8, r22
     a04:	5c 01       	movw	r10, r24
		timer_init_value = round(((max_delay - residual_buffer) / T_tick));
     a06:	29 81       	ldd	r18, Y+1	; 0x01
     a08:	3a 81       	ldd	r19, Y+2	; 0x02
     a0a:	4b 81       	ldd	r20, Y+3	; 0x03
     a0c:	5c 81       	ldd	r21, Y+4	; 0x04
     a0e:	c7 01       	movw	r24, r14
     a10:	b6 01       	movw	r22, r12
     a12:	0e 94 02 06 	call	0xc04	; 0xc04 <__subsf3>
     a16:	a3 01       	movw	r20, r6
     a18:	92 01       	movw	r18, r4
     a1a:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     a1e:	0e 94 9b 08 	call	0x1136	; 0x1136 <round>
	}
	/*****************************************end timer math***********************************************/	
	switch (timer_num)
     a22:	2d 81       	ldd	r18, Y+5	; 0x05
     a24:	22 23       	and	r18, r18
     a26:	19 f0       	breq	.+6      	; 0xa2e <__stack+0x1cf>
     a28:	22 30       	cpi	r18, 0x02	; 2
     a2a:	71 f0       	breq	.+28     	; 0xa48 <__stack+0x1e9>
     a2c:	19 c0       	rjmp	.+50     	; 0xa60 <__stack+0x201>
	{
		case timer_0:
		{
			delay_0.init_value = timer_init_value;
     a2e:	e2 e8       	ldi	r30, 0x82	; 130
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	60 83       	st	Z, r22
     a34:	71 83       	std	Z+1, r23	; 0x01
     a36:	82 83       	std	Z+2, r24	; 0x02
     a38:	93 83       	std	Z+3, r25	; 0x03
			delay_0.n_overflow = n_overflow;
     a3a:	84 82       	std	Z+4, r8	; 0x04
     a3c:	95 82       	std	Z+5, r9	; 0x05
     a3e:	a6 82       	std	Z+6, r10	; 0x06
     a40:	b7 82       	std	Z+7, r11	; 0x07
			delay_0.prescaler_value = prescaler_value;
     a42:	11 87       	std	Z+9, r17	; 0x09
     a44:	00 87       	std	Z+8, r16	; 0x08
			break;
     a46:	0c c0       	rjmp	.+24     	; 0xa60 <__stack+0x201>
			//delay_1.prescaler_value = prescaler_value;
			break;
		}
		case timer_2:
		{
			delay_2.init_value = timer_init_value;
     a48:	e1 e9       	ldi	r30, 0x91	; 145
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	60 83       	st	Z, r22
     a4e:	71 83       	std	Z+1, r23	; 0x01
     a50:	82 83       	std	Z+2, r24	; 0x02
     a52:	93 83       	std	Z+3, r25	; 0x03
			delay_2.n_overflow = n_overflow;
     a54:	84 82       	std	Z+4, r8	; 0x04
     a56:	95 82       	std	Z+5, r9	; 0x05
     a58:	a6 82       	std	Z+6, r10	; 0x06
     a5a:	b7 82       	std	Z+7, r11	; 0x07
			delay_2.prescaler_value = prescaler_value;
     a5c:	11 87       	std	Z+9, r17	; 0x09
     a5e:	00 87       	std	Z+8, r16	; 0x08
			break;
		}		
	}

}
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	8f 90       	pop	r8
     a82:	7f 90       	pop	r7
     a84:	6f 90       	pop	r6
     a86:	5f 90       	pop	r5
     a88:	4f 90       	pop	r4
     a8a:	08 95       	ret

00000a8c <blocking_delay_0>:

void blocking_delay_0()
{
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
	TCNT0 = delay_0.init_value; // set time initial value
     a90:	c2 e8       	ldi	r28, 0x82	; 130
     a92:	d0 e0       	ldi	r29, 0x00	; 0
     a94:	68 81       	ld	r22, Y
     a96:	79 81       	ldd	r23, Y+1	; 0x01
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	9b 81       	ldd	r25, Y+3	; 0x03
     a9c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fixunssfsi>
     aa0:	62 bf       	out	0x32, r22	; 50
	switch (delay_0.prescaler_value)
     aa2:	88 85       	ldd	r24, Y+8	; 0x08
     aa4:	99 85       	ldd	r25, Y+9	; 0x09
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	b9 f0       	breq	.+46     	; 0xada <blocking_delay_0+0x4e>
     aac:	30 f4       	brcc	.+12     	; 0xaba <blocking_delay_0+0x2e>
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	91 05       	cpc	r25, r1
     ab2:	59 f0       	breq	.+22     	; 0xaca <blocking_delay_0+0x3e>
     ab4:	08 97       	sbiw	r24, 0x08	; 8
     ab6:	69 f0       	breq	.+26     	; 0xad2 <blocking_delay_0+0x46>
     ab8:	1c c0       	rjmp	.+56     	; 0xaf2 <blocking_delay_0+0x66>
     aba:	81 15       	cp	r24, r1
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	92 07       	cpc	r25, r18
     ac0:	81 f0       	breq	.+32     	; 0xae2 <blocking_delay_0+0x56>
     ac2:	81 15       	cp	r24, r1
     ac4:	94 40       	sbci	r25, 0x04	; 4
     ac6:	89 f0       	breq	.+34     	; 0xaea <blocking_delay_0+0x5e>
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <blocking_delay_0+0x66>
	{
		case 1:
		{
			TCCR0|= (1<<CS00);
     aca:	83 b7       	in	r24, 0x33	; 51
     acc:	81 60       	ori	r24, 0x01	; 1
     ace:	83 bf       	out	0x33, r24	; 51
			break;
     ad0:	13 c0       	rjmp	.+38     	; 0xaf8 <blocking_delay_0+0x6c>
		}
		case 8:
		{
			TCCR0|= (1<<CS01);
     ad2:	83 b7       	in	r24, 0x33	; 51
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	83 bf       	out	0x33, r24	; 51
			break;
     ad8:	0f c0       	rjmp	.+30     	; 0xaf8 <blocking_delay_0+0x6c>
		}
		case 64:
		{
			TCCR0|= (1<<CS01) | (1<<CS00) ;
     ada:	83 b7       	in	r24, 0x33	; 51
     adc:	83 60       	ori	r24, 0x03	; 3
     ade:	83 bf       	out	0x33, r24	; 51
			break;
     ae0:	0b c0       	rjmp	.+22     	; 0xaf8 <blocking_delay_0+0x6c>
		}
		case 256:
		{
			TCCR0|= (1<<CS02) ;
     ae2:	83 b7       	in	r24, 0x33	; 51
     ae4:	84 60       	ori	r24, 0x04	; 4
     ae6:	83 bf       	out	0x33, r24	; 51
			break;
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <blocking_delay_0+0x6c>
		}
		case 1024:
		{
			TCCR0|= (1<<CS02) | (1<<CS00) ;
     aea:	83 b7       	in	r24, 0x33	; 51
     aec:	85 60       	ori	r24, 0x05	; 5
     aee:	83 bf       	out	0x33, r24	; 51
			break;
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <blocking_delay_0+0x6c>
		}
		default:
		{
			TCCR0|= (1<<CS00);
     af2:	83 b7       	in	r24, 0x33	; 51
     af4:	81 60       	ori	r24, 0x01	; 1
     af6:	83 bf       	out	0x33, r24	; 51
		}								
	}
	
	do
	{
		while((TIFR&0x01)==0 && stop_timer_0_flag == 0);
     af8:	08 b6       	in	r0, 0x38	; 56
     afa:	00 fc       	sbrc	r0, 0
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <blocking_delay_0+0x7a>
     afe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     b02:	88 23       	and	r24, r24
     b04:	c9 f3       	breq	.-14     	; 0xaf8 <blocking_delay_0+0x6c>
		TIFR = 0x1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	88 bf       	out	0x38, r24	; 56
		delay_0.n_overflow_flag++;
     b0a:	c2 e8       	ldi	r28, 0x82	; 130
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
     b0e:	6a 85       	ldd	r22, Y+10	; 0x0a
     b10:	7b 85       	ldd	r23, Y+11	; 0x0b
     b12:	8c 85       	ldd	r24, Y+12	; 0x0c
     b14:	9d 85       	ldd	r25, Y+13	; 0x0d
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	0e 94 03 06 	call	0xc06	; 0xc06 <__addsf3>
     b22:	6a 87       	std	Y+10, r22	; 0x0a
     b24:	7b 87       	std	Y+11, r23	; 0x0b
     b26:	8c 87       	std	Y+12, r24	; 0x0c
     b28:	9d 87       	std	Y+13, r25	; 0x0d
	}
	while (delay_0.n_overflow_flag < (delay_0.n_overflow) && stop_timer_0_flag == 0);
     b2a:	6a 85       	ldd	r22, Y+10	; 0x0a
     b2c:	7b 85       	ldd	r23, Y+11	; 0x0b
     b2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b30:	9d 85       	ldd	r25, Y+13	; 0x0d
     b32:	2c 81       	ldd	r18, Y+4	; 0x04
     b34:	3d 81       	ldd	r19, Y+5	; 0x05
     b36:	4e 81       	ldd	r20, Y+6	; 0x06
     b38:	5f 81       	ldd	r21, Y+7	; 0x07
     b3a:	0e 94 6f 06 	call	0xcde	; 0xcde <__cmpsf2>
     b3e:	88 23       	and	r24, r24
     b40:	24 f4       	brge	.+8      	; 0xb4a <blocking_delay_0+0xbe>
     b42:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     b46:	88 23       	and	r24, r24
     b48:	b9 f2       	breq	.-82     	; 0xaf8 <blocking_delay_0+0x6c>
	stop_timer_0_flag = 0;
     b4a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
		
	TCCR0 = 0x00;
     b4e:	13 be       	out	0x33, r1	; 51
	delay_0.n_overflow_flag = 0;
     b50:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <delay_0+0xa>
     b54:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <delay_0+0xb>
     b58:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <delay_0+0xc>
     b5c:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <delay_0+0xd>
	
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <non_blocking_delay_2>:

void non_blocking_delay_2(EN_non_blocking_delay_status status)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
	if (status == start)
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	09 f0       	breq	.+2      	; 0xb70 <non_blocking_delay_2+0xa>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <non_blocking_delay_2+0x92>
	{
		TCNT2 = delay_2.init_value; // set time initial value
     b70:	c1 e9       	ldi	r28, 0x91	; 145
     b72:	d0 e0       	ldi	r29, 0x00	; 0
     b74:	68 81       	ld	r22, Y
     b76:	79 81       	ldd	r23, Y+1	; 0x01
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fixunssfsi>
     b80:	64 bd       	out	0x24, r22	; 36
		switch (delay_2.prescaler_value)
     b82:	88 85       	ldd	r24, Y+8	; 0x08
     b84:	99 85       	ldd	r25, Y+9	; 0x09
     b86:	80 34       	cpi	r24, 0x40	; 64
     b88:	91 05       	cpc	r25, r1
     b8a:	11 f1       	breq	.+68     	; 0xbd0 <non_blocking_delay_2+0x6a>
     b8c:	48 f4       	brcc	.+18     	; 0xba0 <non_blocking_delay_2+0x3a>
     b8e:	88 30       	cpi	r24, 0x08	; 8
     b90:	91 05       	cpc	r25, r1
     b92:	b1 f0       	breq	.+44     	; 0xbc0 <non_blocking_delay_2+0x5a>
     b94:	80 32       	cpi	r24, 0x20	; 32
     b96:	91 05       	cpc	r25, r1
     b98:	b9 f0       	breq	.+46     	; 0xbc8 <non_blocking_delay_2+0x62>
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	49 f5       	brne	.+82     	; 0xbf0 <non_blocking_delay_2+0x8a>
     b9e:	0c c0       	rjmp	.+24     	; 0xbb8 <non_blocking_delay_2+0x52>
     ba0:	81 15       	cp	r24, r1
     ba2:	21 e0       	ldi	r18, 0x01	; 1
     ba4:	92 07       	cpc	r25, r18
     ba6:	e1 f0       	breq	.+56     	; 0xbe0 <non_blocking_delay_2+0x7a>
     ba8:	81 15       	cp	r24, r1
     baa:	24 e0       	ldi	r18, 0x04	; 4
     bac:	92 07       	cpc	r25, r18
     bae:	e1 f0       	breq	.+56     	; 0xbe8 <non_blocking_delay_2+0x82>
     bb0:	80 38       	cpi	r24, 0x80	; 128
     bb2:	91 05       	cpc	r25, r1
     bb4:	e9 f4       	brne	.+58     	; 0xbf0 <non_blocking_delay_2+0x8a>
     bb6:	10 c0       	rjmp	.+32     	; 0xbd8 <non_blocking_delay_2+0x72>
		{
			case 1:
				TCCR2|= (1<<CS20);
     bb8:	85 b5       	in	r24, 0x25	; 37
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	85 bd       	out	0x25, r24	; 37
				break;
     bbe:	1f c0       	rjmp	.+62     	; 0xbfe <non_blocking_delay_2+0x98>
		
			case 8:
				TCCR2|= (1<<CS21);
     bc0:	85 b5       	in	r24, 0x25	; 37
     bc2:	82 60       	ori	r24, 0x02	; 2
     bc4:	85 bd       	out	0x25, r24	; 37
				break;
     bc6:	1b c0       	rjmp	.+54     	; 0xbfe <non_blocking_delay_2+0x98>
		
			case 32:
				TCCR2|= (1<<CS20) | (1<<CS21);
     bc8:	85 b5       	in	r24, 0x25	; 37
     bca:	83 60       	ori	r24, 0x03	; 3
     bcc:	85 bd       	out	0x25, r24	; 37
				break;
     bce:	17 c0       	rjmp	.+46     	; 0xbfe <non_blocking_delay_2+0x98>
		
			case 64:
				TCCR2|= (1<<CS22) ;
     bd0:	85 b5       	in	r24, 0x25	; 37
     bd2:	84 60       	ori	r24, 0x04	; 4
     bd4:	85 bd       	out	0x25, r24	; 37
				break;
     bd6:	13 c0       	rjmp	.+38     	; 0xbfe <non_blocking_delay_2+0x98>
		
			case 128:
				TCCR2|= (1<<CS20) | (1<<CS22) ;
     bd8:	85 b5       	in	r24, 0x25	; 37
     bda:	85 60       	ori	r24, 0x05	; 5
     bdc:	85 bd       	out	0x25, r24	; 37
				break;	
     bde:	0f c0       	rjmp	.+30     	; 0xbfe <non_blocking_delay_2+0x98>
		
			case 256:
				TCCR2|= (1<<CS21) | (1<<CS22);
     be0:	85 b5       	in	r24, 0x25	; 37
     be2:	86 60       	ori	r24, 0x06	; 6
     be4:	85 bd       	out	0x25, r24	; 37
				break;
     be6:	0b c0       	rjmp	.+22     	; 0xbfe <non_blocking_delay_2+0x98>
		
			case 1024:
				TCCR2|= (1<<CS20) | (1<<CS21) |(1<<CS22) ;
     be8:	85 b5       	in	r24, 0x25	; 37
     bea:	87 60       	ori	r24, 0x07	; 7
     bec:	85 bd       	out	0x25, r24	; 37
				break;
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <non_blocking_delay_2+0x98>
		
			default:
				TCCR2|= (1<<CS20);//set default to 1 prescaler
     bf0:	85 b5       	in	r24, 0x25	; 37
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	85 bd       	out	0x25, r24	; 37
				break;
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <non_blocking_delay_2+0x98>
		}
	}
	else if (status == stop)
     bf8:	81 11       	cpse	r24, r1
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <non_blocking_delay_2+0x98>
	{
		
		TCCR2 = 0x00 ;
     bfc:	15 bc       	out	0x25, r1	; 37
	}

	//stop_timer_2_flag = 0;
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <__subsf3>:
     c04:	50 58       	subi	r21, 0x80	; 128

00000c06 <__addsf3>:
     c06:	bb 27       	eor	r27, r27
     c08:	aa 27       	eor	r26, r26
     c0a:	0e 94 1a 06 	call	0xc34	; 0xc34 <__addsf3x>
     c0e:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_round>
     c12:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscA>
     c16:	38 f0       	brcs	.+14     	; 0xc26 <__addsf3+0x20>
     c18:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscB>
     c1c:	20 f0       	brcs	.+8      	; 0xc26 <__addsf3+0x20>
     c1e:	39 f4       	brne	.+14     	; 0xc2e <__addsf3+0x28>
     c20:	9f 3f       	cpi	r25, 0xFF	; 255
     c22:	19 f4       	brne	.+6      	; 0xc2a <__addsf3+0x24>
     c24:	26 f4       	brtc	.+8      	; 0xc2e <__addsf3+0x28>
     c26:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_nan>
     c2a:	0e f4       	brtc	.+2      	; 0xc2e <__addsf3+0x28>
     c2c:	e0 95       	com	r30
     c2e:	e7 fb       	bst	r30, 7
     c30:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>

00000c34 <__addsf3x>:
     c34:	e9 2f       	mov	r30, r25
     c36:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
     c3a:	58 f3       	brcs	.-42     	; 0xc12 <__addsf3+0xc>
     c3c:	ba 17       	cp	r27, r26
     c3e:	62 07       	cpc	r22, r18
     c40:	73 07       	cpc	r23, r19
     c42:	84 07       	cpc	r24, r20
     c44:	95 07       	cpc	r25, r21
     c46:	20 f0       	brcs	.+8      	; 0xc50 <__addsf3x+0x1c>
     c48:	79 f4       	brne	.+30     	; 0xc68 <__addsf3x+0x34>
     c4a:	a6 f5       	brtc	.+104    	; 0xcb4 <__addsf3x+0x80>
     c4c:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_zero>
     c50:	0e f4       	brtc	.+2      	; 0xc54 <__addsf3x+0x20>
     c52:	e0 95       	com	r30
     c54:	0b 2e       	mov	r0, r27
     c56:	ba 2f       	mov	r27, r26
     c58:	a0 2d       	mov	r26, r0
     c5a:	0b 01       	movw	r0, r22
     c5c:	b9 01       	movw	r22, r18
     c5e:	90 01       	movw	r18, r0
     c60:	0c 01       	movw	r0, r24
     c62:	ca 01       	movw	r24, r20
     c64:	a0 01       	movw	r20, r0
     c66:	11 24       	eor	r1, r1
     c68:	ff 27       	eor	r31, r31
     c6a:	59 1b       	sub	r21, r25
     c6c:	99 f0       	breq	.+38     	; 0xc94 <__addsf3x+0x60>
     c6e:	59 3f       	cpi	r21, 0xF9	; 249
     c70:	50 f4       	brcc	.+20     	; 0xc86 <__addsf3x+0x52>
     c72:	50 3e       	cpi	r21, 0xE0	; 224
     c74:	68 f1       	brcs	.+90     	; 0xcd0 <__addsf3x+0x9c>
     c76:	1a 16       	cp	r1, r26
     c78:	f0 40       	sbci	r31, 0x00	; 0
     c7a:	a2 2f       	mov	r26, r18
     c7c:	23 2f       	mov	r18, r19
     c7e:	34 2f       	mov	r19, r20
     c80:	44 27       	eor	r20, r20
     c82:	58 5f       	subi	r21, 0xF8	; 248
     c84:	f3 cf       	rjmp	.-26     	; 0xc6c <__addsf3x+0x38>
     c86:	46 95       	lsr	r20
     c88:	37 95       	ror	r19
     c8a:	27 95       	ror	r18
     c8c:	a7 95       	ror	r26
     c8e:	f0 40       	sbci	r31, 0x00	; 0
     c90:	53 95       	inc	r21
     c92:	c9 f7       	brne	.-14     	; 0xc86 <__addsf3x+0x52>
     c94:	7e f4       	brtc	.+30     	; 0xcb4 <__addsf3x+0x80>
     c96:	1f 16       	cp	r1, r31
     c98:	ba 0b       	sbc	r27, r26
     c9a:	62 0b       	sbc	r22, r18
     c9c:	73 0b       	sbc	r23, r19
     c9e:	84 0b       	sbc	r24, r20
     ca0:	ba f0       	brmi	.+46     	; 0xcd0 <__addsf3x+0x9c>
     ca2:	91 50       	subi	r25, 0x01	; 1
     ca4:	a1 f0       	breq	.+40     	; 0xcce <__addsf3x+0x9a>
     ca6:	ff 0f       	add	r31, r31
     ca8:	bb 1f       	adc	r27, r27
     caa:	66 1f       	adc	r22, r22
     cac:	77 1f       	adc	r23, r23
     cae:	88 1f       	adc	r24, r24
     cb0:	c2 f7       	brpl	.-16     	; 0xca2 <__addsf3x+0x6e>
     cb2:	0e c0       	rjmp	.+28     	; 0xcd0 <__addsf3x+0x9c>
     cb4:	ba 0f       	add	r27, r26
     cb6:	62 1f       	adc	r22, r18
     cb8:	73 1f       	adc	r23, r19
     cba:	84 1f       	adc	r24, r20
     cbc:	48 f4       	brcc	.+18     	; 0xcd0 <__addsf3x+0x9c>
     cbe:	87 95       	ror	r24
     cc0:	77 95       	ror	r23
     cc2:	67 95       	ror	r22
     cc4:	b7 95       	ror	r27
     cc6:	f7 95       	ror	r31
     cc8:	9e 3f       	cpi	r25, 0xFE	; 254
     cca:	08 f0       	brcs	.+2      	; 0xcce <__addsf3x+0x9a>
     ccc:	b0 cf       	rjmp	.-160    	; 0xc2e <__addsf3+0x28>
     cce:	93 95       	inc	r25
     cd0:	88 0f       	add	r24, r24
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <__addsf3x+0xa2>
     cd4:	99 27       	eor	r25, r25
     cd6:	ee 0f       	add	r30, r30
     cd8:	97 95       	ror	r25
     cda:	87 95       	ror	r24
     cdc:	08 95       	ret

00000cde <__cmpsf2>:
     cde:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_cmp>
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__cmpsf2+0x8>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	08 95       	ret

00000ce8 <__divsf3>:
     ce8:	0e 94 88 06 	call	0xd10	; 0xd10 <__divsf3x>
     cec:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_round>
     cf0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscB>
     cf4:	58 f0       	brcs	.+22     	; 0xd0c <__divsf3+0x24>
     cf6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscA>
     cfa:	40 f0       	brcs	.+16     	; 0xd0c <__divsf3+0x24>
     cfc:	29 f4       	brne	.+10     	; 0xd08 <__divsf3+0x20>
     cfe:	5f 3f       	cpi	r21, 0xFF	; 255
     d00:	29 f0       	breq	.+10     	; 0xd0c <__divsf3+0x24>
     d02:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
     d06:	51 11       	cpse	r21, r1
     d08:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>
     d0c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_nan>

00000d10 <__divsf3x>:
     d10:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
     d14:	68 f3       	brcs	.-38     	; 0xcf0 <__divsf3+0x8>

00000d16 <__divsf3_pse>:
     d16:	99 23       	and	r25, r25
     d18:	b1 f3       	breq	.-20     	; 0xd06 <__divsf3+0x1e>
     d1a:	55 23       	and	r21, r21
     d1c:	91 f3       	breq	.-28     	; 0xd02 <__divsf3+0x1a>
     d1e:	95 1b       	sub	r25, r21
     d20:	55 0b       	sbc	r21, r21
     d22:	bb 27       	eor	r27, r27
     d24:	aa 27       	eor	r26, r26
     d26:	62 17       	cp	r22, r18
     d28:	73 07       	cpc	r23, r19
     d2a:	84 07       	cpc	r24, r20
     d2c:	38 f0       	brcs	.+14     	; 0xd3c <__divsf3_pse+0x26>
     d2e:	9f 5f       	subi	r25, 0xFF	; 255
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	22 0f       	add	r18, r18
     d34:	33 1f       	adc	r19, r19
     d36:	44 1f       	adc	r20, r20
     d38:	aa 1f       	adc	r26, r26
     d3a:	a9 f3       	breq	.-22     	; 0xd26 <__divsf3_pse+0x10>
     d3c:	35 d0       	rcall	.+106    	; 0xda8 <__divsf3_pse+0x92>
     d3e:	0e 2e       	mov	r0, r30
     d40:	3a f0       	brmi	.+14     	; 0xd50 <__divsf3_pse+0x3a>
     d42:	e0 e8       	ldi	r30, 0x80	; 128
     d44:	32 d0       	rcall	.+100    	; 0xdaa <__divsf3_pse+0x94>
     d46:	91 50       	subi	r25, 0x01	; 1
     d48:	50 40       	sbci	r21, 0x00	; 0
     d4a:	e6 95       	lsr	r30
     d4c:	00 1c       	adc	r0, r0
     d4e:	ca f7       	brpl	.-14     	; 0xd42 <__divsf3_pse+0x2c>
     d50:	2b d0       	rcall	.+86     	; 0xda8 <__divsf3_pse+0x92>
     d52:	fe 2f       	mov	r31, r30
     d54:	29 d0       	rcall	.+82     	; 0xda8 <__divsf3_pse+0x92>
     d56:	66 0f       	add	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	bb 1f       	adc	r27, r27
     d5e:	26 17       	cp	r18, r22
     d60:	37 07       	cpc	r19, r23
     d62:	48 07       	cpc	r20, r24
     d64:	ab 07       	cpc	r26, r27
     d66:	b0 e8       	ldi	r27, 0x80	; 128
     d68:	09 f0       	breq	.+2      	; 0xd6c <__divsf3_pse+0x56>
     d6a:	bb 0b       	sbc	r27, r27
     d6c:	80 2d       	mov	r24, r0
     d6e:	bf 01       	movw	r22, r30
     d70:	ff 27       	eor	r31, r31
     d72:	93 58       	subi	r25, 0x83	; 131
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	3a f0       	brmi	.+14     	; 0xd86 <__divsf3_pse+0x70>
     d78:	9e 3f       	cpi	r25, 0xFE	; 254
     d7a:	51 05       	cpc	r21, r1
     d7c:	78 f0       	brcs	.+30     	; 0xd9c <__divsf3_pse+0x86>
     d7e:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
     d82:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>
     d86:	5f 3f       	cpi	r21, 0xFF	; 255
     d88:	e4 f3       	brlt	.-8      	; 0xd82 <__divsf3_pse+0x6c>
     d8a:	98 3e       	cpi	r25, 0xE8	; 232
     d8c:	d4 f3       	brlt	.-12     	; 0xd82 <__divsf3_pse+0x6c>
     d8e:	86 95       	lsr	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	b7 95       	ror	r27
     d96:	f7 95       	ror	r31
     d98:	9f 5f       	subi	r25, 0xFF	; 255
     d9a:	c9 f7       	brne	.-14     	; 0xd8e <__divsf3_pse+0x78>
     d9c:	88 0f       	add	r24, r24
     d9e:	91 1d       	adc	r25, r1
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	97 f9       	bld	r25, 7
     da6:	08 95       	ret
     da8:	e1 e0       	ldi	r30, 0x01	; 1
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	bb 1f       	adc	r27, r27
     db2:	62 17       	cp	r22, r18
     db4:	73 07       	cpc	r23, r19
     db6:	84 07       	cpc	r24, r20
     db8:	ba 07       	cpc	r27, r26
     dba:	20 f0       	brcs	.+8      	; 0xdc4 <__divsf3_pse+0xae>
     dbc:	62 1b       	sub	r22, r18
     dbe:	73 0b       	sbc	r23, r19
     dc0:	84 0b       	sbc	r24, r20
     dc2:	ba 0b       	sbc	r27, r26
     dc4:	ee 1f       	adc	r30, r30
     dc6:	88 f7       	brcc	.-30     	; 0xdaa <__divsf3_pse+0x94>
     dc8:	e0 95       	com	r30
     dca:	08 95       	ret

00000dcc <__fixunssfsi>:
     dcc:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_splitA>
     dd0:	88 f0       	brcs	.+34     	; 0xdf4 <__fixunssfsi+0x28>
     dd2:	9f 57       	subi	r25, 0x7F	; 127
     dd4:	98 f0       	brcs	.+38     	; 0xdfc <__fixunssfsi+0x30>
     dd6:	b9 2f       	mov	r27, r25
     dd8:	99 27       	eor	r25, r25
     dda:	b7 51       	subi	r27, 0x17	; 23
     ddc:	b0 f0       	brcs	.+44     	; 0xe0a <__fixunssfsi+0x3e>
     dde:	e1 f0       	breq	.+56     	; 0xe18 <__fixunssfsi+0x4c>
     de0:	66 0f       	add	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	88 1f       	adc	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	1a f0       	brmi	.+6      	; 0xdf0 <__fixunssfsi+0x24>
     dea:	ba 95       	dec	r27
     dec:	c9 f7       	brne	.-14     	; 0xde0 <__fixunssfsi+0x14>
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <__fixunssfsi+0x4c>
     df0:	b1 30       	cpi	r27, 0x01	; 1
     df2:	91 f0       	breq	.+36     	; 0xe18 <__fixunssfsi+0x4c>
     df4:	0e 94 22 08 	call	0x1044	; 0x1044 <__fp_zero>
     df8:	b1 e0       	ldi	r27, 0x01	; 1
     dfa:	08 95       	ret
     dfc:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_zero>
     e00:	67 2f       	mov	r22, r23
     e02:	78 2f       	mov	r23, r24
     e04:	88 27       	eor	r24, r24
     e06:	b8 5f       	subi	r27, 0xF8	; 248
     e08:	39 f0       	breq	.+14     	; 0xe18 <__fixunssfsi+0x4c>
     e0a:	b9 3f       	cpi	r27, 0xF9	; 249
     e0c:	cc f3       	brlt	.-14     	; 0xe00 <__fixunssfsi+0x34>
     e0e:	86 95       	lsr	r24
     e10:	77 95       	ror	r23
     e12:	67 95       	ror	r22
     e14:	b3 95       	inc	r27
     e16:	d9 f7       	brne	.-10     	; 0xe0e <__fixunssfsi+0x42>
     e18:	3e f4       	brtc	.+14     	; 0xe28 <__fixunssfsi+0x5c>
     e1a:	90 95       	com	r25
     e1c:	80 95       	com	r24
     e1e:	70 95       	com	r23
     e20:	61 95       	neg	r22
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	8f 4f       	sbci	r24, 0xFF	; 255
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	08 95       	ret

00000e2a <__floatunsisf>:
     e2a:	e8 94       	clt
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <__floatsisf+0x12>

00000e2e <__floatsisf>:
     e2e:	97 fb       	bst	r25, 7
     e30:	3e f4       	brtc	.+14     	; 0xe40 <__floatsisf+0x12>
     e32:	90 95       	com	r25
     e34:	80 95       	com	r24
     e36:	70 95       	com	r23
     e38:	61 95       	neg	r22
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	8f 4f       	sbci	r24, 0xFF	; 255
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	99 23       	and	r25, r25
     e42:	a9 f0       	breq	.+42     	; 0xe6e <__floatsisf+0x40>
     e44:	f9 2f       	mov	r31, r25
     e46:	96 e9       	ldi	r25, 0x96	; 150
     e48:	bb 27       	eor	r27, r27
     e4a:	93 95       	inc	r25
     e4c:	f6 95       	lsr	r31
     e4e:	87 95       	ror	r24
     e50:	77 95       	ror	r23
     e52:	67 95       	ror	r22
     e54:	b7 95       	ror	r27
     e56:	f1 11       	cpse	r31, r1
     e58:	f8 cf       	rjmp	.-16     	; 0xe4a <__floatsisf+0x1c>
     e5a:	fa f4       	brpl	.+62     	; 0xe9a <__floatsisf+0x6c>
     e5c:	bb 0f       	add	r27, r27
     e5e:	11 f4       	brne	.+4      	; 0xe64 <__floatsisf+0x36>
     e60:	60 ff       	sbrs	r22, 0
     e62:	1b c0       	rjmp	.+54     	; 0xe9a <__floatsisf+0x6c>
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	16 c0       	rjmp	.+44     	; 0xe9a <__floatsisf+0x6c>
     e6e:	88 23       	and	r24, r24
     e70:	11 f0       	breq	.+4      	; 0xe76 <__floatsisf+0x48>
     e72:	96 e9       	ldi	r25, 0x96	; 150
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <__floatsisf+0x6a>
     e76:	77 23       	and	r23, r23
     e78:	21 f0       	breq	.+8      	; 0xe82 <__floatsisf+0x54>
     e7a:	9e e8       	ldi	r25, 0x8E	; 142
     e7c:	87 2f       	mov	r24, r23
     e7e:	76 2f       	mov	r23, r22
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <__floatsisf+0x5e>
     e82:	66 23       	and	r22, r22
     e84:	71 f0       	breq	.+28     	; 0xea2 <__floatsisf+0x74>
     e86:	96 e8       	ldi	r25, 0x86	; 134
     e88:	86 2f       	mov	r24, r22
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	2a f0       	brmi	.+10     	; 0xe9a <__floatsisf+0x6c>
     e90:	9a 95       	dec	r25
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	88 1f       	adc	r24, r24
     e98:	da f7       	brpl	.-10     	; 0xe90 <__floatsisf+0x62>
     e9a:	88 0f       	add	r24, r24
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	97 f9       	bld	r25, 7
     ea2:	08 95       	ret
     ea4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscA>
     ea8:	20 f0       	brcs	.+8      	; 0xeb2 <__floatsisf+0x84>
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <__floatsisf+0x84>
     eac:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscB>
     eb0:	50 f4       	brcc	.+20     	; 0xec6 <fmod+0xc>
     eb2:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_nan>
     eb6:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>

00000eba <fmod>:
     eba:	e9 2f       	mov	r30, r25
     ebc:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
     ec0:	88 f3       	brcs	.-30     	; 0xea4 <__floatsisf+0x76>
     ec2:	55 23       	and	r21, r21
     ec4:	b1 f3       	breq	.-20     	; 0xeb2 <__floatsisf+0x84>
     ec6:	e7 fb       	bst	r30, 7
     ec8:	62 17       	cp	r22, r18
     eca:	73 07       	cpc	r23, r19
     ecc:	84 07       	cpc	r24, r20
     ece:	95 07       	cpc	r25, r21
     ed0:	a8 f1       	brcs	.+106    	; 0xf3c <fmod+0x82>
     ed2:	89 f3       	breq	.-30     	; 0xeb6 <__floatsisf+0x88>
     ed4:	e9 2f       	mov	r30, r25
     ed6:	ff 27       	eor	r31, r31
     ed8:	88 23       	and	r24, r24
     eda:	2a f0       	brmi	.+10     	; 0xee6 <fmod+0x2c>
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	66 0f       	add	r22, r22
     ee0:	77 1f       	adc	r23, r23
     ee2:	88 1f       	adc	r24, r24
     ee4:	da f7       	brpl	.-10     	; 0xedc <fmod+0x22>
     ee6:	95 2f       	mov	r25, r21
     ee8:	55 27       	eor	r21, r21
     eea:	44 23       	and	r20, r20
     eec:	32 f0       	brmi	.+12     	; 0xefa <fmod+0x40>
     eee:	91 50       	subi	r25, 0x01	; 1
     ef0:	50 40       	sbci	r21, 0x00	; 0
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	44 1f       	adc	r20, r20
     ef8:	d2 f7       	brpl	.-12     	; 0xeee <fmod+0x34>
     efa:	bb 27       	eor	r27, r27
     efc:	e9 1b       	sub	r30, r25
     efe:	f5 0b       	sbc	r31, r21
     f00:	62 1b       	sub	r22, r18
     f02:	73 0b       	sbc	r23, r19
     f04:	84 0b       	sbc	r24, r20
     f06:	b1 09       	sbc	r27, r1
     f08:	b1 f2       	breq	.-84     	; 0xeb6 <__floatsisf+0x88>
     f0a:	22 f4       	brpl	.+8      	; 0xf14 <fmod+0x5a>
     f0c:	62 0f       	add	r22, r18
     f0e:	73 1f       	adc	r23, r19
     f10:	84 1f       	adc	r24, r20
     f12:	b1 1d       	adc	r27, r1
     f14:	31 97       	sbiw	r30, 0x01	; 1
     f16:	2a f0       	brmi	.+10     	; 0xf22 <fmod+0x68>
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	bb 1f       	adc	r27, r27
     f20:	ef cf       	rjmp	.-34     	; 0xf00 <fmod+0x46>
     f22:	91 50       	subi	r25, 0x01	; 1
     f24:	50 40       	sbci	r21, 0x00	; 0
     f26:	62 f0       	brmi	.+24     	; 0xf40 <fmod+0x86>
     f28:	41 f0       	breq	.+16     	; 0xf3a <fmod+0x80>
     f2a:	88 23       	and	r24, r24
     f2c:	32 f0       	brmi	.+12     	; 0xf3a <fmod+0x80>
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	91 50       	subi	r25, 0x01	; 1
     f36:	50 40       	sbci	r21, 0x00	; 0
     f38:	c1 f7       	brne	.-16     	; 0xf2a <fmod+0x70>
     f3a:	93 95       	inc	r25
     f3c:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_mpack>
     f40:	86 95       	lsr	r24
     f42:	77 95       	ror	r23
     f44:	67 95       	ror	r22
     f46:	9f 5f       	subi	r25, 0xFF	; 255
     f48:	d9 f7       	brne	.-10     	; 0xf40 <fmod+0x86>
     f4a:	f7 cf       	rjmp	.-18     	; 0xf3a <fmod+0x80>

00000f4c <__fp_cmp>:
     f4c:	99 0f       	add	r25, r25
     f4e:	00 08       	sbc	r0, r0
     f50:	55 0f       	add	r21, r21
     f52:	aa 0b       	sbc	r26, r26
     f54:	e0 e8       	ldi	r30, 0x80	; 128
     f56:	fe ef       	ldi	r31, 0xFE	; 254
     f58:	16 16       	cp	r1, r22
     f5a:	17 06       	cpc	r1, r23
     f5c:	e8 07       	cpc	r30, r24
     f5e:	f9 07       	cpc	r31, r25
     f60:	c0 f0       	brcs	.+48     	; 0xf92 <__fp_cmp+0x46>
     f62:	12 16       	cp	r1, r18
     f64:	13 06       	cpc	r1, r19
     f66:	e4 07       	cpc	r30, r20
     f68:	f5 07       	cpc	r31, r21
     f6a:	98 f0       	brcs	.+38     	; 0xf92 <__fp_cmp+0x46>
     f6c:	62 1b       	sub	r22, r18
     f6e:	73 0b       	sbc	r23, r19
     f70:	84 0b       	sbc	r24, r20
     f72:	95 0b       	sbc	r25, r21
     f74:	39 f4       	brne	.+14     	; 0xf84 <__fp_cmp+0x38>
     f76:	0a 26       	eor	r0, r26
     f78:	61 f0       	breq	.+24     	; 0xf92 <__fp_cmp+0x46>
     f7a:	23 2b       	or	r18, r19
     f7c:	24 2b       	or	r18, r20
     f7e:	25 2b       	or	r18, r21
     f80:	21 f4       	brne	.+8      	; 0xf8a <__fp_cmp+0x3e>
     f82:	08 95       	ret
     f84:	0a 26       	eor	r0, r26
     f86:	09 f4       	brne	.+2      	; 0xf8a <__fp_cmp+0x3e>
     f88:	a1 40       	sbci	r26, 0x01	; 1
     f8a:	a6 95       	lsr	r26
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	81 1d       	adc	r24, r1
     f90:	81 1d       	adc	r24, r1
     f92:	08 95       	ret

00000f94 <__fp_inf>:
     f94:	97 f9       	bld	r25, 7
     f96:	9f 67       	ori	r25, 0x7F	; 127
     f98:	80 e8       	ldi	r24, 0x80	; 128
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <__fp_mpack>:
     fa0:	9f 3f       	cpi	r25, 0xFF	; 255
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <__fp_mpack_finite+0xc>

00000fa4 <__fp_mpack_finite>:
     fa4:	91 50       	subi	r25, 0x01	; 1
     fa6:	20 f4       	brcc	.+8      	; 0xfb0 <__fp_mpack_finite+0xc>
     fa8:	87 95       	ror	r24
     faa:	77 95       	ror	r23
     fac:	67 95       	ror	r22
     fae:	b7 95       	ror	r27
     fb0:	88 0f       	add	r24, r24
     fb2:	91 1d       	adc	r25, r1
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__fp_nan>:
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	80 ec       	ldi	r24, 0xC0	; 192
     fc0:	08 95       	ret

00000fc2 <__fp_pscA>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	16 16       	cp	r1, r22
     fc8:	17 06       	cpc	r1, r23
     fca:	18 06       	cpc	r1, r24
     fcc:	09 06       	cpc	r0, r25
     fce:	08 95       	ret

00000fd0 <__fp_pscB>:
     fd0:	00 24       	eor	r0, r0
     fd2:	0a 94       	dec	r0
     fd4:	12 16       	cp	r1, r18
     fd6:	13 06       	cpc	r1, r19
     fd8:	14 06       	cpc	r1, r20
     fda:	05 06       	cpc	r0, r21
     fdc:	08 95       	ret

00000fde <__fp_round>:
     fde:	09 2e       	mov	r0, r25
     fe0:	03 94       	inc	r0
     fe2:	00 0c       	add	r0, r0
     fe4:	11 f4       	brne	.+4      	; 0xfea <__fp_round+0xc>
     fe6:	88 23       	and	r24, r24
     fe8:	52 f0       	brmi	.+20     	; 0xffe <__fp_round+0x20>
     fea:	bb 0f       	add	r27, r27
     fec:	40 f4       	brcc	.+16     	; 0xffe <__fp_round+0x20>
     fee:	bf 2b       	or	r27, r31
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__fp_round+0x18>
     ff2:	60 ff       	sbrs	r22, 0
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <__fp_round+0x20>
     ff6:	6f 5f       	subi	r22, 0xFF	; 255
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__fp_split3>:
    1000:	57 fd       	sbrc	r21, 7
    1002:	90 58       	subi	r25, 0x80	; 128
    1004:	44 0f       	add	r20, r20
    1006:	55 1f       	adc	r21, r21
    1008:	59 f0       	breq	.+22     	; 0x1020 <__fp_splitA+0x10>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	71 f0       	breq	.+28     	; 0x102a <__fp_splitA+0x1a>
    100e:	47 95       	ror	r20

00001010 <__fp_splitA>:
    1010:	88 0f       	add	r24, r24
    1012:	97 fb       	bst	r25, 7
    1014:	99 1f       	adc	r25, r25
    1016:	61 f0       	breq	.+24     	; 0x1030 <__fp_splitA+0x20>
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	79 f0       	breq	.+30     	; 0x103a <__fp_splitA+0x2a>
    101c:	87 95       	ror	r24
    101e:	08 95       	ret
    1020:	12 16       	cp	r1, r18
    1022:	13 06       	cpc	r1, r19
    1024:	14 06       	cpc	r1, r20
    1026:	55 1f       	adc	r21, r21
    1028:	f2 cf       	rjmp	.-28     	; 0x100e <__fp_split3+0xe>
    102a:	46 95       	lsr	r20
    102c:	f1 df       	rcall	.-30     	; 0x1010 <__fp_splitA>
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <__fp_splitA+0x30>
    1030:	16 16       	cp	r1, r22
    1032:	17 06       	cpc	r1, r23
    1034:	18 06       	cpc	r1, r24
    1036:	99 1f       	adc	r25, r25
    1038:	f1 cf       	rjmp	.-30     	; 0x101c <__fp_splitA+0xc>
    103a:	86 95       	lsr	r24
    103c:	71 05       	cpc	r23, r1
    103e:	61 05       	cpc	r22, r1
    1040:	08 94       	sec
    1042:	08 95       	ret

00001044 <__fp_zero>:
    1044:	e8 94       	clt

00001046 <__fp_szero>:
    1046:	bb 27       	eor	r27, r27
    1048:	66 27       	eor	r22, r22
    104a:	77 27       	eor	r23, r23
    104c:	cb 01       	movw	r24, r22
    104e:	97 f9       	bld	r25, 7
    1050:	08 95       	ret

00001052 <__gesf2>:
    1052:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_cmp>
    1056:	08 f4       	brcc	.+2      	; 0x105a <__gesf2+0x8>
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	08 95       	ret

0000105c <__mulsf3>:
    105c:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsf3x>
    1060:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_round>
    1064:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscA>
    1068:	38 f0       	brcs	.+14     	; 0x1078 <__mulsf3+0x1c>
    106a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscB>
    106e:	20 f0       	brcs	.+8      	; 0x1078 <__mulsf3+0x1c>
    1070:	95 23       	and	r25, r21
    1072:	11 f0       	breq	.+4      	; 0x1078 <__mulsf3+0x1c>
    1074:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
    1078:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_nan>
    107c:	11 24       	eor	r1, r1
    107e:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>

00001082 <__mulsf3x>:
    1082:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
    1086:	70 f3       	brcs	.-36     	; 0x1064 <__mulsf3+0x8>

00001088 <__mulsf3_pse>:
    1088:	95 9f       	mul	r25, r21
    108a:	c1 f3       	breq	.-16     	; 0x107c <__mulsf3+0x20>
    108c:	95 0f       	add	r25, r21
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	55 1f       	adc	r21, r21
    1092:	62 9f       	mul	r22, r18
    1094:	f0 01       	movw	r30, r0
    1096:	72 9f       	mul	r23, r18
    1098:	bb 27       	eor	r27, r27
    109a:	f0 0d       	add	r31, r0
    109c:	b1 1d       	adc	r27, r1
    109e:	63 9f       	mul	r22, r19
    10a0:	aa 27       	eor	r26, r26
    10a2:	f0 0d       	add	r31, r0
    10a4:	b1 1d       	adc	r27, r1
    10a6:	aa 1f       	adc	r26, r26
    10a8:	64 9f       	mul	r22, r20
    10aa:	66 27       	eor	r22, r22
    10ac:	b0 0d       	add	r27, r0
    10ae:	a1 1d       	adc	r26, r1
    10b0:	66 1f       	adc	r22, r22
    10b2:	82 9f       	mul	r24, r18
    10b4:	22 27       	eor	r18, r18
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	62 1f       	adc	r22, r18
    10bc:	73 9f       	mul	r23, r19
    10be:	b0 0d       	add	r27, r0
    10c0:	a1 1d       	adc	r26, r1
    10c2:	62 1f       	adc	r22, r18
    10c4:	83 9f       	mul	r24, r19
    10c6:	a0 0d       	add	r26, r0
    10c8:	61 1d       	adc	r22, r1
    10ca:	22 1f       	adc	r18, r18
    10cc:	74 9f       	mul	r23, r20
    10ce:	33 27       	eor	r19, r19
    10d0:	a0 0d       	add	r26, r0
    10d2:	61 1d       	adc	r22, r1
    10d4:	23 1f       	adc	r18, r19
    10d6:	84 9f       	mul	r24, r20
    10d8:	60 0d       	add	r22, r0
    10da:	21 1d       	adc	r18, r1
    10dc:	82 2f       	mov	r24, r18
    10de:	76 2f       	mov	r23, r22
    10e0:	6a 2f       	mov	r22, r26
    10e2:	11 24       	eor	r1, r1
    10e4:	9f 57       	subi	r25, 0x7F	; 127
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	9a f0       	brmi	.+38     	; 0x1110 <__mulsf3_pse+0x88>
    10ea:	f1 f0       	breq	.+60     	; 0x1128 <__mulsf3_pse+0xa0>
    10ec:	88 23       	and	r24, r24
    10ee:	4a f0       	brmi	.+18     	; 0x1102 <__mulsf3_pse+0x7a>
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	bb 1f       	adc	r27, r27
    10f6:	66 1f       	adc	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	91 50       	subi	r25, 0x01	; 1
    10fe:	50 40       	sbci	r21, 0x00	; 0
    1100:	a9 f7       	brne	.-22     	; 0x10ec <__mulsf3_pse+0x64>
    1102:	9e 3f       	cpi	r25, 0xFE	; 254
    1104:	51 05       	cpc	r21, r1
    1106:	80 f0       	brcs	.+32     	; 0x1128 <__mulsf3_pse+0xa0>
    1108:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
    110c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	e4 f3       	brlt	.-8      	; 0x110c <__mulsf3_pse+0x84>
    1114:	98 3e       	cpi	r25, 0xE8	; 232
    1116:	d4 f3       	brlt	.-12     	; 0x110c <__mulsf3_pse+0x84>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b7 95       	ror	r27
    1120:	f7 95       	ror	r31
    1122:	e7 95       	ror	r30
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	c1 f7       	brne	.-16     	; 0x1118 <__mulsf3_pse+0x90>
    1128:	fe 2b       	or	r31, r30
    112a:	88 0f       	add	r24, r24
    112c:	91 1d       	adc	r25, r1
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <round>:
    1136:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_splitA>
    113a:	e8 f0       	brcs	.+58     	; 0x1176 <round+0x40>
    113c:	9e 37       	cpi	r25, 0x7E	; 126
    113e:	e8 f0       	brcs	.+58     	; 0x117a <round+0x44>
    1140:	96 39       	cpi	r25, 0x96	; 150
    1142:	b8 f4       	brcc	.+46     	; 0x1172 <round+0x3c>
    1144:	9e 38       	cpi	r25, 0x8E	; 142
    1146:	48 f4       	brcc	.+18     	; 0x115a <round+0x24>
    1148:	67 2f       	mov	r22, r23
    114a:	78 2f       	mov	r23, r24
    114c:	88 27       	eor	r24, r24
    114e:	98 5f       	subi	r25, 0xF8	; 248
    1150:	f9 cf       	rjmp	.-14     	; 0x1144 <round+0xe>
    1152:	86 95       	lsr	r24
    1154:	77 95       	ror	r23
    1156:	67 95       	ror	r22
    1158:	93 95       	inc	r25
    115a:	95 39       	cpi	r25, 0x95	; 149
    115c:	d0 f3       	brcs	.-12     	; 0x1152 <round+0x1c>
    115e:	b6 2f       	mov	r27, r22
    1160:	b1 70       	andi	r27, 0x01	; 1
    1162:	6b 0f       	add	r22, r27
    1164:	71 1d       	adc	r23, r1
    1166:	81 1d       	adc	r24, r1
    1168:	20 f4       	brcc	.+8      	; 0x1172 <round+0x3c>
    116a:	87 95       	ror	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	93 95       	inc	r25
    1172:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_mintl>
    1176:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_mpack>
    117a:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>

0000117e <__fp_mintl>:
    117e:	88 23       	and	r24, r24
    1180:	71 f4       	brne	.+28     	; 0x119e <__fp_mintl+0x20>
    1182:	77 23       	and	r23, r23
    1184:	21 f0       	breq	.+8      	; 0x118e <__fp_mintl+0x10>
    1186:	98 50       	subi	r25, 0x08	; 8
    1188:	87 2b       	or	r24, r23
    118a:	76 2f       	mov	r23, r22
    118c:	07 c0       	rjmp	.+14     	; 0x119c <__fp_mintl+0x1e>
    118e:	66 23       	and	r22, r22
    1190:	11 f4       	brne	.+4      	; 0x1196 <__fp_mintl+0x18>
    1192:	99 27       	eor	r25, r25
    1194:	0d c0       	rjmp	.+26     	; 0x11b0 <__fp_mintl+0x32>
    1196:	90 51       	subi	r25, 0x10	; 16
    1198:	86 2b       	or	r24, r22
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	2a f0       	brmi	.+10     	; 0x11aa <__fp_mintl+0x2c>
    11a0:	9a 95       	dec	r25
    11a2:	66 0f       	add	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	88 1f       	adc	r24, r24
    11a8:	da f7       	brpl	.-10     	; 0x11a0 <__fp_mintl+0x22>
    11aa:	88 0f       	add	r24, r24
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	97 f9       	bld	r25, 7
    11b2:	08 95       	ret

000011b4 <__tablejump2__>:
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	05 90       	lpm	r0, Z+
    11ba:	f4 91       	lpm	r31, Z
    11bc:	e0 2d       	mov	r30, r0
    11be:	09 94       	ijmp

000011c0 <_exit>:
    11c0:	f8 94       	cli

000011c2 <__stop_program>:
    11c2:	ff cf       	rjmp	.-2      	; 0x11c2 <__stop_program>
