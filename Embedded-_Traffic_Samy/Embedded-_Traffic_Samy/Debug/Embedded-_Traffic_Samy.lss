
Embedded-_Traffic_Samy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000012be  00001352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  0080006e  0080006e  00001360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019de  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a66  00000000  00000000  00002f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a2  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085d  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d1  00000000  00000000  00005881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006e52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	ac 04       	cpc	r10, r12
      56:	a9 04       	cpc	r10, r9
      58:	10 05       	cpc	r17, r0
      5a:	01 05       	cpc	r16, r1
      5c:	04 05       	cpc	r16, r4
      5e:	07 05       	cpc	r16, r7
      60:	0a 05       	cpc	r16, r10
      62:	0d 05       	cpc	r16, r13

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee eb       	ldi	r30, 0xBE	; 190
      78:	f2 e1       	ldi	r31, 0x12	; 18
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	ae e6       	ldi	r26, 0x6E	; 110
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	af 39       	cpi	r26, 0x9F	; 159
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
      9a:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <turn_off_all_leds>:
	}
}

void turn_off_all_leds() // function to turn off every thing
{
LED_blink_stop(CAR_YELLOW_LED_PIN,LEDs_PORT);
      a2:	60 e0       	ldi	r22, 0x00	; 0
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_blink_stop>
LED_blink_stop(PERSON_YELLOW_LED_PIN,LEDs_PORT);
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	85 e0       	ldi	r24, 0x05	; 5
      ae:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_blink_stop>
DIO_write_port(LEDs_PORT,OFF_value);
      b2:	60 e0       	ldi	r22, 0x00	; 0
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_port>
      ba:	08 95       	ret

000000bc <app_init>:
 */ 
#include "app.h"



void app_init() {
      bc:	ef 92       	push	r14
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
	/* traffic LED initializations */
	LED_init(CAR_RED_LED_PIN, LEDs_PORT);
      c2:	60 e0       	ldi	r22, 0x00	; 0
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(CAR_GREEN_LED_PIN, LEDs_PORT);
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(CAR_YELLOW_LED_PIN, LEDs_PORT);
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	82 e0       	ldi	r24, 0x02	; 2
      d6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(PERSON_RED_LED_PIN, LEDs_PORT);
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	84 e0       	ldi	r24, 0x04	; 4
      de:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(PERSON_GREEN_LED_PIN, LEDs_PORT);
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	86 e0       	ldi	r24, 0x06	; 6
      e6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	LED_init(PERSON_YELLOW_LED_PIN, LEDs_PORT);
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	85 e0       	ldi	r24, 0x05	; 5
      ee:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	
	/* pedestrian leds initialization */
	LED_init(PEDESTRIAN_LED_PIN,PEDESTRIAN_LED_PORT);
      f2:	61 e0       	ldi	r22, 0x01	; 1
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_init>
	
	/* Global interrupts initialization*/
	sei();
      fa:	78 94       	sei
	external_interrupt_sense_mode(BUTTON_INTERRUPT_NUM,rising_edge);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 6e 03 	call	0x6dc	; 0x6dc <external_interrupt_sense_mode>
	external_interrupt_init(BUTTON_INTERRUPT_NUM);
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 de 03 	call	0x7bc	; 0x7bc <external_interrupt_init>

	/*timer initialization*/
	timer_init(timer_0,interrupt_disable,pre_1024,TRAFFIC_INTERVAL,millis);
     10a:	ee 24       	eor	r14, r14
     10c:	e3 94       	inc	r14
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	10 e4       	ldi	r17, 0x40	; 64
     112:	2c e9       	ldi	r18, 0x9C	; 156
     114:	35 e4       	ldi	r19, 0x45	; 69
     116:	47 e0       	ldi	r20, 0x07	; 7
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <timer_init>
	timer_init(timer_2,interrupt_enable,pre_1024,Y_B_INTERVAL,millis);
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	2a ef       	ldi	r18, 0xFA	; 250
     126:	33 e4       	ldi	r19, 0x43	; 67
     128:	47 e0       	ldi	r20, 0x07	; 7
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <timer_init>
	
	/*init all variables status*/
	traffic_status_mask = MODE_1_MASK;
     132:	81 e4       	ldi	r24, 0x41	; 65
     134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
	stop_timer_0_flag = 0;
     138:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
	pedstrain_press_flag = 0;
     13c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
	pedstrain_mode_flag = 0;
     140:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <pedstrain_mode_flag>
	in_delay_flag = 0;
     144:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
	turn_off_all_leds();
     148:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
}
     14c:	1f 91       	pop	r17
     14e:	0f 91       	pop	r16
     150:	ef 90       	pop	r14
     152:	08 95       	ret

00000154 <traffic_mode_1_CR_PG>:
}

void traffic_mode_1_CR_PG()
{	
	/* check whether to execute this function or exit depending on the current mask*/
	if(traffic_status_mask != MODE_1_MASK)
     154:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     158:	81 34       	cpi	r24, 0x41	; 65
     15a:	11 f5       	brne	.+68     	; 0x1a0 <traffic_mode_1_CR_PG+0x4c>
		return;
	}
	else
	{
		
		turn_off_all_leds();//erase last mode condition
     15c:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_RED_LED_PIN,LEDs_PORT);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_on(PERSON_GREEN_LED_PIN,LEDs_PORT);
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	86 e0       	ldi	r24, 0x06	; 6
     16c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>

		in_delay_flag = 1; // flag that let the ISR0 that code is in loop now
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0(); //do busy wait holding current led status
     176:	0e 94 bd 05 	call	0xb7a	; 0xb7a <blocking_delay_0>
		in_delay_flag = 0;
     17a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
		
		/*this condition will be true if pedestrian is pressed in the last delay*/
		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     17e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	51 f4       	brne	.+20     	; 0x19a <traffic_mode_1_CR_PG+0x46>
     186:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	31 f4       	brne	.+12     	; 0x19a <traffic_mode_1_CR_PG+0x46>
		{
			//if yes, clear the press_flag and let mode_flag on until we finish a full pedestrian loop
			pedstrain_press_flag = 0;
     18e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_2_MASK; // return to mode_1 as we have a pedestrian want to pass
     192:	82 e8       	ldi	r24, 0x82	; 130
     194:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     198:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_2_MASK;//move to the next logical mode as a normal traffic light
     19a:	82 e8       	ldi	r24, 0x82	; 130
     19c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     1a0:	08 95       	ret

000001a2 <traffic_mode_2_CRY_PGY>:
	}
}

void traffic_mode_2_CRY_PGY()
{
	if(traffic_status_mask != MODE_2_MASK)
     1a2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     1a6:	82 38       	cpi	r24, 0x82	; 130
     1a8:	51 f5       	brne	.+84     	; 0x1fe <traffic_mode_2_CRY_PGY+0x5c>
		return;
	}
	else
	{
		
		turn_off_all_leds();
     1aa:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_RED_LED_PIN,LEDs_PORT);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(CAR_YELLOW_LED_PIN,LEDs_PORT);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		LED_on(PERSON_GREEN_LED_PIN,LEDs_PORT);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(PERSON_YELLOW_LED_PIN,LEDs_PORT);
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	85 e0       	ldi	r24, 0x05	; 5
     1ca:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		
		in_delay_flag = 1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0();
     1d4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <blocking_delay_0>
		in_delay_flag = 0;
     1d8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
		
		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     1dc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	51 f4       	brne	.+20     	; 0x1f8 <traffic_mode_2_CRY_PGY+0x56>
     1e4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	31 f4       	brne	.+12     	; 0x1f8 <traffic_mode_2_CRY_PGY+0x56>
		{
			pedstrain_press_flag =0;
     1ec:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_1_MASK;
     1f0:	81 e4       	ldi	r24, 0x41	; 65
     1f2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     1f6:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_3_MASK;
     1f8:	84 e1       	ldi	r24, 0x14	; 20
     1fa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     1fe:	08 95       	ret

00000200 <traffic_mode_3_CG_PR>:
	}
}

void traffic_mode_3_CG_PR()
{
	if(traffic_status_mask != 0b00010100)
     200:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     204:	84 31       	cpi	r24, 0x14	; 20
     206:	39 f5       	brne	.+78     	; 0x256 <traffic_mode_3_CG_PR+0x56>
		return;
	}
	else
	{
		
		turn_off_all_leds();
     208:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_GREEN_LED_PIN,LEDs_PORT);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_on(PERSON_RED_LED_PIN,LEDs_PORT);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	84 e0       	ldi	r24, 0x04	; 4
     218:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		
		/*reaching mode 3 means the pedestrian loop is finished, so clear pedestrian_mode_flag*/
		pedstrain_mode_flag = 0;
     21c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <pedstrain_mode_flag>
		PORTB &=~ (1<<0);
     220:	88 b3       	in	r24, 0x18	; 24
     222:	8e 7f       	andi	r24, 0xFE	; 254
     224:	88 bb       	out	0x18, r24	; 24
		
		in_delay_flag = 1;
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0();
     22c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <blocking_delay_0>
		in_delay_flag = 0;
     230:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>
		
		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     234:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	51 f4       	brne	.+20     	; 0x250 <traffic_mode_3_CG_PR+0x50>
     23c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	31 f4       	brne	.+12     	; 0x250 <traffic_mode_3_CG_PR+0x50>
		{
			pedstrain_press_flag =0;
     244:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_4_MASK;
     248:	88 e2       	ldi	r24, 0x28	; 40
     24a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     24e:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_4_MASK;
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     256:	08 95       	ret

00000258 <traffic_mode_4_CGY_PRY>:
	}
}

void traffic_mode_4_CGY_PRY()
{
	if(traffic_status_mask != MODE_4_MASK)
     258:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     25c:	88 32       	cpi	r24, 0x28	; 40
     25e:	51 f5       	brne	.+84     	; 0x2b4 <traffic_mode_4_CGY_PRY+0x5c>
		return;
	}
	else
	{
		
		turn_off_all_leds();
     260:	0e 94 51 00 	call	0xa2	; 0xa2 <turn_off_all_leds>
		LED_on(CAR_GREEN_LED_PIN,LEDs_PORT);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(CAR_YELLOW_LED_PIN,LEDs_PORT);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		LED_on(PERSON_RED_LED_PIN,LEDs_PORT);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LED_on>
		LED_blink_start(PERSON_YELLOW_LED_PIN,LEDs_PORT);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	85 e0       	ldi	r24, 0x05	; 5
     280:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_blink_start>
		
		in_delay_flag = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <in_delay_flag>
		blocking_delay_0();
     28a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <blocking_delay_0>
		in_delay_flag = 0;
     28e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <in_delay_flag>

		if (pedstrain_press_flag ==1 && pedstrain_mode_flag == 1)
     292:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pedstrain_press_flag>
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	51 f4       	brne	.+20     	; 0x2ae <traffic_mode_4_CGY_PRY+0x56>
     29a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	31 f4       	brne	.+12     	; 0x2ae <traffic_mode_4_CGY_PRY+0x56>
		{
			pedstrain_press_flag =0;
     2a2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pedstrain_press_flag>
			traffic_status_mask = MODE_1_MASK;
     2a6:	81 e4       	ldi	r24, 0x41	; 65
     2a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     2ac:	08 95       	ret
		}
		else
		{
			traffic_status_mask = MODE_1_MASK;
     2ae:	81 e4       	ldi	r24, 0x41	; 65
     2b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <traffic_status_mask>
     2b4:	08 95       	ret

000002b6 <app_start>:

void app_start()
{
	while(1) // loop infinite
	{
		traffic_mode_1_CR_PG(); //car_red_led + pedestrian_green_led
     2b6:	0e 94 aa 00 	call	0x154	; 0x154 <traffic_mode_1_CR_PG>
		traffic_mode_2_CRY_PGY();
     2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <traffic_mode_2_CRY_PGY>
		traffic_mode_3_CG_PR();
     2be:	0e 94 00 01 	call	0x200	; 0x200 <traffic_mode_3_CG_PR>
		traffic_mode_4_CGY_PRY();
     2c2:	0e 94 2c 01 	call	0x258	; 0x258 <traffic_mode_4_CGY_PRY>
     2c6:	f7 cf       	rjmp	.-18     	; 0x2b6 <app_start>

000002c8 <__vector_1>:
		}
	}
}

ISR(INT0_vect)//pedestrian button
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	8f 93       	push	r24
	if (!pedstrain_mode_flag && in_delay_flag)//only work if it is not in pedestrian mode and in delay
     2d4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <pedstrain_mode_flag>
     2d8:	81 11       	cpse	r24, r1
     2da:	17 c0       	rjmp	.+46     	; 0x30a <__vector_1+0x42>
     2dc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <in_delay_flag>
     2e0:	88 23       	and	r24, r24
     2e2:	99 f0       	breq	.+38     	; 0x30a <__vector_1+0x42>
	{
		pedstrain_press_flag = 1 ; //raise flags 
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <pedstrain_press_flag>
		pedstrain_mode_flag = 1 ;
     2ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <pedstrain_mode_flag>
		PEDESTRIAN_LED_PORT_REG |= (1<<PEDESTRIAN_LED_PIN);//for debugging, turn on pedestrian mode led 
     2ee:	88 b3       	in	r24, 0x18	; 24
     2f0:	81 60       	ori	r24, 0x01	; 1
     2f2:	88 bb       	out	0x18, r24	; 24
		
		/*raise stop_timer_0_flag to exit any busy wait delay (blocking delay)*/
		if(traffic_status_mask !=MODE_4_MASK && traffic_status_mask !=MODE_1_MASK )
     2f4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     2f8:	88 32       	cpi	r24, 0x28	; 40
     2fa:	39 f0       	breq	.+14     	; 0x30a <__vector_1+0x42>
     2fc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <traffic_status_mask>
     300:	81 34       	cpi	r24, 0x41	; 65
     302:	19 f0       	breq	.+6      	; 0x30a <__vector_1+0x42>
		{
			stop_timer_0_flag =1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		}
	}
}
     30a:	8f 91       	pop	r24
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <__vector_5>:

/*this timer_2 over flow flag used in blink timing for the yellow leds*/
ISR(TIMER2_OVF_vect)
{
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	2f 93       	push	r18
     322:	3f 93       	push	r19
     324:	4f 93       	push	r20
     326:	5f 93       	push	r21
     328:	6f 93       	push	r22
     32a:	7f 93       	push	r23
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
	delay_2.n_overflow_flag++;
     33c:	c1 e9       	ldi	r28, 0x91	; 145
     33e:	d0 e0       	ldi	r29, 0x00	; 0
     340:	6a 85       	ldd	r22, Y+10	; 0x0a
     342:	7b 85       	ldd	r23, Y+11	; 0x0b
     344:	8c 85       	ldd	r24, Y+12	; 0x0c
     346:	9d 85       	ldd	r25, Y+13	; 0x0d
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e8       	ldi	r20, 0x80	; 128
     34e:	5f e3       	ldi	r21, 0x3F	; 63
     350:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     354:	6a 87       	std	Y+10, r22	; 0x0a
     356:	7b 87       	std	Y+11, r23	; 0x0b
     358:	8c 87       	std	Y+12, r24	; 0x0c
     35a:	9d 87       	std	Y+13, r25	; 0x0d
	if (delay_2.n_overflow_flag >= delay_2.n_overflow)
     35c:	6a 85       	ldd	r22, Y+10	; 0x0a
     35e:	7b 85       	ldd	r23, Y+11	; 0x0b
     360:	8c 85       	ldd	r24, Y+12	; 0x0c
     362:	9d 85       	ldd	r25, Y+13	; 0x0d
     364:	2c 81       	ldd	r18, Y+4	; 0x04
     366:	3d 81       	ldd	r19, Y+5	; 0x05
     368:	4e 81       	ldd	r20, Y+6	; 0x06
     36a:	5f 81       	ldd	r21, Y+7	; 0x07
     36c:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     370:	88 23       	and	r24, r24
     372:	64 f0       	brlt	.+24     	; 0x38c <__vector_5+0x76>
	{
		LEDs_PORT_REG ^= (1<<CAR_YELLOW_LED_PIN) ^ (1<<PERSON_YELLOW_LED_PIN);
     374:	9b b3       	in	r25, 0x1b	; 27
     376:	84 e2       	ldi	r24, 0x24	; 36
     378:	89 27       	eor	r24, r25
     37a:	8b bb       	out	0x1b, r24	; 27
		delay_2.n_overflow_flag =0;	
     37c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <delay_2+0xa>
     380:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <delay_2+0xb>
     384:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <delay_2+0xc>
     388:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <delay_2+0xd>
	}
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	bf 91       	pop	r27
     396:	af 91       	pop	r26
     398:	9f 91       	pop	r25
     39a:	8f 91       	pop	r24
     39c:	7f 91       	pop	r23
     39e:	6f 91       	pop	r22
     3a0:	5f 91       	pop	r21
     3a2:	4f 91       	pop	r20
     3a4:	3f 91       	pop	r19
     3a6:	2f 91       	pop	r18
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <LED_init>:
{
	DIO_write(led_pin, led_port, OFF_value);
}
void LED_toggle(uint8_t led_pin, EN_port_name led_port)
{
	DIO_toggle(led_pin, led_port);
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DIO_init>
     3b8:	08 95       	ret

000003ba <LED_on>:
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	0e 94 93 02 	call	0x526	; 0x526 <DIO_write>
     3c0:	08 95       	ret

000003c2 <LED_blink_start>:
}
void LED_blink_start(uint8_t led_pin, EN_port_name led_port)
{
	DIO_write(led_pin, led_port, ON_value);
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	0e 94 93 02 	call	0x526	; 0x526 <DIO_write>
	non_blocking_delay_2(start);
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 29 06 	call	0xc52	; 0xc52 <non_blocking_delay_2>
     3ce:	08 95       	ret

000003d0 <LED_blink_stop>:
}
void LED_blink_stop(uint8_t led_pin, EN_port_name led_port)
{
	DIO_write(led_pin, led_port, OFF_value);
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	0e 94 93 02 	call	0x526	; 0x526 <DIO_write>
	non_blocking_delay_2(stop);	
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 29 06 	call	0xc52	; 0xc52 <non_blocking_delay_2>
     3dc:	08 95       	ret

000003de <main>:
 */ 
#include "Application/app.h"

int main(void)
{
app_init();
     3de:	0e 94 5e 00 	call	0xbc	; 0xbc <app_init>
app_start();
     3e2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <app_start>

}
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	08 95       	ret

000003ec <DIO_init>:
*/
#include "dio.h"

DIO_error_handler DIO_init(uint8_t pin_num, EN_port_name port_name, EN_pin_direction direction)
{
	if (pin_num <0 || pin_num >7)
     3ec:	88 30       	cpi	r24, 0x08	; 8
     3ee:	08 f0       	brcs	.+2      	; 0x3f2 <DIO_init+0x6>
     3f0:	8e c0       	rjmp	.+284    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
	{
		return PIN_NUM_ERROR;
	}
	else
	{	
		switch (port_name)
     3f2:	61 30       	cpi	r22, 0x01	; 1
     3f4:	49 f1       	breq	.+82     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     3f6:	38 f0       	brcs	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3f8:	62 30       	cpi	r22, 0x02	; 2
     3fa:	09 f4       	brne	.+2      	; 0x3fe <DIO_init+0x12>
     3fc:	46 c0       	rjmp	.+140    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     3fe:	63 30       	cpi	r22, 0x03	; 3
     400:	09 f4       	brne	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     402:	64 c0       	rjmp	.+200    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     404:	86 c0       	rjmp	.+268    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
		{
			case A:
				if (direction == OUT_pin)
     406:	41 30       	cpi	r20, 0x01	; 1
     408:	71 f4       	brne	.+28     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
				{
					DDRA |= (1 << pin_num);
     40a:	4a b3       	in	r20, 0x1a	; 26
     40c:	21 e0       	ldi	r18, 0x01	; 1
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	b9 01       	movw	r22, r18
     412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     414:	66 0f       	add	r22, r22
     416:	77 1f       	adc	r23, r23
     418:	8a 95       	dec	r24
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     41c:	cb 01       	movw	r24, r22
     41e:	84 2b       	or	r24, r20
     420:	8a bb       	out	0x1a, r24	; 26
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     422:	80 e0       	ldi	r24, 0x00	; 0
		{
			case A:
				if (direction == OUT_pin)
				{
					DDRA |= (1 << pin_num);
					break;
     424:	08 95       	ret
				}
				else if (direction == IN_pin)
     426:	41 11       	cpse	r20, r1
     428:	76 c0       	rjmp	.+236    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
				{
					DDRA &=~ (1 << pin_num);
     42a:	4a b3       	in	r20, 0x1a	; 26
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	b9 01       	movw	r22, r18
     432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     434:	66 0f       	add	r22, r22
     436:	77 1f       	adc	r23, r23
     438:	8a 95       	dec	r24
     43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     43c:	cb 01       	movw	r24, r22
     43e:	80 95       	com	r24
     440:	84 23       	and	r24, r20
     442:	8a bb       	out	0x1a, r24	; 26
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     444:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				else if (direction == IN_pin)
				{
					DDRA &=~ (1 << pin_num);
					break;
     446:	08 95       	ret
				{
					return VALUE_ERROR;
				}

			case B:
				if (direction == OUT_pin)
     448:	41 30       	cpi	r20, 0x01	; 1
     44a:	71 f4       	brne	.+28     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				{
					DDRB |= (1 << pin_num);
     44c:	47 b3       	in	r20, 0x17	; 23
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	b9 01       	movw	r22, r18
     454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     456:	66 0f       	add	r22, r22
     458:	77 1f       	adc	r23, r23
     45a:	8a 95       	dec	r24
     45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     45e:	cb 01       	movw	r24, r22
     460:	84 2b       	or	r24, r20
     462:	87 bb       	out	0x17, r24	; 23
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     464:	80 e0       	ldi	r24, 0x00	; 0

			case B:
				if (direction == OUT_pin)
				{
					DDRB |= (1 << pin_num);
					break;
     466:	08 95       	ret
				}
				else if (direction == IN_pin)
     468:	41 11       	cpse	r20, r1
     46a:	57 c0       	rjmp	.+174    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
				{
					DDRB &= ~(1 << pin_num);
     46c:	47 b3       	in	r20, 0x17	; 23
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	b9 01       	movw	r22, r18
     474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     476:	66 0f       	add	r22, r22
     478:	77 1f       	adc	r23, r23
     47a:	8a 95       	dec	r24
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47e:	cb 01       	movw	r24, r22
     480:	80 95       	com	r24
     482:	84 23       	and	r24, r20
     484:	87 bb       	out	0x17, r24	; 23
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     486:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				else if (direction == IN_pin)
				{
					DDRB &= ~(1 << pin_num);
					break;
     488:	08 95       	ret
				else
				{
					return VALUE_ERROR;
				}
			case C:
				if (direction == OUT_pin)
     48a:	41 30       	cpi	r20, 0x01	; 1
     48c:	71 f4       	brne	.+28     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
				{
					DDRC |= (1 << pin_num);
     48e:	44 b3       	in	r20, 0x14	; 20
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	b9 01       	movw	r22, r18
     496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     498:	66 0f       	add	r22, r22
     49a:	77 1f       	adc	r23, r23
     49c:	8a 95       	dec	r24
     49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     4a0:	cb 01       	movw	r24, r22
     4a2:	84 2b       	or	r24, r20
     4a4:	84 bb       	out	0x14, r24	; 20
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
				}
			case C:
				if (direction == OUT_pin)
				{
					DDRC |= (1 << pin_num);
					break;
     4a8:	08 95       	ret
				}
				else if (direction == IN_pin)
     4aa:	41 11       	cpse	r20, r1
     4ac:	38 c0       	rjmp	.+112    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
				{
					DDRC &= ~(1 << pin_num);
     4ae:	44 b3       	in	r20, 0x14	; 20
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	b9 01       	movw	r22, r18
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4b8:	66 0f       	add	r22, r22
     4ba:	77 1f       	adc	r23, r23
     4bc:	8a 95       	dec	r24
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4c0:	cb 01       	movw	r24, r22
     4c2:	80 95       	com	r24
     4c4:	84 23       	and	r24, r20
     4c6:	84 bb       	out	0x14, r24	; 20
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     4c8:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				else if (direction == IN_pin)
				{
					DDRC &= ~(1 << pin_num);
					break;
     4ca:	08 95       	ret
				{
					return VALUE_ERROR;
				}

			case D:
				if (direction == OUT_pin)
     4cc:	41 30       	cpi	r20, 0x01	; 1
     4ce:	71 f4       	brne	.+28     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
				{
					DDRD |= (1 << pin_num);
     4d0:	41 b3       	in	r20, 0x11	; 17
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	b9 01       	movw	r22, r18
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4da:	66 0f       	add	r22, r22
     4dc:	77 1f       	adc	r23, r23
     4de:	8a 95       	dec	r24
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4e2:	cb 01       	movw	r24, r22
     4e4:	84 2b       	or	r24, r20
     4e6:	81 bb       	out	0x11, r24	; 17
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     4e8:	80 e0       	ldi	r24, 0x00	; 0

			case D:
				if (direction == OUT_pin)
				{
					DDRD |= (1 << pin_num);
					break;
     4ea:	08 95       	ret
				}
				else if (direction == IN_pin)
     4ec:	41 11       	cpse	r20, r1
     4ee:	19 c0       	rjmp	.+50     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
				{
					DDRD &= ~(1 << pin_num);
     4f0:	41 b3       	in	r20, 0x11	; 17
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	b9 01       	movw	r22, r18
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     4fa:	66 0f       	add	r22, r22
     4fc:	77 1f       	adc	r23, r23
     4fe:	8a 95       	dec	r24
     500:	e2 f7       	brpl	.-8      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     502:	cb 01       	movw	r24, r22
     504:	80 95       	com	r24
     506:	84 23       	and	r24, r20
     508:	81 bb       	out	0x11, r24	; 17
			
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
     50a:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				else if (direction == IN_pin)
				{
					DDRD &= ~(1 << pin_num);
					break;
     50c:	08 95       	ret

DIO_error_handler DIO_init(uint8_t pin_num, EN_port_name port_name, EN_pin_direction direction)
{
	if (pin_num <0 || pin_num >7)
	{
		return PIN_NUM_ERROR;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	08 95       	ret
				{
					return VALUE_ERROR;
				}
			
			default:
					return PORT_NAME_ERROR;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	08 95       	ret
					DDRA &=~ (1 << pin_num);
					break;
				}
				else
				{
					return VALUE_ERROR;
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	08 95       	ret
					DDRB &= ~(1 << pin_num);
					break;
				}
				else
				{
					return VALUE_ERROR;
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	08 95       	ret
					DDRC &= ~(1 << pin_num);
					break;
				}
				else
				{
					return VALUE_ERROR;
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	08 95       	ret
					DDRD &= ~(1 << pin_num);
					break;
				}
				else
				{
					return VALUE_ERROR;
     522:	83 e0       	ldi	r24, 0x03	; 3
			default:
					return PORT_NAME_ERROR;
		}
	}
 return DIO_OK;
}
     524:	08 95       	ret

00000526 <DIO_write>:

DIO_error_handler DIO_write(uint8_t pin_num, EN_port_name port_name, EN_pin_value value)
{
	if (pin_num <0 || pin_num >7)
     526:	88 30       	cpi	r24, 0x08	; 8
     528:	08 f0       	brcs	.+2      	; 0x52c <DIO_write+0x6>
     52a:	8e c0       	rjmp	.+284    	; 0x648 <DIO_write+0x122>
	{
		return PIN_NUM_ERROR;
	}
	else
	{
		switch (port_name)
     52c:	61 30       	cpi	r22, 0x01	; 1
     52e:	49 f1       	breq	.+82     	; 0x582 <DIO_write+0x5c>
     530:	38 f0       	brcs	.+14     	; 0x540 <DIO_write+0x1a>
     532:	62 30       	cpi	r22, 0x02	; 2
     534:	09 f4       	brne	.+2      	; 0x538 <DIO_write+0x12>
     536:	46 c0       	rjmp	.+140    	; 0x5c4 <DIO_write+0x9e>
     538:	63 30       	cpi	r22, 0x03	; 3
     53a:	09 f4       	brne	.+2      	; 0x53e <DIO_write+0x18>
     53c:	64 c0       	rjmp	.+200    	; 0x606 <DIO_write+0xe0>
     53e:	86 c0       	rjmp	.+268    	; 0x64c <DIO_write+0x126>
		{
			case A:
				if (value == ON_value)
     540:	41 30       	cpi	r20, 0x01	; 1
     542:	71 f4       	brne	.+28     	; 0x560 <DIO_write+0x3a>
				{
					PORTA |= (1 << pin_num);
     544:	4b b3       	in	r20, 0x1b	; 27
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	b9 01       	movw	r22, r18
     54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_write+0x2c>
     54e:	66 0f       	add	r22, r22
     550:	77 1f       	adc	r23, r23
     552:	8a 95       	dec	r24
     554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_write+0x28>
     556:	cb 01       	movw	r24, r22
     558:	84 2b       	or	r24, r20
     55a:	8b bb       	out	0x1b, r24	; 27
				}
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
     55c:	80 e0       	ldi	r24, 0x00	; 0
		{
			case A:
				if (value == ON_value)
				{
					PORTA |= (1 << pin_num);
					break;
     55e:	08 95       	ret
				}
				else if (value == OFF_value)
     560:	41 11       	cpse	r20, r1
     562:	76 c0       	rjmp	.+236    	; 0x650 <DIO_write+0x12a>
				{
					PORTA &= ~(1 << pin_num);
     564:	4b b3       	in	r20, 0x1b	; 27
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	b9 01       	movw	r22, r18
     56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_write+0x4c>
     56e:	66 0f       	add	r22, r22
     570:	77 1f       	adc	r23, r23
     572:	8a 95       	dec	r24
     574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_write+0x48>
     576:	cb 01       	movw	r24, r22
     578:	80 95       	com	r24
     57a:	84 23       	and	r24, r20
     57c:	8b bb       	out	0x1b, r24	; 27
				}
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
     57e:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				else if (value == OFF_value)
				{
					PORTA &= ~(1 << pin_num);
					break;
     580:	08 95       	ret
					//Handel Error
					return VALUE_ERROR;
				}

			case B:
				if (value == ON_value)
     582:	41 30       	cpi	r20, 0x01	; 1
     584:	71 f4       	brne	.+28     	; 0x5a2 <DIO_write+0x7c>
				{
					PORTB |= (1 << pin_num);
     586:	48 b3       	in	r20, 0x18	; 24
     588:	21 e0       	ldi	r18, 0x01	; 1
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	b9 01       	movw	r22, r18
     58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_write+0x6e>
     590:	66 0f       	add	r22, r22
     592:	77 1f       	adc	r23, r23
     594:	8a 95       	dec	r24
     596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_write+0x6a>
     598:	cb 01       	movw	r24, r22
     59a:	84 2b       	or	r24, r20
     59c:	88 bb       	out	0x18, r24	; 24
				}
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
     59e:	80 e0       	ldi	r24, 0x00	; 0

			case B:
				if (value == ON_value)
				{
					PORTB |= (1 << pin_num);
					break;
     5a0:	08 95       	ret
				}
				else if (value == OFF_value)
     5a2:	41 11       	cpse	r20, r1
     5a4:	57 c0       	rjmp	.+174    	; 0x654 <DIO_write+0x12e>
				{
					PORTB &= ~(1 << pin_num);
     5a6:	48 b3       	in	r20, 0x18	; 24
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	b9 01       	movw	r22, r18
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_write+0x8e>
     5b0:	66 0f       	add	r22, r22
     5b2:	77 1f       	adc	r23, r23
     5b4:	8a 95       	dec	r24
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_write+0x8a>
     5b8:	cb 01       	movw	r24, r22
     5ba:	80 95       	com	r24
     5bc:	84 23       	and	r24, r20
     5be:	88 bb       	out	0x18, r24	; 24
				}
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				else if (value == OFF_value)
				{
					PORTB &= ~(1 << pin_num);
					break;
     5c2:	08 95       	ret
					//Handel Error
					return VALUE_ERROR;
				}

			case C:
				if (value == ON_value)
     5c4:	41 30       	cpi	r20, 0x01	; 1
     5c6:	71 f4       	brne	.+28     	; 0x5e4 <DIO_write+0xbe>
				{
					PORTC |= (1 << pin_num);
     5c8:	45 b3       	in	r20, 0x15	; 21
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	b9 01       	movw	r22, r18
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_write+0xb0>
     5d2:	66 0f       	add	r22, r22
     5d4:	77 1f       	adc	r23, r23
     5d6:	8a 95       	dec	r24
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_write+0xac>
     5da:	cb 01       	movw	r24, r22
     5dc:	84 2b       	or	r24, r20
     5de:	85 bb       	out	0x15, r24	; 21
					return PORT_NAME_ERROR;
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	08 95       	ret
				}
				else if (value == OFF_value)
     5e4:	41 11       	cpse	r20, r1
     5e6:	38 c0       	rjmp	.+112    	; 0x658 <DIO_write+0x132>
				{
					PORTC &= ~(1 << pin_num);
     5e8:	45 b3       	in	r20, 0x15	; 21
     5ea:	21 e0       	ldi	r18, 0x01	; 1
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	b9 01       	movw	r22, r18
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_write+0xd0>
     5f2:	66 0f       	add	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	8a 95       	dec	r24
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_write+0xcc>
     5fa:	cb 01       	movw	r24, r22
     5fc:	80 95       	com	r24
     5fe:	84 23       	and	r24, r20
     600:	85 bb       	out	0x15, r24	; 21
				}
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
     602:	80 e0       	ldi	r24, 0x00	; 0
					return PORT_NAME_ERROR;
				}
				else if (value == OFF_value)
				{
					PORTC &= ~(1 << pin_num);
					break;
     604:	08 95       	ret
					//Handel Error
					return VALUE_ERROR;
				}

			case D:
				if (value == ON_value)
     606:	41 30       	cpi	r20, 0x01	; 1
     608:	71 f4       	brne	.+28     	; 0x626 <DIO_write+0x100>
				{
					PORTD |= (1 << pin_num);
     60a:	42 b3       	in	r20, 0x12	; 18
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	b9 01       	movw	r22, r18
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_write+0xf2>
     614:	66 0f       	add	r22, r22
     616:	77 1f       	adc	r23, r23
     618:	8a 95       	dec	r24
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_write+0xee>
     61c:	cb 01       	movw	r24, r22
     61e:	84 2b       	or	r24, r20
     620:	82 bb       	out	0x12, r24	; 18
				}
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
     622:	80 e0       	ldi	r24, 0x00	; 0

			case D:
				if (value == ON_value)
				{
					PORTD |= (1 << pin_num);
					break;
     624:	08 95       	ret
				}
				else if (value == OFF_value)
     626:	41 11       	cpse	r20, r1
     628:	19 c0       	rjmp	.+50     	; 0x65c <DIO_write+0x136>
				{
					PORTD &= ~(1 << pin_num);
     62a:	42 b3       	in	r20, 0x12	; 18
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	b9 01       	movw	r22, r18
     632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_write+0x112>
     634:	66 0f       	add	r22, r22
     636:	77 1f       	adc	r23, r23
     638:	8a 95       	dec	r24
     63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_write+0x10e>
     63c:	cb 01       	movw	r24, r22
     63e:	80 95       	com	r24
     640:	84 23       	and	r24, r20
     642:	82 bb       	out	0x12, r24	; 18
				}
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
     644:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				else if (value == OFF_value)
				{
					PORTD &= ~(1 << pin_num);
					break;
     646:	08 95       	ret

DIO_error_handler DIO_write(uint8_t pin_num, EN_port_name port_name, EN_pin_value value)
{
	if (pin_num <0 || pin_num >7)
	{
		return PIN_NUM_ERROR;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	08 95       	ret
				{
					//Handel Error
					return VALUE_ERROR;
				}
			default:
				return PORT_NAME_ERROR ;
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	08 95       	ret
					break;
				}
				else
				{
					//Handel Error
					return VALUE_ERROR;
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	08 95       	ret
					break;
				}
				else
				{
					//Handel Error
					return VALUE_ERROR;
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	08 95       	ret
					break;
				}
				else
				{
					//Handel Error
					return VALUE_ERROR;
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	08 95       	ret
					break;
				}
				else
				{
					//Handel Error
					return VALUE_ERROR;
     65c:	83 e0       	ldi	r24, 0x03	; 3
			default:
				return PORT_NAME_ERROR ;
		}
	}
	return DIO_OK;
}
     65e:	08 95       	ret

00000660 <DIO_write_port>:

DIO_error_handler DIO_write_port(EN_port_name port_name, EN_pin_value value)
{
	
	switch (port_name)
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	89 f0       	breq	.+34     	; 0x686 <DIO_write_port+0x26>
     664:	28 f0       	brcs	.+10     	; 0x670 <DIO_write_port+0x10>
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	c9 f0       	breq	.+50     	; 0x69c <DIO_write_port+0x3c>
     66a:	83 30       	cpi	r24, 0x03	; 3
     66c:	11 f1       	breq	.+68     	; 0x6b2 <DIO_write_port+0x52>
     66e:	2c c0       	rjmp	.+88     	; 0x6c8 <DIO_write_port+0x68>
	{
		case A:
			if (value == ON_value)
     670:	61 30       	cpi	r22, 0x01	; 1
     672:	21 f4       	brne	.+8      	; 0x67c <DIO_write_port+0x1c>
			{
				PORTA = 0xff;
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	8b bb       	out	0x1b, r24	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret
		case A:
			if (value == ON_value)
			{
				PORTA = 0xff;
			}
			else if (value == OFF_value)
     67c:	61 11       	cpse	r22, r1
     67e:	26 c0       	rjmp	.+76     	; 0x6cc <DIO_write_port+0x6c>
			{
				PORTA = 0x00;
     680:	1b ba       	out	0x1b, r1	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	08 95       	ret
			{
				return VALUE_ERROR;
			}
			break;
		case B:
			if (value == ON_value)
     686:	61 30       	cpi	r22, 0x01	; 1
     688:	21 f4       	brne	.+8      	; 0x692 <DIO_write_port+0x32>
			{
				PORTA = 0xff;
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	8b bb       	out	0x1b, r24	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	08 95       	ret
		case B:
			if (value == ON_value)
			{
				PORTA = 0xff;
			}
			else if (value == OFF_value)
     692:	61 11       	cpse	r22, r1
     694:	1d c0       	rjmp	.+58     	; 0x6d0 <DIO_write_port+0x70>
			{
				PORTA = 0x00;
     696:	1b ba       	out	0x1b, r1	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	08 95       	ret
			{
				return VALUE_ERROR;
			}
			break;
		case C:
			if (value == ON_value)
     69c:	61 30       	cpi	r22, 0x01	; 1
     69e:	21 f4       	brne	.+8      	; 0x6a8 <DIO_write_port+0x48>
			{
				PORTA = 0xff;
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	8b bb       	out	0x1b, r24	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret
		case C:
			if (value == ON_value)
			{
				PORTA = 0xff;
			}
			else if (value == OFF_value)
     6a8:	61 11       	cpse	r22, r1
     6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <DIO_write_port+0x74>
			{
				PORTA = 0x00;
     6ac:	1b ba       	out	0x1b, r1	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
			{
				return VALUE_ERROR;
			}
			break;
		case D:
			if (value == ON_value)
     6b2:	61 30       	cpi	r22, 0x01	; 1
     6b4:	21 f4       	brne	.+8      	; 0x6be <DIO_write_port+0x5e>
			{
				PORTA = 0xff;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	8b bb       	out	0x1b, r24	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	08 95       	ret
		case D:
			if (value == ON_value)
			{
				PORTA = 0xff;
			}
			else if (value == OFF_value)
     6be:	61 11       	cpse	r22, r1
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <DIO_write_port+0x78>
			{
				PORTA = 0x00;
     6c2:	1b ba       	out	0x1b, r1	; 27
			}
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	08 95       	ret
			{
				return VALUE_ERROR;
			}
			break;
		default:
			return PORT_NAME_ERROR;
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	08 95       	ret
			{
				PORTA = 0x00;
			}
			else
			{
				return VALUE_ERROR;
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	08 95       	ret
			{
				PORTA = 0x00;
			}
			else
			{
				return VALUE_ERROR;
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	08 95       	ret
			{
				PORTA = 0x00;
			}
			else
			{
				return VALUE_ERROR;
     6d4:	83 e0       	ldi	r24, 0x03	; 3
     6d6:	08 95       	ret
			{
				PORTA = 0x00;
			}
			else
			{
				return VALUE_ERROR;
     6d8:	83 e0       	ldi	r24, 0x03	; 3
			break;
		default:
			return PORT_NAME_ERROR;
	}
	return DIO_OK;
}
     6da:	08 95       	ret

000006dc <external_interrupt_sense_mode>:
	return INTERRUP_OK;
}

INTERRUP_error_handler external_interrupt_sense_mode(uint8_t interrupt_num,  INT_sense_mode mode)
{
	switch (interrupt_num)
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	59 f1       	breq	.+86     	; 0x736 <external_interrupt_sense_mode+0x5a>
     6e0:	20 f0       	brcs	.+8      	; 0x6ea <external_interrupt_sense_mode+0xe>
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <external_interrupt_sense_mode+0xc>
     6e6:	4c c0       	rjmp	.+152    	; 0x780 <external_interrupt_sense_mode+0xa4>
     6e8:	61 c0       	rjmp	.+194    	; 0x7ac <external_interrupt_sense_mode+0xd0>
	{
		/***********************************************/
		case 0: //in case user chose External interrupt 0
			if (mode == rising_edge)
     6ea:	61 11       	cpse	r22, r1
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <external_interrupt_sense_mode+0x1c>
			{
				MCUCR |= (1<<ISC00) | (1<<ISC01);//setting (MCU Control Register Bit-0 and Bit-1) for rising edge mode
     6ee:	85 b7       	in	r24, 0x35	; 53
     6f0:	83 60       	ori	r24, 0x03	; 3
     6f2:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     6f4:	80 e0       	ldi	r24, 0x00	; 0
		/***********************************************/
		case 0: //in case user chose External interrupt 0
			if (mode == rising_edge)
			{
				MCUCR |= (1<<ISC00) | (1<<ISC01);//setting (MCU Control Register Bit-0 and Bit-1) for rising edge mode
				break;
     6f6:	08 95       	ret
			}
			else if (mode == falling_edge)
     6f8:	61 30       	cpi	r22, 0x01	; 1
     6fa:	41 f4       	brne	.+16     	; 0x70c <external_interrupt_sense_mode+0x30>
			{
				MCUCR &= ~(1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for falling edge mode
     6fc:	85 b7       	in	r24, 0x35	; 53
     6fe:	8e 7f       	andi	r24, 0xFE	; 254
     700:	85 bf       	out	0x35, r24	; 53
				MCUCR |= (1<<ISC01); 
     702:	85 b7       	in	r24, 0x35	; 53
     704:	82 60       	ori	r24, 0x02	; 2
     706:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     708:	80 e0       	ldi	r24, 0x00	; 0
			else if (mode == falling_edge)
			{
				MCUCR &= ~(1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for falling edge mode
				MCUCR |= (1<<ISC01); 
				
				break;
     70a:	08 95       	ret
			}
			
			else if (mode == logic_change)
     70c:	62 30       	cpi	r22, 0x02	; 2
     70e:	41 f4       	brne	.+16     	; 0x720 <external_interrupt_sense_mode+0x44>
			{
				MCUCR |= (1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for logic change mode
     710:	85 b7       	in	r24, 0x35	; 53
     712:	81 60       	ori	r24, 0x01	; 1
     714:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC01);
     716:	85 b7       	in	r24, 0x35	; 53
     718:	8d 7f       	andi	r24, 0xFD	; 253
     71a:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     71c:	80 e0       	ldi	r24, 0x00	; 0
			else if (mode == logic_change)
			{
				MCUCR |= (1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for logic change mode
				MCUCR &= ~(1<<ISC01);
				
				break;
     71e:	08 95       	ret
			}
			
			else if (mode == low_level)
     720:	63 30       	cpi	r22, 0x03	; 3
     722:	09 f0       	breq	.+2      	; 0x726 <external_interrupt_sense_mode+0x4a>
     724:	45 c0       	rjmp	.+138    	; 0x7b0 <external_interrupt_sense_mode+0xd4>
			{
				MCUCR &= ~(1<<ISC00); //setting (MCU Control Register Bit-0 and Bit-1) for low_level mode
     726:	85 b7       	in	r24, 0x35	; 53
     728:	8e 7f       	andi	r24, 0xFE	; 254
     72a:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC01);
     72c:	85 b7       	in	r24, 0x35	; 53
     72e:	8d 7f       	andi	r24, 0xFD	; 253
     730:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     732:	80 e0       	ldi	r24, 0x00	; 0
			
			else if (mode == low_level)
			{
				MCUCR &= ~(1<<ISC00); //setting (MCU Control Register Bit-0 and Bit-1) for low_level mode
				MCUCR &= ~(1<<ISC01);
				break;
     734:	08 95       	ret
				return INTERRUP_ERROR;
			}
			
		/***********************************************/
		case 1: //in case user chose External interrupt 1
			if (mode == rising_edge)
     736:	61 11       	cpse	r22, r1
     738:	05 c0       	rjmp	.+10     	; 0x744 <external_interrupt_sense_mode+0x68>
			{
				MCUCR |= (1<<ISC10) | (1<<ISC11);	//setting (MCU Control Register Bit-2 and Bit-3) for rising edge mode
     73a:	85 b7       	in	r24, 0x35	; 53
     73c:	8c 60       	ori	r24, 0x0C	; 12
     73e:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     740:	80 e0       	ldi	r24, 0x00	; 0
		/***********************************************/
		case 1: //in case user chose External interrupt 1
			if (mode == rising_edge)
			{
				MCUCR |= (1<<ISC10) | (1<<ISC11);	//setting (MCU Control Register Bit-2 and Bit-3) for rising edge mode
				break;
     742:	08 95       	ret
			}
			else if (mode == falling_edge)
     744:	61 30       	cpi	r22, 0x01	; 1
     746:	41 f4       	brne	.+16     	; 0x758 <external_interrupt_sense_mode+0x7c>
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for falling edge mode
     748:	85 b7       	in	r24, 0x35	; 53
     74a:	8b 7f       	andi	r24, 0xFB	; 251
     74c:	85 bf       	out	0x35, r24	; 53
				MCUCR |= (1<<ISC11); 
     74e:	85 b7       	in	r24, 0x35	; 53
     750:	88 60       	ori	r24, 0x08	; 8
     752:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     754:	80 e0       	ldi	r24, 0x00	; 0
			}
			else if (mode == falling_edge)
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for falling edge mode
				MCUCR |= (1<<ISC11); 
				break;
     756:	08 95       	ret
			}
		
			else if (mode == logic_change)
     758:	62 30       	cpi	r22, 0x02	; 2
     75a:	41 f4       	brne	.+16     	; 0x76c <external_interrupt_sense_mode+0x90>
			{
				MCUCR |= (1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for logic change mode
     75c:	85 b7       	in	r24, 0x35	; 53
     75e:	84 60       	ori	r24, 0x04	; 4
     760:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC11);
     762:	85 b7       	in	r24, 0x35	; 53
     764:	87 7f       	andi	r24, 0xF7	; 247
     766:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     768:	80 e0       	ldi	r24, 0x00	; 0
		
			else if (mode == logic_change)
			{
				MCUCR |= (1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for logic change mode
				MCUCR &= ~(1<<ISC11);
				break;
     76a:	08 95       	ret
			}
		
			else if (mode == low_level)
     76c:	63 30       	cpi	r22, 0x03	; 3
     76e:	11 f5       	brne	.+68     	; 0x7b4 <external_interrupt_sense_mode+0xd8>
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for low_level mode
     770:	85 b7       	in	r24, 0x35	; 53
     772:	8b 7f       	andi	r24, 0xFB	; 251
     774:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC11);
     776:	85 b7       	in	r24, 0x35	; 53
     778:	87 7f       	andi	r24, 0xF7	; 247
     77a:	85 bf       	out	0x35, r24	; 53
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     77c:	80 e0       	ldi	r24, 0x00	; 0
		
			else if (mode == low_level)
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for low_level mode
				MCUCR &= ~(1<<ISC11);
				break;
     77e:	08 95       	ret
				return INTERRUP_ERROR;
			}
		
		/***********************************************/
		case 2: //in case user chose External interrupt 2
			if (mode == rising_edge)
     780:	61 11       	cpse	r22, r1
     782:	05 c0       	rjmp	.+10     	; 0x78e <external_interrupt_sense_mode+0xb2>
			{
				MCUCSR |= (1<<ISC2);	//setting (MCUCSR Bit-6) for rising edge mode
     784:	84 b7       	in	r24, 0x34	; 52
     786:	80 64       	ori	r24, 0x40	; 64
     788:	84 bf       	out	0x34, r24	; 52
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     78a:	80 e0       	ldi	r24, 0x00	; 0
		/***********************************************/
		case 2: //in case user chose External interrupt 2
			if (mode == rising_edge)
			{
				MCUCSR |= (1<<ISC2);	//setting (MCUCSR Bit-6) for rising edge mode
				break;
     78c:	08 95       	ret
			}
			else if (mode == falling_edge)
     78e:	61 30       	cpi	r22, 0x01	; 1
     790:	29 f4       	brne	.+10     	; 0x79c <external_interrupt_sense_mode+0xc0>
			{
				MCUCSR &= ~(1<<ISC2); //setting (MCUCSR Bit-6) for falling edge mode
     792:	84 b7       	in	r24, 0x34	; 52
     794:	8f 7b       	andi	r24, 0xBF	; 191
     796:	84 bf       	out	0x34, r24	; 52
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     798:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			else if (mode == falling_edge)
			{
				MCUCSR &= ~(1<<ISC2); //setting (MCUCSR Bit-6) for falling edge mode
				break;
     79a:	08 95       	ret
			}
		
			else if (mode == logic_change || mode == low_level)
     79c:	62 50       	subi	r22, 0x02	; 2
     79e:	62 30       	cpi	r22, 0x02	; 2
     7a0:	58 f4       	brcc	.+22     	; 0x7b8 <external_interrupt_sense_mode+0xdc>
			{
				/*force setting (MCUCSR Bit-6) for rising edge mode
				as logic change and low level modes are not options for EXT_INT2*/
				MCUCSR |= (1<<ISC2);	
     7a2:	84 b7       	in	r24, 0x34	; 52
     7a4:	80 64       	ori	r24, 0x40	; 64
     7a6:	84 bf       	out	0x34, r24	; 52
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     7a8:	80 e0       	ldi	r24, 0x00	; 0
			{
				/*force setting (MCUCSR Bit-6) for rising edge mode
				as logic change and low level modes are not options for EXT_INT2*/
				MCUCSR |= (1<<ISC2);	
				//show warning to the user for that miss_implementation
				break;
     7aa:	08 95       	ret
			{
				//error handling
				return INTERRUP_ERROR;
			}
	}
	return INTERRUP_OK; 
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	08 95       	ret
				break;
			}
			else
			{
				//error handling
				return INTERRUP_ERROR;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	08 95       	ret
				break;
			}
			else
			{
				//error handling
				return INTERRUP_ERROR;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	08 95       	ret
			}
		
			else
			{
				//error handling
				return INTERRUP_ERROR;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
			}
	}
	return INTERRUP_OK; 
}
     7ba:	08 95       	ret

000007bc <external_interrupt_init>:

INTERRUP_error_handler external_interrupt_init(uint8_t interrupt_num)
{
	switch (interrupt_num)
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	49 f0       	breq	.+18     	; 0x7d2 <external_interrupt_init+0x16>
     7c0:	18 f0       	brcs	.+6      	; 0x7c8 <external_interrupt_init+0xc>
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	59 f0       	breq	.+22     	; 0x7dc <external_interrupt_init+0x20>
     7c6:	0f c0       	rjmp	.+30     	; 0x7e6 <external_interrupt_init+0x2a>
	{
		case 0:
		{
			GICR |= 1<<6; //setting bit-6 in GICR register HIGH to enable interrupt 0
     7c8:	8b b7       	in	r24, 0x3b	; 59
     7ca:	80 64       	ori	r24, 0x40	; 64
     7cc:	8b bf       	out	0x3b, r24	; 59
		}
		default:
		return INTERRUP_ERROR;
	}
	
	return INTERRUP_OK;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
	switch (interrupt_num)
	{
		case 0:
		{
			GICR |= 1<<6; //setting bit-6 in GICR register HIGH to enable interrupt 0
			break;
     7d0:	08 95       	ret
		}
		case 1:
		{
			GICR |= (1<<INT1);//setting bit-7 in GICR register HIGH to enable interrupt 1
     7d2:	8b b7       	in	r24, 0x3b	; 59
     7d4:	80 68       	ori	r24, 0x80	; 128
     7d6:	8b bf       	out	0x3b, r24	; 59
		}
		default:
		return INTERRUP_ERROR;
	}
	
	return INTERRUP_OK;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		case 1:
		{
			GICR |= (1<<INT1);//setting bit-7 in GICR register HIGH to enable interrupt 1
			break;
     7da:	08 95       	ret
		}
		case 2:
		{
			GICR |= (1<<INT2);//setting bit-5 in GICR register HIGH to enable interrupt 2
     7dc:	8b b7       	in	r24, 0x3b	; 59
     7de:	80 62       	ori	r24, 0x20	; 32
     7e0:	8b bf       	out	0x3b, r24	; 59
		}
		default:
		return INTERRUP_ERROR;
	}
	
	return INTERRUP_OK;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		case 2:
		{
			GICR |= (1<<INT2);//setting bit-5 in GICR register HIGH to enable interrupt 2
			break;
     7e4:	08 95       	ret
		}
		default:
		return INTERRUP_ERROR;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return INTERRUP_OK;
}
     7e8:	08 95       	ret

000007ea <timer_init>:
static const ST_delay clear_delay = {0,0,0,0}; // used to clear delay structure before each initialization



TIMER_error_handler timer_init(EN_timer_num timer_num,EN_timer_interrupt timer_interrupt_init, EN_timer_prescaler prescaler, double delay_value, EN_delay_unit delay_unit)
{
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 d0       	rcall	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80e:	1f 92       	push	r1
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	8d 83       	std	Y+5, r24	; 0x05
     816:	69 83       	std	Y+1, r22	; 0x01
     818:	74 2e       	mov	r7, r20
     81a:	48 01       	movw	r8, r16
     81c:	59 01       	movw	r10, r18
	//terminate if delay is 0 
	if (delay_value <=0)
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	a9 01       	movw	r20, r18
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
     82c:	18 16       	cp	r1, r24
     82e:	0c f0       	brlt	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     830:	7f c1       	rjmp	.+766    	; 0xb30 <__stack+0x2d1>
		
		return TIMER_ERROR;
	}
	
	// interrupt enable or not 
	switch (timer_interrupt_init)
     832:	29 81       	ldd	r18, Y+1	; 0x01
     834:	22 23       	and	r18, r18
     836:	19 f0       	breq	.+6      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     838:	21 30       	cpi	r18, 0x01	; 1
     83a:	a1 f0       	breq	.+40     	; 0x864 <__stack+0x5>
     83c:	25 c0       	rjmp	.+74     	; 0x888 <__stack+0x29>
	{
		case interrupt_enable:
			switch (timer_num)
     83e:	8d 81       	ldd	r24, Y+5	; 0x05
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	41 f0       	breq	.+16     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     844:	18 f0       	brcs	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	49 f0       	breq	.+18     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     84a:	74 c1       	rjmp	.+744    	; 0xb34 <__stack+0x2d5>
			{	
				case timer_0:
					TIMSK |= (1<<TOIE0);
     84c:	89 b7       	in	r24, 0x39	; 57
     84e:	81 60       	ori	r24, 0x01	; 1
     850:	89 bf       	out	0x39, r24	; 57
					break;
     852:	1a c0       	rjmp	.+52     	; 0x888 <__stack+0x29>

				case timer_1:
					TIMSK |= (1<<TOIE1);
     854:	89 b7       	in	r24, 0x39	; 57
     856:	84 60       	ori	r24, 0x04	; 4
     858:	89 bf       	out	0x39, r24	; 57
					break;
     85a:	16 c0       	rjmp	.+44     	; 0x888 <__stack+0x29>
										
				case timer_2:
					TIMSK |= (1<<TOIE2);
     85c:	89 b7       	in	r24, 0x39	; 57
     85e:	80 64       	ori	r24, 0x40	; 64
     860:	89 bf       	out	0x39, r24	; 57
					break;		
     862:	12 c0       	rjmp	.+36     	; 0x888 <__stack+0x29>
					return TIMER_ERROR;		
			}
			break;
				
		case interrupt_disable:
			switch (timer_num)
     864:	9d 81       	ldd	r25, Y+5	; 0x05
     866:	91 30       	cpi	r25, 0x01	; 1
     868:	41 f0       	breq	.+16     	; 0x87a <__stack+0x1b>
     86a:	18 f0       	brcs	.+6      	; 0x872 <__stack+0x13>
     86c:	92 30       	cpi	r25, 0x02	; 2
     86e:	49 f0       	breq	.+18     	; 0x882 <__stack+0x23>
     870:	63 c1       	rjmp	.+710    	; 0xb38 <__stack+0x2d9>
			{
				case timer_0:
					TIMSK &=~ (1<<TOIE0);
     872:	89 b7       	in	r24, 0x39	; 57
     874:	8e 7f       	andi	r24, 0xFE	; 254
     876:	89 bf       	out	0x39, r24	; 57
					break;
     878:	07 c0       	rjmp	.+14     	; 0x888 <__stack+0x29>

				case timer_1:
					TIMSK &=~ (1<<TOIE1);
     87a:	89 b7       	in	r24, 0x39	; 57
     87c:	8b 7f       	andi	r24, 0xFB	; 251
     87e:	89 bf       	out	0x39, r24	; 57
					break;
     880:	03 c0       	rjmp	.+6      	; 0x888 <__stack+0x29>
										
				case timer_2:
					TIMSK &=~ (1<<TOIE2);
     882:	89 b7       	in	r24, 0x39	; 57
     884:	8f 7b       	andi	r24, 0xBF	; 191
     886:	89 bf       	out	0x39, r24	; 57
			break;
			
	}
	
	// reset delay structure according to the timer being initialized 
		switch(timer_num)
     888:	ad 81       	ldd	r26, Y+5	; 0x05
     88a:	a1 30       	cpi	r26, 0x01	; 1
     88c:	71 f0       	breq	.+28     	; 0x8aa <__stack+0x4b>
     88e:	18 f0       	brcs	.+6      	; 0x896 <__stack+0x37>
     890:	a2 30       	cpi	r26, 0x02	; 2
     892:	a9 f0       	breq	.+42     	; 0x8be <__stack+0x5f>
     894:	53 c1       	rjmp	.+678    	; 0xb3c <__stack+0x2dd>
	{	
		case timer_0:	
			delay_0 = clear_delay ;
     896:	8e e0       	ldi	r24, 0x0E	; 14
     898:	e0 e6       	ldi	r30, 0x60	; 96
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	a2 e8       	ldi	r26, 0x82	; 130
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	01 90       	ld	r0, Z+
     8a2:	0d 92       	st	X+, r0
     8a4:	8a 95       	dec	r24
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <__stack+0x41>
			break;
     8a8:	13 c0       	rjmp	.+38     	; 0x8d0 <__stack+0x71>
		
		case timer_1:
			delay_1 = clear_delay ;
     8aa:	8e e0       	ldi	r24, 0x0E	; 14
     8ac:	e0 e6       	ldi	r30, 0x60	; 96
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	a4 e7       	ldi	r26, 0x74	; 116
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	01 90       	ld	r0, Z+
     8b6:	0d 92       	st	X+, r0
     8b8:	8a 95       	dec	r24
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <__stack+0x55>
			break;
     8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__stack+0x71>
		
		case timer_2:
			delay_2 = clear_delay ;
     8be:	8e e0       	ldi	r24, 0x0E	; 14
     8c0:	e0 e6       	ldi	r30, 0x60	; 96
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	a1 e9       	ldi	r26, 0x91	; 145
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	01 90       	ld	r0, Z+
     8ca:	0d 92       	st	X+, r0
     8cc:	8a 95       	dec	r24
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <__stack+0x69>
	double timer_init_value = 0;
	double residual_buffer=0;
	double T_tick =0;
	
	/* timer size setting*/
	switch (timer_num)
     8d0:	bd 81       	ldd	r27, Y+5	; 0x05
     8d2:	b1 30       	cpi	r27, 0x01	; 1
     8d4:	69 f0       	breq	.+26     	; 0x8f0 <__stack+0x91>
     8d6:	18 f0       	brcs	.+6      	; 0x8de <__stack+0x7f>
     8d8:	b2 30       	cpi	r27, 0x02	; 2
     8da:	09 f0       	breq	.+2      	; 0x8de <__stack+0x7f>
     8dc:	31 c1       	rjmp	.+610    	; 0xb40 <__stack+0x2e1>
	{
		case timer_0:
		{
			timer_size =256;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 e8       	ldi	r26, 0x80	; 128
     8e4:	b3 e4       	ldi	r27, 0x43	; 67
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	ab 83       	std	Y+3, r26	; 0x03
     8ec:	bc 83       	std	Y+4, r27	; 0x04
     8ee:	08 c0       	rjmp	.+16     	; 0x900 <__stack+0xa1>
			break;
		}
		case timer_1:
		{
			timer_size =65536;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	a0 e8       	ldi	r26, 0x80	; 128
     8f6:	b7 e4       	ldi	r27, 0x47	; 71
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	ab 83       	std	Y+3, r26	; 0x03
     8fe:	bc 83       	std	Y+4, r27	; 0x04
		default:
			return TIMER_ERROR;
	}
	
	/* converting delay units to micro-seconds as calcualtions are held in micro-seconds */
	switch (delay_unit)
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	e9 16       	cp	r14, r25
     904:	89 f0       	breq	.+34     	; 0x928 <__stack+0xc9>
     906:	e9 16       	cp	r14, r25
     908:	20 f0       	brcs	.+8      	; 0x912 <__stack+0xb3>
     90a:	a2 e0       	ldi	r26, 0x02	; 2
     90c:	ea 16       	cp	r14, r26
     90e:	b1 f0       	breq	.+44     	; 0x93c <__stack+0xdd>
     910:	19 c1       	rjmp	.+562    	; 0xb44 <__stack+0x2e5>
	{
		case seconds:
			delay_value = delay_value*1000000;
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	34 e2       	ldi	r19, 0x24	; 36
     916:	44 e7       	ldi	r20, 0x74	; 116
     918:	59 e4       	ldi	r21, 0x49	; 73
     91a:	c5 01       	movw	r24, r10
     91c:	b4 01       	movw	r22, r8
     91e:	0e 94 ab 08 	call	0x1156	; 0x1156 <__mulsf3>
     922:	4b 01       	movw	r8, r22
     924:	5c 01       	movw	r10, r24
			break;
     926:	0a c0       	rjmp	.+20     	; 0x93c <__stack+0xdd>

		case millis:
			delay_value = delay_value * 1000;
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	4a e7       	ldi	r20, 0x7A	; 122
     92e:	54 e4       	ldi	r21, 0x44	; 68
     930:	c5 01       	movw	r24, r10
     932:	b4 01       	movw	r22, r8
     934:	0e 94 ab 08 	call	0x1156	; 0x1156 <__mulsf3>
     938:	4b 01       	movw	r8, r22
     93a:	5c 01       	movw	r10, r24
		default:
			return TIMER_ERROR;	
	}
	
	/* setting prescaler depending on the user choice, if automatic, then the could will evaluate it depending on the delay value*/
	switch (prescaler)
     93c:	47 2d       	mov	r20, r7
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	48 30       	cpi	r20, 0x08	; 8
     942:	51 05       	cpc	r21, r1
     944:	08 f0       	brcs	.+2      	; 0x948 <__stack+0xe9>
     946:	00 c1       	rjmp	.+512    	; 0xb48 <__stack+0x2e9>
     948:	fa 01       	movw	r30, r20
     94a:	e6 5d       	subi	r30, 0xD6	; 214
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__tablejump2__>
			break;
		}
		
		case pre_1:
		{
			prescaler_value = 1;
     952:	01 e0       	ldi	r16, 0x01	; 1
     954:	10 e0       	ldi	r17, 0x00	; 0
     956:	75 c0       	rjmp	.+234    	; 0xa42 <__stack+0x1e3>
	/* setting prescaler depending on the user choice, if automatic, then the could will evaluate it depending on the delay value*/
	switch (prescaler)
	{
		case automatic:
		{
			if (delay_value <= 1024)
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e8       	ldi	r20, 0x80	; 128
     95e:	54 e4       	ldi	r21, 0x44	; 68
     960:	c5 01       	movw	r24, r10
     962:	b4 01       	movw	r22, r8
     964:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
     968:	18 16       	cp	r1, r24
     96a:	0c f0       	brlt	.+2      	; 0x96e <__stack+0x10f>
     96c:	5c c0       	rjmp	.+184    	; 0xa26 <__stack+0x1c7>
			{
				prescaler_value = 1;
			}
			
			else if (delay_value > 1024 && delay_value <= 10240 )
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	54 e4       	ldi	r21, 0x44	; 68
     976:	c5 01       	movw	r24, r10
     978:	b4 01       	movw	r22, r8
     97a:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	5c f4       	brge	.+22     	; 0x998 <__stack+0x139>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e2       	ldi	r20, 0x20	; 32
     988:	56 e4       	ldi	r21, 0x46	; 70
     98a:	c5 01       	movw	r24, r10
     98c:	b4 01       	movw	r22, r8
     98e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
     992:	18 16       	cp	r1, r24
     994:	0c f0       	brlt	.+2      	; 0x998 <__stack+0x139>
     996:	4a c0       	rjmp	.+148    	; 0xa2c <__stack+0x1cd>
			{
				prescaler_value = 8;
			}
			
			else if (delay_value > 10240 && delay_value <= 102400 )
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e2       	ldi	r20, 0x20	; 32
     99e:	56 e4       	ldi	r21, 0x46	; 70
     9a0:	c5 01       	movw	r24, r10
     9a2:	b4 01       	movw	r22, r8
     9a4:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     9a8:	18 16       	cp	r1, r24
     9aa:	54 f4       	brge	.+20     	; 0x9c0 <__stack+0x161>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	48 ec       	ldi	r20, 0xC8	; 200
     9b2:	57 e4       	ldi	r21, 0x47	; 71
     9b4:	c5 01       	movw	r24, r10
     9b6:	b4 01       	movw	r22, r8
     9b8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
     9bc:	18 16       	cp	r1, r24
     9be:	cc f5       	brge	.+114    	; 0xa32 <__stack+0x1d3>
			{
				prescaler_value = 64;
			}
			else if (delay_value > 102400 && delay_value <= 1024000 )
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	48 ec       	ldi	r20, 0xC8	; 200
     9c6:	57 e4       	ldi	r21, 0x47	; 71
     9c8:	c5 01       	movw	r24, r10
     9ca:	b4 01       	movw	r22, r8
     9cc:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     9d0:	18 16       	cp	r1, r24
     9d2:	54 f4       	brge	.+20     	; 0x9e8 <__stack+0x189>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	4a e7       	ldi	r20, 0x7A	; 122
     9da:	59 e4       	ldi	r21, 0x49	; 73
     9dc:	c5 01       	movw	r24, r10
     9de:	b4 01       	movw	r22, r8
     9e0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
     9e4:	18 16       	cp	r1, r24
     9e6:	44 f5       	brge	.+80     	; 0xa38 <__stack+0x1d9>
			{
				prescaler_value = 256;
			}
			else if (delay_value > 1024000 )
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	4a e7       	ldi	r20, 0x7A	; 122
     9ee:	59 e4       	ldi	r21, 0x49	; 73
     9f0:	c5 01       	movw	r24, r10
     9f2:	b4 01       	movw	r22, r8
     9f4:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     9f8:	18 16       	cp	r1, r24
     9fa:	0c f1       	brlt	.+66     	; 0xa3e <__stack+0x1df>
		default:
			return TIMER_ERROR;
	}
	
	/* defining timer calculations variables*/
	uint16_t prescaler_value =1;
     9fc:	01 e0       	ldi	r16, 0x01	; 1
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	20 c0       	rjmp	.+64     	; 0xa42 <__stack+0x1e3>
			prescaler_value = 8;
			break;
		}
		case pre_32:
		{
			prescaler_value = 32;
     a02:	00 e2       	ldi	r16, 0x20	; 32
     a04:	10 e0       	ldi	r17, 0x00	; 0
			break;
     a06:	1d c0       	rjmp	.+58     	; 0xa42 <__stack+0x1e3>
		}		
		case pre_64:
		{
			prescaler_value = 64;
     a08:	00 e4       	ldi	r16, 0x40	; 64
     a0a:	10 e0       	ldi	r17, 0x00	; 0
			break;
     a0c:	1a c0       	rjmp	.+52     	; 0xa42 <__stack+0x1e3>
		}
		case pre_128:
		{
			prescaler_value = 128;
     a0e:	00 e8       	ldi	r16, 0x80	; 128
     a10:	10 e0       	ldi	r17, 0x00	; 0
			break;
     a12:	17 c0       	rjmp	.+46     	; 0xa42 <__stack+0x1e3>
		}		
		case pre_256:
		{
			prescaler_value = 256;
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	11 e0       	ldi	r17, 0x01	; 1
			break;
     a18:	14 c0       	rjmp	.+40     	; 0xa42 <__stack+0x1e3>
		}
		case pre_1024:
		{
			prescaler_value = 1024;
     a1a:	00 e0       	ldi	r16, 0x00	; 0
     a1c:	14 e0       	ldi	r17, 0x04	; 4
			break;
     a1e:	11 c0       	rjmp	.+34     	; 0xa42 <__stack+0x1e3>
			prescaler_value = 1;
			break;
		}	
		case pre_8:
		{
			prescaler_value = 8;
     a20:	08 e0       	ldi	r16, 0x08	; 8
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <__stack+0x1e3>
	{
		case automatic:
		{
			if (delay_value <= 1024)
			{
				prescaler_value = 1;
     a26:	01 e0       	ldi	r16, 0x01	; 1
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	0b c0       	rjmp	.+22     	; 0xa42 <__stack+0x1e3>
			}
			
			else if (delay_value > 1024 && delay_value <= 10240 )
			{
				prescaler_value = 8;
     a2c:	08 e0       	ldi	r16, 0x08	; 8
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <__stack+0x1e3>
			}
			
			else if (delay_value > 10240 && delay_value <= 102400 )
			{
				prescaler_value = 64;
     a32:	00 e4       	ldi	r16, 0x40	; 64
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <__stack+0x1e3>
			}
			else if (delay_value > 102400 && delay_value <= 1024000 )
			{
				prescaler_value = 256;
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	11 e0       	ldi	r17, 0x01	; 1
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__stack+0x1e3>
			}
			else if (delay_value > 1024000 )
			{
				prescaler_value = 1024;
     a3e:	00 e0       	ldi	r16, 0x00	; 0
     a40:	14 e0       	ldi	r17, 0x04	; 4
			return TIMER_ERROR;
	}


	/*****************************************start timer math***********************************************/
	T_tick = ( ((double)prescaler_value) / (FCPU/1000000) );
     a42:	b8 01       	movw	r22, r16
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 92 07 	call	0xf24	; 0xf24 <__floatunsisf>
     a4c:	2b 01       	movw	r4, r22
     a4e:	3c 01       	movw	r6, r24
	max_delay = timer_size * T_tick;
     a50:	9b 01       	movw	r18, r22
     a52:	ac 01       	movw	r20, r24
     a54:	69 81       	ldd	r22, Y+1	; 0x01
     a56:	7a 81       	ldd	r23, Y+2	; 0x02
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	0e 94 ab 08 	call	0x1156	; 0x1156 <__mulsf3>
     a60:	6b 01       	movw	r12, r22
     a62:	7c 01       	movw	r14, r24

	if (max_delay >= delay_value)
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	c5 01       	movw	r24, r10
     a6a:	b4 01       	movw	r22, r8
     a6c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
     a70:	18 16       	cp	r1, r24
     a72:	84 f0       	brlt	.+32     	; 0xa94 <__stack+0x235>
	{
		timer_init_value = round((max_delay - delay_value) / T_tick);
     a74:	a5 01       	movw	r20, r10
     a76:	94 01       	movw	r18, r8
     a78:	c7 01       	movw	r24, r14
     a7a:	b6 01       	movw	r22, r12
     a7c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     a80:	a3 01       	movw	r20, r6
     a82:	92 01       	movw	r18, r4
     a84:	0e 94 f1 06 	call	0xde2	; 0xde2 <__divsf3>
     a88:	0e 94 18 09 	call	0x1230	; 0x1230 <round>
	
	/* defining timer calculations variables*/
	uint16_t prescaler_value =1;
	double timer_size =256;
	double max_delay = 0;
	double n_overflow = 0;
     a8c:	81 2c       	mov	r8, r1
     a8e:	91 2c       	mov	r9, r1
     a90:	54 01       	movw	r10, r8
     a92:	2a c0       	rjmp	.+84     	; 0xae8 <__stack+0x289>
		timer_init_value = round((max_delay - delay_value) / T_tick);
	}
	
	else 
	{	
		residual_buffer = fmod(delay_value,max_delay);
     a94:	a7 01       	movw	r20, r14
     a96:	96 01       	movw	r18, r12
     a98:	c5 01       	movw	r24, r10
     a9a:	b4 01       	movw	r22, r8
     a9c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <fmod>
     aa0:	69 83       	std	Y+1, r22	; 0x01
     aa2:	7a 83       	std	Y+2, r23	; 0x02
     aa4:	8b 83       	std	Y+3, r24	; 0x03
     aa6:	9c 83       	std	Y+4, r25	; 0x04
		
		n_overflow = ((delay_value - residual_buffer)/max_delay) + 1 ; // (int)(delay/max_delay)
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	c5 01       	movw	r24, r10
     aae:	b4 01       	movw	r22, r8
     ab0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     ab4:	a7 01       	movw	r20, r14
     ab6:	96 01       	movw	r18, r12
     ab8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__divsf3>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e8       	ldi	r20, 0x80	; 128
     ac2:	5f e3       	ldi	r21, 0x3F	; 63
     ac4:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     ac8:	4b 01       	movw	r8, r22
     aca:	5c 01       	movw	r10, r24
		timer_init_value = round(((max_delay - residual_buffer) / T_tick));
     acc:	29 81       	ldd	r18, Y+1	; 0x01
     ace:	3a 81       	ldd	r19, Y+2	; 0x02
     ad0:	4b 81       	ldd	r20, Y+3	; 0x03
     ad2:	5c 81       	ldd	r21, Y+4	; 0x04
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 01       	movw	r22, r12
     ad8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     adc:	a3 01       	movw	r20, r6
     ade:	92 01       	movw	r18, r4
     ae0:	0e 94 f1 06 	call	0xde2	; 0xde2 <__divsf3>
     ae4:	0e 94 18 09 	call	0x1230	; 0x1230 <round>
	}
	/*****************************************end timer math***********************************************/	
	switch (timer_num)
     ae8:	bd 81       	ldd	r27, Y+5	; 0x05
     aea:	b1 30       	cpi	r27, 0x01	; 1
     aec:	79 f1       	breq	.+94     	; 0xb4c <__stack+0x2ed>
     aee:	20 f0       	brcs	.+8      	; 0xaf8 <__stack+0x299>
     af0:	b2 30       	cpi	r27, 0x02	; 2
     af2:	81 f0       	breq	.+32     	; 0xb14 <__stack+0x2b5>
			delay_2.n_overflow = n_overflow;
			delay_2.prescaler_value = prescaler_value;
			break;		
		
		default:
			return TIMER_ERROR;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	2b c0       	rjmp	.+86     	; 0xb4e <__stack+0x2ef>
	}
	/*****************************************end timer math***********************************************/	
	switch (timer_num)
	{
		case timer_0:
			delay_0.init_value = timer_init_value;
     af8:	e2 e8       	ldi	r30, 0x82	; 130
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	60 83       	st	Z, r22
     afe:	71 83       	std	Z+1, r23	; 0x01
     b00:	82 83       	std	Z+2, r24	; 0x02
     b02:	93 83       	std	Z+3, r25	; 0x03
			delay_0.n_overflow = n_overflow;
     b04:	84 82       	std	Z+4, r8	; 0x04
     b06:	95 82       	std	Z+5, r9	; 0x05
     b08:	a6 82       	std	Z+6, r10	; 0x06
     b0a:	b7 82       	std	Z+7, r11	; 0x07
			delay_0.prescaler_value = prescaler_value;
     b0c:	11 87       	std	Z+9, r17	; 0x09
     b0e:	00 87       	std	Z+8, r16	; 0x08
			break;		
		
		default:
			return TIMER_ERROR;
	}
return TIMER_OK;
     b10:	80 e0       	ldi	r24, 0x00	; 0
	{
		case timer_0:
			delay_0.init_value = timer_init_value;
			delay_0.n_overflow = n_overflow;
			delay_0.prescaler_value = prescaler_value;
			break;
     b12:	1d c0       	rjmp	.+58     	; 0xb4e <__stack+0x2ef>
			//delay_1.n_overflow = n_overflow;
			//delay_1.prescaler_value = prescaler_value;
			break;
		
		case timer_2:
			delay_2.init_value = timer_init_value;
     b14:	e1 e9       	ldi	r30, 0x91	; 145
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	60 83       	st	Z, r22
     b1a:	71 83       	std	Z+1, r23	; 0x01
     b1c:	82 83       	std	Z+2, r24	; 0x02
     b1e:	93 83       	std	Z+3, r25	; 0x03
			delay_2.n_overflow = n_overflow;
     b20:	84 82       	std	Z+4, r8	; 0x04
     b22:	95 82       	std	Z+5, r9	; 0x05
     b24:	a6 82       	std	Z+6, r10	; 0x06
     b26:	b7 82       	std	Z+7, r11	; 0x07
			delay_2.prescaler_value = prescaler_value;
     b28:	11 87       	std	Z+9, r17	; 0x09
     b2a:	00 87       	std	Z+8, r16	; 0x08
			break;		
		
		default:
			return TIMER_ERROR;
	}
return TIMER_OK;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
		
		case timer_2:
			delay_2.init_value = timer_init_value;
			delay_2.n_overflow = n_overflow;
			delay_2.prescaler_value = prescaler_value;
			break;		
     b2e:	0f c0       	rjmp	.+30     	; 0xb4e <__stack+0x2ef>
{
	//terminate if delay is 0 
	if (delay_value <=0)
	{
		
		return TIMER_ERROR;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	0d c0       	rjmp	.+26     	; 0xb4e <__stack+0x2ef>
										
				case timer_2:
					TIMSK |= (1<<TOIE2);
					break;		
				default:
					return TIMER_ERROR;		
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0b c0       	rjmp	.+22     	; 0xb4e <__stack+0x2ef>
										
				case timer_2:
					TIMSK &=~ (1<<TOIE2);
					break;
				default: 
					return TIMER_ERROR;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	09 c0       	rjmp	.+18     	; 0xb4e <__stack+0x2ef>
		case timer_2:
			delay_2 = clear_delay ;
			break;
			
		default:
			return TIMER_ERROR;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	07 c0       	rjmp	.+14     	; 0xb4e <__stack+0x2ef>
			timer_size =256;
			break;
		}
		
		default:
			return TIMER_ERROR;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <__stack+0x2ef>
		case micros:
			//do nothing, they are already in micro-seconds :D 
			break;
			
		default:
			return TIMER_ERROR;	
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <__stack+0x2ef>
		{
			prescaler_value = 1024;
			break;
		}
		default:
			return TIMER_ERROR;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <__stack+0x2ef>
			break;		
		
		default:
			return TIMER_ERROR;
	}
return TIMER_OK;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
}
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	af 90       	pop	r10
     b6c:	9f 90       	pop	r9
     b6e:	8f 90       	pop	r8
     b70:	7f 90       	pop	r7
     b72:	6f 90       	pop	r6
     b74:	5f 90       	pop	r5
     b76:	4f 90       	pop	r4
     b78:	08 95       	ret

00000b7a <blocking_delay_0>:

TIMER_error_handler blocking_delay_0()
{
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
	TCNT0 = delay_0.init_value; // set time initial value
     b7e:	c2 e8       	ldi	r28, 0x82	; 130
     b80:	d0 e0       	ldi	r29, 0x00	; 0
     b82:	68 81       	ld	r22, Y
     b84:	79 81       	ldd	r23, Y+1	; 0x01
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	0e 94 63 07 	call	0xec6	; 0xec6 <__fixunssfsi>
     b8e:	62 bf       	out	0x32, r22	; 50
	switch (delay_0.prescaler_value)
     b90:	88 85       	ldd	r24, Y+8	; 0x08
     b92:	99 85       	ldd	r25, Y+9	; 0x09
     b94:	80 34       	cpi	r24, 0x40	; 64
     b96:	91 05       	cpc	r25, r1
     b98:	b9 f0       	breq	.+46     	; 0xbc8 <blocking_delay_0+0x4e>
     b9a:	30 f4       	brcc	.+12     	; 0xba8 <blocking_delay_0+0x2e>
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	91 05       	cpc	r25, r1
     ba0:	59 f0       	breq	.+22     	; 0xbb8 <blocking_delay_0+0x3e>
     ba2:	08 97       	sbiw	r24, 0x08	; 8
     ba4:	69 f0       	breq	.+26     	; 0xbc0 <blocking_delay_0+0x46>
     ba6:	51 c0       	rjmp	.+162    	; 0xc4a <blocking_delay_0+0xd0>
     ba8:	81 15       	cp	r24, r1
     baa:	21 e0       	ldi	r18, 0x01	; 1
     bac:	92 07       	cpc	r25, r18
     bae:	81 f0       	breq	.+32     	; 0xbd0 <blocking_delay_0+0x56>
     bb0:	81 15       	cp	r24, r1
     bb2:	94 40       	sbci	r25, 0x04	; 4
     bb4:	89 f0       	breq	.+34     	; 0xbd8 <blocking_delay_0+0x5e>
     bb6:	49 c0       	rjmp	.+146    	; 0xc4a <blocking_delay_0+0xd0>
	{
		case 1:
		{
			TCCR0|= (1<<CS00);
     bb8:	83 b7       	in	r24, 0x33	; 51
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	83 bf       	out	0x33, r24	; 51
			break;
     bbe:	0f c0       	rjmp	.+30     	; 0xbde <blocking_delay_0+0x64>
		}
		case 8:
		{
			TCCR0|= (1<<CS01);
     bc0:	83 b7       	in	r24, 0x33	; 51
     bc2:	82 60       	ori	r24, 0x02	; 2
     bc4:	83 bf       	out	0x33, r24	; 51
			break;
     bc6:	0b c0       	rjmp	.+22     	; 0xbde <blocking_delay_0+0x64>
		}
		case 64:
		{
			TCCR0|= (1<<CS01) | (1<<CS00) ;
     bc8:	83 b7       	in	r24, 0x33	; 51
     bca:	83 60       	ori	r24, 0x03	; 3
     bcc:	83 bf       	out	0x33, r24	; 51
			break;
     bce:	07 c0       	rjmp	.+14     	; 0xbde <blocking_delay_0+0x64>
		}
		case 256:
		{
			TCCR0|= (1<<CS02) ;
     bd0:	83 b7       	in	r24, 0x33	; 51
     bd2:	84 60       	ori	r24, 0x04	; 4
     bd4:	83 bf       	out	0x33, r24	; 51
			break;
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <blocking_delay_0+0x64>
		}
		case 1024:
		{
			TCCR0|= (1<<CS02) | (1<<CS00) ;
     bd8:	83 b7       	in	r24, 0x33	; 51
     bda:	85 60       	ori	r24, 0x05	; 5
     bdc:	83 bf       	out	0x33, r24	; 51
		}								
	}
	
	do
	{
		while((TIFR&0x01)==0 && stop_timer_0_flag == 0);
     bde:	08 b6       	in	r0, 0x38	; 56
     be0:	00 fc       	sbrc	r0, 0
     be2:	04 c0       	rjmp	.+8      	; 0xbec <blocking_delay_0+0x72>
     be4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     be8:	88 23       	and	r24, r24
     bea:	c9 f3       	breq	.-14     	; 0xbde <blocking_delay_0+0x64>
		TIFR = 0x1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	88 bf       	out	0x38, r24	; 56
		delay_0.n_overflow_flag++;
     bf0:	c2 e8       	ldi	r28, 0x82	; 130
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
     bf4:	6a 85       	ldd	r22, Y+10	; 0x0a
     bf6:	7b 85       	ldd	r23, Y+11	; 0x0b
     bf8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     c08:	6a 87       	std	Y+10, r22	; 0x0a
     c0a:	7b 87       	std	Y+11, r23	; 0x0b
     c0c:	8c 87       	std	Y+12, r24	; 0x0c
     c0e:	9d 87       	std	Y+13, r25	; 0x0d
	}
	while (delay_0.n_overflow_flag < (delay_0.n_overflow) && stop_timer_0_flag == 0);
     c10:	6a 85       	ldd	r22, Y+10	; 0x0a
     c12:	7b 85       	ldd	r23, Y+11	; 0x0b
     c14:	8c 85       	ldd	r24, Y+12	; 0x0c
     c16:	9d 85       	ldd	r25, Y+13	; 0x0d
     c18:	2c 81       	ldd	r18, Y+4	; 0x04
     c1a:	3d 81       	ldd	r19, Y+5	; 0x05
     c1c:	4e 81       	ldd	r20, Y+6	; 0x06
     c1e:	5f 81       	ldd	r21, Y+7	; 0x07
     c20:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__cmpsf2>
     c24:	88 23       	and	r24, r24
     c26:	24 f4       	brge	.+8      	; 0xc30 <blocking_delay_0+0xb6>
     c28:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     c2c:	88 23       	and	r24, r24
     c2e:	b9 f2       	breq	.-82     	; 0xbde <blocking_delay_0+0x64>
	stop_timer_0_flag = 0;
     c30:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
		
	TCCR0 = 0x00;
     c34:	13 be       	out	0x33, r1	; 51
	delay_0.n_overflow_flag = 0;
     c36:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <delay_0+0xa>
     c3a:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <delay_0+0xb>
     c3e:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <delay_0+0xc>
     c42:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <delay_0+0xd>
	return TIMER_OK;
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <blocking_delay_0+0xd2>
			TCCR0|= (1<<CS02) | (1<<CS00) ;
			break;
		}
		default:
		{
			return TIMER_ERROR;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
	stop_timer_0_flag = 0;
		
	TCCR0 = 0x00;
	delay_0.n_overflow_flag = 0;
	return TIMER_OK;
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <non_blocking_delay_2>:

TIMER_error_handler non_blocking_delay_2(EN_non_blocking_delay_status status)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	if (status == start)
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	09 f0       	breq	.+2      	; 0xc5c <non_blocking_delay_2+0xa>
     c5a:	47 c0       	rjmp	.+142    	; 0xcea <non_blocking_delay_2+0x98>
	{
		TCNT2 = delay_2.init_value; // set time initial value
     c5c:	c1 e9       	ldi	r28, 0x91	; 145
     c5e:	d0 e0       	ldi	r29, 0x00	; 0
     c60:	68 81       	ld	r22, Y
     c62:	79 81       	ldd	r23, Y+1	; 0x01
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	0e 94 63 07 	call	0xec6	; 0xec6 <__fixunssfsi>
     c6c:	64 bd       	out	0x24, r22	; 36
		switch (delay_2.prescaler_value)
     c6e:	88 85       	ldd	r24, Y+8	; 0x08
     c70:	99 85       	ldd	r25, Y+9	; 0x09
     c72:	80 34       	cpi	r24, 0x40	; 64
     c74:	91 05       	cpc	r25, r1
     c76:	29 f1       	breq	.+74     	; 0xcc2 <non_blocking_delay_2+0x70>
     c78:	48 f4       	brcc	.+18     	; 0xc8c <non_blocking_delay_2+0x3a>
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	91 05       	cpc	r25, r1
     c7e:	b9 f0       	breq	.+46     	; 0xcae <non_blocking_delay_2+0x5c>
     c80:	80 32       	cpi	r24, 0x20	; 32
     c82:	91 05       	cpc	r25, r1
     c84:	c9 f0       	breq	.+50     	; 0xcb8 <non_blocking_delay_2+0x66>
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	a1 f5       	brne	.+104    	; 0xcf2 <non_blocking_delay_2+0xa0>
     c8a:	0c c0       	rjmp	.+24     	; 0xca4 <non_blocking_delay_2+0x52>
     c8c:	81 15       	cp	r24, r1
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	92 07       	cpc	r25, r18
     c92:	09 f1       	breq	.+66     	; 0xcd6 <non_blocking_delay_2+0x84>
     c94:	81 15       	cp	r24, r1
     c96:	24 e0       	ldi	r18, 0x04	; 4
     c98:	92 07       	cpc	r25, r18
     c9a:	11 f1       	breq	.+68     	; 0xce0 <non_blocking_delay_2+0x8e>
     c9c:	80 38       	cpi	r24, 0x80	; 128
     c9e:	91 05       	cpc	r25, r1
     ca0:	41 f5       	brne	.+80     	; 0xcf2 <non_blocking_delay_2+0xa0>
     ca2:	14 c0       	rjmp	.+40     	; 0xccc <non_blocking_delay_2+0x7a>
		{
			case 1:
				TCCR2|= (1<<CS20);
     ca4:	85 b5       	in	r24, 0x25	; 37
     ca6:	81 60       	ori	r24, 0x01	; 1
     ca8:	85 bd       	out	0x25, r24	; 37
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     caa:	80 e0       	ldi	r24, 0x00	; 0
		TCNT2 = delay_2.init_value; // set time initial value
		switch (delay_2.prescaler_value)
		{
			case 1:
				TCCR2|= (1<<CS20);
				break;
     cac:	25 c0       	rjmp	.+74     	; 0xcf8 <non_blocking_delay_2+0xa6>
		
			case 8:
				TCCR2|= (1<<CS21);
     cae:	85 b5       	in	r24, 0x25	; 37
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	85 bd       	out	0x25, r24	; 37
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|= (1<<CS20);
				break;
		
			case 8:
				TCCR2|= (1<<CS21);
				break;
     cb6:	20 c0       	rjmp	.+64     	; 0xcf8 <non_blocking_delay_2+0xa6>
		
			case 32:
				TCCR2|= (1<<CS20) | (1<<CS21);
     cb8:	85 b5       	in	r24, 0x25	; 37
     cba:	83 60       	ori	r24, 0x03	; 3
     cbc:	85 bd       	out	0x25, r24	; 37
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     cbe:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|= (1<<CS21);
				break;
		
			case 32:
				TCCR2|= (1<<CS20) | (1<<CS21);
				break;
     cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <non_blocking_delay_2+0xa6>
		
			case 64:
				TCCR2|= (1<<CS22) ;
     cc2:	85 b5       	in	r24, 0x25	; 37
     cc4:	84 60       	ori	r24, 0x04	; 4
     cc6:	85 bd       	out	0x25, r24	; 37
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     cc8:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|= (1<<CS20) | (1<<CS21);
				break;
		
			case 64:
				TCCR2|= (1<<CS22) ;
				break;
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <non_blocking_delay_2+0xa6>
		
			case 128:
				TCCR2|= (1<<CS20) | (1<<CS22) ;
     ccc:	85 b5       	in	r24, 0x25	; 37
     cce:	85 60       	ori	r24, 0x05	; 5
     cd0:	85 bd       	out	0x25, r24	; 37
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|= (1<<CS22) ;
				break;
		
			case 128:
				TCCR2|= (1<<CS20) | (1<<CS22) ;
				break;	
     cd4:	11 c0       	rjmp	.+34     	; 0xcf8 <non_blocking_delay_2+0xa6>
		
			case 256:
				TCCR2|= (1<<CS21) | (1<<CS22);
     cd6:	85 b5       	in	r24, 0x25	; 37
     cd8:	86 60       	ori	r24, 0x06	; 6
     cda:	85 bd       	out	0x25, r24	; 37
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     cdc:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|= (1<<CS20) | (1<<CS22) ;
				break;	
		
			case 256:
				TCCR2|= (1<<CS21) | (1<<CS22);
				break;
     cde:	0c c0       	rjmp	.+24     	; 0xcf8 <non_blocking_delay_2+0xa6>
		
			case 1024:
				TCCR2|= (1<<CS20) | (1<<CS21) |(1<<CS22) ;
     ce0:	85 b5       	in	r24, 0x25	; 37
     ce2:	87 60       	ori	r24, 0x07	; 7
     ce4:	85 bd       	out	0x25, r24	; 37
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     ce6:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|= (1<<CS21) | (1<<CS22);
				break;
		
			case 1024:
				TCCR2|= (1<<CS20) | (1<<CS21) |(1<<CS22) ;
				break;
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <non_blocking_delay_2+0xa6>
		
			default:
				return TIMER_ERROR;
		}
	}
	else if (status == stop)
     cea:	81 11       	cpse	r24, r1
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <non_blocking_delay_2+0xa4>
	{
		
		TCCR2 = 0x00 ;
     cee:	15 bc       	out	0x25, r1	; 37
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <non_blocking_delay_2+0xa6>
			case 1024:
				TCCR2|= (1<<CS20) | (1<<CS21) |(1<<CS22) ;
				break;
		
			default:
				return TIMER_ERROR;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <non_blocking_delay_2+0xa6>
	{
		
		TCCR2 = 0x00 ;
	}

	return TIMER_OK;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <__subsf3>:
     cfe:	50 58       	subi	r21, 0x80	; 128

00000d00 <__addsf3>:
     d00:	bb 27       	eor	r27, r27
     d02:	aa 27       	eor	r26, r26
     d04:	0e 94 97 06 	call	0xd2e	; 0xd2e <__addsf3x>
     d08:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_round>
     d0c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_pscA>
     d10:	38 f0       	brcs	.+14     	; 0xd20 <__addsf3+0x20>
     d12:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscB>
     d16:	20 f0       	brcs	.+8      	; 0xd20 <__addsf3+0x20>
     d18:	39 f4       	brne	.+14     	; 0xd28 <__addsf3+0x28>
     d1a:	9f 3f       	cpi	r25, 0xFF	; 255
     d1c:	19 f4       	brne	.+6      	; 0xd24 <__addsf3+0x24>
     d1e:	26 f4       	brtc	.+8      	; 0xd28 <__addsf3+0x28>
     d20:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_nan>
     d24:	0e f4       	brtc	.+2      	; 0xd28 <__addsf3+0x28>
     d26:	e0 95       	com	r30
     d28:	e7 fb       	bst	r30, 7
     d2a:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_inf>

00000d2e <__addsf3x>:
     d2e:	e9 2f       	mov	r30, r25
     d30:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_split3>
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__addsf3+0xc>
     d36:	ba 17       	cp	r27, r26
     d38:	62 07       	cpc	r22, r18
     d3a:	73 07       	cpc	r23, r19
     d3c:	84 07       	cpc	r24, r20
     d3e:	95 07       	cpc	r25, r21
     d40:	20 f0       	brcs	.+8      	; 0xd4a <__addsf3x+0x1c>
     d42:	79 f4       	brne	.+30     	; 0xd62 <__addsf3x+0x34>
     d44:	a6 f5       	brtc	.+104    	; 0xdae <__addsf3x+0x80>
     d46:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_zero>
     d4a:	0e f4       	brtc	.+2      	; 0xd4e <__addsf3x+0x20>
     d4c:	e0 95       	com	r30
     d4e:	0b 2e       	mov	r0, r27
     d50:	ba 2f       	mov	r27, r26
     d52:	a0 2d       	mov	r26, r0
     d54:	0b 01       	movw	r0, r22
     d56:	b9 01       	movw	r22, r18
     d58:	90 01       	movw	r18, r0
     d5a:	0c 01       	movw	r0, r24
     d5c:	ca 01       	movw	r24, r20
     d5e:	a0 01       	movw	r20, r0
     d60:	11 24       	eor	r1, r1
     d62:	ff 27       	eor	r31, r31
     d64:	59 1b       	sub	r21, r25
     d66:	99 f0       	breq	.+38     	; 0xd8e <__addsf3x+0x60>
     d68:	59 3f       	cpi	r21, 0xF9	; 249
     d6a:	50 f4       	brcc	.+20     	; 0xd80 <__addsf3x+0x52>
     d6c:	50 3e       	cpi	r21, 0xE0	; 224
     d6e:	68 f1       	brcs	.+90     	; 0xdca <__addsf3x+0x9c>
     d70:	1a 16       	cp	r1, r26
     d72:	f0 40       	sbci	r31, 0x00	; 0
     d74:	a2 2f       	mov	r26, r18
     d76:	23 2f       	mov	r18, r19
     d78:	34 2f       	mov	r19, r20
     d7a:	44 27       	eor	r20, r20
     d7c:	58 5f       	subi	r21, 0xF8	; 248
     d7e:	f3 cf       	rjmp	.-26     	; 0xd66 <__addsf3x+0x38>
     d80:	46 95       	lsr	r20
     d82:	37 95       	ror	r19
     d84:	27 95       	ror	r18
     d86:	a7 95       	ror	r26
     d88:	f0 40       	sbci	r31, 0x00	; 0
     d8a:	53 95       	inc	r21
     d8c:	c9 f7       	brne	.-14     	; 0xd80 <__addsf3x+0x52>
     d8e:	7e f4       	brtc	.+30     	; 0xdae <__addsf3x+0x80>
     d90:	1f 16       	cp	r1, r31
     d92:	ba 0b       	sbc	r27, r26
     d94:	62 0b       	sbc	r22, r18
     d96:	73 0b       	sbc	r23, r19
     d98:	84 0b       	sbc	r24, r20
     d9a:	ba f0       	brmi	.+46     	; 0xdca <__addsf3x+0x9c>
     d9c:	91 50       	subi	r25, 0x01	; 1
     d9e:	a1 f0       	breq	.+40     	; 0xdc8 <__addsf3x+0x9a>
     da0:	ff 0f       	add	r31, r31
     da2:	bb 1f       	adc	r27, r27
     da4:	66 1f       	adc	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	88 1f       	adc	r24, r24
     daa:	c2 f7       	brpl	.-16     	; 0xd9c <__addsf3x+0x6e>
     dac:	0e c0       	rjmp	.+28     	; 0xdca <__addsf3x+0x9c>
     dae:	ba 0f       	add	r27, r26
     db0:	62 1f       	adc	r22, r18
     db2:	73 1f       	adc	r23, r19
     db4:	84 1f       	adc	r24, r20
     db6:	48 f4       	brcc	.+18     	; 0xdca <__addsf3x+0x9c>
     db8:	87 95       	ror	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f7 95       	ror	r31
     dc2:	9e 3f       	cpi	r25, 0xFE	; 254
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <__addsf3x+0x9a>
     dc6:	b0 cf       	rjmp	.-160    	; 0xd28 <__addsf3+0x28>
     dc8:	93 95       	inc	r25
     dca:	88 0f       	add	r24, r24
     dcc:	08 f0       	brcs	.+2      	; 0xdd0 <__addsf3x+0xa2>
     dce:	99 27       	eor	r25, r25
     dd0:	ee 0f       	add	r30, r30
     dd2:	97 95       	ror	r25
     dd4:	87 95       	ror	r24
     dd6:	08 95       	ret

00000dd8 <__cmpsf2>:
     dd8:	0e 94 23 08 	call	0x1046	; 0x1046 <__fp_cmp>
     ddc:	08 f4       	brcc	.+2      	; 0xde0 <__cmpsf2+0x8>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	08 95       	ret

00000de2 <__divsf3>:
     de2:	0e 94 05 07 	call	0xe0a	; 0xe0a <__divsf3x>
     de6:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_round>
     dea:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscB>
     dee:	58 f0       	brcs	.+22     	; 0xe06 <__divsf3+0x24>
     df0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_pscA>
     df4:	40 f0       	brcs	.+16     	; 0xe06 <__divsf3+0x24>
     df6:	29 f4       	brne	.+10     	; 0xe02 <__divsf3+0x20>
     df8:	5f 3f       	cpi	r21, 0xFF	; 255
     dfa:	29 f0       	breq	.+10     	; 0xe06 <__divsf3+0x24>
     dfc:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_inf>
     e00:	51 11       	cpse	r21, r1
     e02:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>
     e06:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_nan>

00000e0a <__divsf3x>:
     e0a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_split3>
     e0e:	68 f3       	brcs	.-38     	; 0xdea <__divsf3+0x8>

00000e10 <__divsf3_pse>:
     e10:	99 23       	and	r25, r25
     e12:	b1 f3       	breq	.-20     	; 0xe00 <__divsf3+0x1e>
     e14:	55 23       	and	r21, r21
     e16:	91 f3       	breq	.-28     	; 0xdfc <__divsf3+0x1a>
     e18:	95 1b       	sub	r25, r21
     e1a:	55 0b       	sbc	r21, r21
     e1c:	bb 27       	eor	r27, r27
     e1e:	aa 27       	eor	r26, r26
     e20:	62 17       	cp	r22, r18
     e22:	73 07       	cpc	r23, r19
     e24:	84 07       	cpc	r24, r20
     e26:	38 f0       	brcs	.+14     	; 0xe36 <__divsf3_pse+0x26>
     e28:	9f 5f       	subi	r25, 0xFF	; 255
     e2a:	5f 4f       	sbci	r21, 0xFF	; 255
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	44 1f       	adc	r20, r20
     e32:	aa 1f       	adc	r26, r26
     e34:	a9 f3       	breq	.-22     	; 0xe20 <__divsf3_pse+0x10>
     e36:	35 d0       	rcall	.+106    	; 0xea2 <__divsf3_pse+0x92>
     e38:	0e 2e       	mov	r0, r30
     e3a:	3a f0       	brmi	.+14     	; 0xe4a <__divsf3_pse+0x3a>
     e3c:	e0 e8       	ldi	r30, 0x80	; 128
     e3e:	32 d0       	rcall	.+100    	; 0xea4 <__divsf3_pse+0x94>
     e40:	91 50       	subi	r25, 0x01	; 1
     e42:	50 40       	sbci	r21, 0x00	; 0
     e44:	e6 95       	lsr	r30
     e46:	00 1c       	adc	r0, r0
     e48:	ca f7       	brpl	.-14     	; 0xe3c <__divsf3_pse+0x2c>
     e4a:	2b d0       	rcall	.+86     	; 0xea2 <__divsf3_pse+0x92>
     e4c:	fe 2f       	mov	r31, r30
     e4e:	29 d0       	rcall	.+82     	; 0xea2 <__divsf3_pse+0x92>
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	bb 1f       	adc	r27, r27
     e58:	26 17       	cp	r18, r22
     e5a:	37 07       	cpc	r19, r23
     e5c:	48 07       	cpc	r20, r24
     e5e:	ab 07       	cpc	r26, r27
     e60:	b0 e8       	ldi	r27, 0x80	; 128
     e62:	09 f0       	breq	.+2      	; 0xe66 <__divsf3_pse+0x56>
     e64:	bb 0b       	sbc	r27, r27
     e66:	80 2d       	mov	r24, r0
     e68:	bf 01       	movw	r22, r30
     e6a:	ff 27       	eor	r31, r31
     e6c:	93 58       	subi	r25, 0x83	; 131
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	3a f0       	brmi	.+14     	; 0xe80 <__divsf3_pse+0x70>
     e72:	9e 3f       	cpi	r25, 0xFE	; 254
     e74:	51 05       	cpc	r21, r1
     e76:	78 f0       	brcs	.+30     	; 0xe96 <__divsf3_pse+0x86>
     e78:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_inf>
     e7c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>
     e80:	5f 3f       	cpi	r21, 0xFF	; 255
     e82:	e4 f3       	brlt	.-8      	; 0xe7c <__divsf3_pse+0x6c>
     e84:	98 3e       	cpi	r25, 0xE8	; 232
     e86:	d4 f3       	brlt	.-12     	; 0xe7c <__divsf3_pse+0x6c>
     e88:	86 95       	lsr	r24
     e8a:	77 95       	ror	r23
     e8c:	67 95       	ror	r22
     e8e:	b7 95       	ror	r27
     e90:	f7 95       	ror	r31
     e92:	9f 5f       	subi	r25, 0xFF	; 255
     e94:	c9 f7       	brne	.-14     	; 0xe88 <__divsf3_pse+0x78>
     e96:	88 0f       	add	r24, r24
     e98:	91 1d       	adc	r25, r1
     e9a:	96 95       	lsr	r25
     e9c:	87 95       	ror	r24
     e9e:	97 f9       	bld	r25, 7
     ea0:	08 95       	ret
     ea2:	e1 e0       	ldi	r30, 0x01	; 1
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	bb 1f       	adc	r27, r27
     eac:	62 17       	cp	r22, r18
     eae:	73 07       	cpc	r23, r19
     eb0:	84 07       	cpc	r24, r20
     eb2:	ba 07       	cpc	r27, r26
     eb4:	20 f0       	brcs	.+8      	; 0xebe <__divsf3_pse+0xae>
     eb6:	62 1b       	sub	r22, r18
     eb8:	73 0b       	sbc	r23, r19
     eba:	84 0b       	sbc	r24, r20
     ebc:	ba 0b       	sbc	r27, r26
     ebe:	ee 1f       	adc	r30, r30
     ec0:	88 f7       	brcc	.-30     	; 0xea4 <__divsf3_pse+0x94>
     ec2:	e0 95       	com	r30
     ec4:	08 95       	ret

00000ec6 <__fixunssfsi>:
     ec6:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_splitA>
     eca:	88 f0       	brcs	.+34     	; 0xeee <__fixunssfsi+0x28>
     ecc:	9f 57       	subi	r25, 0x7F	; 127
     ece:	98 f0       	brcs	.+38     	; 0xef6 <__fixunssfsi+0x30>
     ed0:	b9 2f       	mov	r27, r25
     ed2:	99 27       	eor	r25, r25
     ed4:	b7 51       	subi	r27, 0x17	; 23
     ed6:	b0 f0       	brcs	.+44     	; 0xf04 <__fixunssfsi+0x3e>
     ed8:	e1 f0       	breq	.+56     	; 0xf12 <__fixunssfsi+0x4c>
     eda:	66 0f       	add	r22, r22
     edc:	77 1f       	adc	r23, r23
     ede:	88 1f       	adc	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	1a f0       	brmi	.+6      	; 0xeea <__fixunssfsi+0x24>
     ee4:	ba 95       	dec	r27
     ee6:	c9 f7       	brne	.-14     	; 0xeda <__fixunssfsi+0x14>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <__fixunssfsi+0x4c>
     eea:	b1 30       	cpi	r27, 0x01	; 1
     eec:	91 f0       	breq	.+36     	; 0xf12 <__fixunssfsi+0x4c>
     eee:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_zero>
     ef2:	b1 e0       	ldi	r27, 0x01	; 1
     ef4:	08 95       	ret
     ef6:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_zero>
     efa:	67 2f       	mov	r22, r23
     efc:	78 2f       	mov	r23, r24
     efe:	88 27       	eor	r24, r24
     f00:	b8 5f       	subi	r27, 0xF8	; 248
     f02:	39 f0       	breq	.+14     	; 0xf12 <__fixunssfsi+0x4c>
     f04:	b9 3f       	cpi	r27, 0xF9	; 249
     f06:	cc f3       	brlt	.-14     	; 0xefa <__fixunssfsi+0x34>
     f08:	86 95       	lsr	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b3 95       	inc	r27
     f10:	d9 f7       	brne	.-10     	; 0xf08 <__fixunssfsi+0x42>
     f12:	3e f4       	brtc	.+14     	; 0xf22 <__fixunssfsi+0x5c>
     f14:	90 95       	com	r25
     f16:	80 95       	com	r24
     f18:	70 95       	com	r23
     f1a:	61 95       	neg	r22
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	08 95       	ret

00000f24 <__floatunsisf>:
     f24:	e8 94       	clt
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <__floatsisf+0x12>

00000f28 <__floatsisf>:
     f28:	97 fb       	bst	r25, 7
     f2a:	3e f4       	brtc	.+14     	; 0xf3a <__floatsisf+0x12>
     f2c:	90 95       	com	r25
     f2e:	80 95       	com	r24
     f30:	70 95       	com	r23
     f32:	61 95       	neg	r22
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	99 23       	and	r25, r25
     f3c:	a9 f0       	breq	.+42     	; 0xf68 <__floatsisf+0x40>
     f3e:	f9 2f       	mov	r31, r25
     f40:	96 e9       	ldi	r25, 0x96	; 150
     f42:	bb 27       	eor	r27, r27
     f44:	93 95       	inc	r25
     f46:	f6 95       	lsr	r31
     f48:	87 95       	ror	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b7 95       	ror	r27
     f50:	f1 11       	cpse	r31, r1
     f52:	f8 cf       	rjmp	.-16     	; 0xf44 <__floatsisf+0x1c>
     f54:	fa f4       	brpl	.+62     	; 0xf94 <__floatsisf+0x6c>
     f56:	bb 0f       	add	r27, r27
     f58:	11 f4       	brne	.+4      	; 0xf5e <__floatsisf+0x36>
     f5a:	60 ff       	sbrs	r22, 0
     f5c:	1b c0       	rjmp	.+54     	; 0xf94 <__floatsisf+0x6c>
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	16 c0       	rjmp	.+44     	; 0xf94 <__floatsisf+0x6c>
     f68:	88 23       	and	r24, r24
     f6a:	11 f0       	breq	.+4      	; 0xf70 <__floatsisf+0x48>
     f6c:	96 e9       	ldi	r25, 0x96	; 150
     f6e:	11 c0       	rjmp	.+34     	; 0xf92 <__floatsisf+0x6a>
     f70:	77 23       	and	r23, r23
     f72:	21 f0       	breq	.+8      	; 0xf7c <__floatsisf+0x54>
     f74:	9e e8       	ldi	r25, 0x8E	; 142
     f76:	87 2f       	mov	r24, r23
     f78:	76 2f       	mov	r23, r22
     f7a:	05 c0       	rjmp	.+10     	; 0xf86 <__floatsisf+0x5e>
     f7c:	66 23       	and	r22, r22
     f7e:	71 f0       	breq	.+28     	; 0xf9c <__floatsisf+0x74>
     f80:	96 e8       	ldi	r25, 0x86	; 134
     f82:	86 2f       	mov	r24, r22
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	2a f0       	brmi	.+10     	; 0xf94 <__floatsisf+0x6c>
     f8a:	9a 95       	dec	r25
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	da f7       	brpl	.-10     	; 0xf8a <__floatsisf+0x62>
     f94:	88 0f       	add	r24, r24
     f96:	96 95       	lsr	r25
     f98:	87 95       	ror	r24
     f9a:	97 f9       	bld	r25, 7
     f9c:	08 95       	ret
     f9e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_pscA>
     fa2:	20 f0       	brcs	.+8      	; 0xfac <__floatsisf+0x84>
     fa4:	19 f0       	breq	.+6      	; 0xfac <__floatsisf+0x84>
     fa6:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscB>
     faa:	50 f4       	brcc	.+20     	; 0xfc0 <fmod+0xc>
     fac:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_nan>
     fb0:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>

00000fb4 <fmod>:
     fb4:	e9 2f       	mov	r30, r25
     fb6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_split3>
     fba:	88 f3       	brcs	.-30     	; 0xf9e <__floatsisf+0x76>
     fbc:	55 23       	and	r21, r21
     fbe:	b1 f3       	breq	.-20     	; 0xfac <__floatsisf+0x84>
     fc0:	e7 fb       	bst	r30, 7
     fc2:	62 17       	cp	r22, r18
     fc4:	73 07       	cpc	r23, r19
     fc6:	84 07       	cpc	r24, r20
     fc8:	95 07       	cpc	r25, r21
     fca:	a8 f1       	brcs	.+106    	; 0x1036 <fmod+0x82>
     fcc:	89 f3       	breq	.-30     	; 0xfb0 <__floatsisf+0x88>
     fce:	e9 2f       	mov	r30, r25
     fd0:	ff 27       	eor	r31, r31
     fd2:	88 23       	and	r24, r24
     fd4:	2a f0       	brmi	.+10     	; 0xfe0 <fmod+0x2c>
     fd6:	31 97       	sbiw	r30, 0x01	; 1
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	da f7       	brpl	.-10     	; 0xfd6 <fmod+0x22>
     fe0:	95 2f       	mov	r25, r21
     fe2:	55 27       	eor	r21, r21
     fe4:	44 23       	and	r20, r20
     fe6:	32 f0       	brmi	.+12     	; 0xff4 <fmod+0x40>
     fe8:	91 50       	subi	r25, 0x01	; 1
     fea:	50 40       	sbci	r21, 0x00	; 0
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	44 1f       	adc	r20, r20
     ff2:	d2 f7       	brpl	.-12     	; 0xfe8 <fmod+0x34>
     ff4:	bb 27       	eor	r27, r27
     ff6:	e9 1b       	sub	r30, r25
     ff8:	f5 0b       	sbc	r31, r21
     ffa:	62 1b       	sub	r22, r18
     ffc:	73 0b       	sbc	r23, r19
     ffe:	84 0b       	sbc	r24, r20
    1000:	b1 09       	sbc	r27, r1
    1002:	b1 f2       	breq	.-84     	; 0xfb0 <__floatsisf+0x88>
    1004:	22 f4       	brpl	.+8      	; 0x100e <fmod+0x5a>
    1006:	62 0f       	add	r22, r18
    1008:	73 1f       	adc	r23, r19
    100a:	84 1f       	adc	r24, r20
    100c:	b1 1d       	adc	r27, r1
    100e:	31 97       	sbiw	r30, 0x01	; 1
    1010:	2a f0       	brmi	.+10     	; 0x101c <fmod+0x68>
    1012:	66 0f       	add	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	bb 1f       	adc	r27, r27
    101a:	ef cf       	rjmp	.-34     	; 0xffa <fmod+0x46>
    101c:	91 50       	subi	r25, 0x01	; 1
    101e:	50 40       	sbci	r21, 0x00	; 0
    1020:	62 f0       	brmi	.+24     	; 0x103a <fmod+0x86>
    1022:	41 f0       	breq	.+16     	; 0x1034 <fmod+0x80>
    1024:	88 23       	and	r24, r24
    1026:	32 f0       	brmi	.+12     	; 0x1034 <fmod+0x80>
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	91 50       	subi	r25, 0x01	; 1
    1030:	50 40       	sbci	r21, 0x00	; 0
    1032:	c1 f7       	brne	.-16     	; 0x1024 <fmod+0x70>
    1034:	93 95       	inc	r25
    1036:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_mpack>
    103a:	86 95       	lsr	r24
    103c:	77 95       	ror	r23
    103e:	67 95       	ror	r22
    1040:	9f 5f       	subi	r25, 0xFF	; 255
    1042:	d9 f7       	brne	.-10     	; 0x103a <fmod+0x86>
    1044:	f7 cf       	rjmp	.-18     	; 0x1034 <fmod+0x80>

00001046 <__fp_cmp>:
    1046:	99 0f       	add	r25, r25
    1048:	00 08       	sbc	r0, r0
    104a:	55 0f       	add	r21, r21
    104c:	aa 0b       	sbc	r26, r26
    104e:	e0 e8       	ldi	r30, 0x80	; 128
    1050:	fe ef       	ldi	r31, 0xFE	; 254
    1052:	16 16       	cp	r1, r22
    1054:	17 06       	cpc	r1, r23
    1056:	e8 07       	cpc	r30, r24
    1058:	f9 07       	cpc	r31, r25
    105a:	c0 f0       	brcs	.+48     	; 0x108c <__fp_cmp+0x46>
    105c:	12 16       	cp	r1, r18
    105e:	13 06       	cpc	r1, r19
    1060:	e4 07       	cpc	r30, r20
    1062:	f5 07       	cpc	r31, r21
    1064:	98 f0       	brcs	.+38     	; 0x108c <__fp_cmp+0x46>
    1066:	62 1b       	sub	r22, r18
    1068:	73 0b       	sbc	r23, r19
    106a:	84 0b       	sbc	r24, r20
    106c:	95 0b       	sbc	r25, r21
    106e:	39 f4       	brne	.+14     	; 0x107e <__fp_cmp+0x38>
    1070:	0a 26       	eor	r0, r26
    1072:	61 f0       	breq	.+24     	; 0x108c <__fp_cmp+0x46>
    1074:	23 2b       	or	r18, r19
    1076:	24 2b       	or	r18, r20
    1078:	25 2b       	or	r18, r21
    107a:	21 f4       	brne	.+8      	; 0x1084 <__fp_cmp+0x3e>
    107c:	08 95       	ret
    107e:	0a 26       	eor	r0, r26
    1080:	09 f4       	brne	.+2      	; 0x1084 <__fp_cmp+0x3e>
    1082:	a1 40       	sbci	r26, 0x01	; 1
    1084:	a6 95       	lsr	r26
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	81 1d       	adc	r24, r1
    108a:	81 1d       	adc	r24, r1
    108c:	08 95       	ret

0000108e <__fp_inf>:
    108e:	97 f9       	bld	r25, 7
    1090:	9f 67       	ori	r25, 0x7F	; 127
    1092:	80 e8       	ldi	r24, 0x80	; 128
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	08 95       	ret

0000109a <__fp_mpack>:
    109a:	9f 3f       	cpi	r25, 0xFF	; 255
    109c:	31 f0       	breq	.+12     	; 0x10aa <__fp_mpack_finite+0xc>

0000109e <__fp_mpack_finite>:
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	20 f4       	brcc	.+8      	; 0x10aa <__fp_mpack_finite+0xc>
    10a2:	87 95       	ror	r24
    10a4:	77 95       	ror	r23
    10a6:	67 95       	ror	r22
    10a8:	b7 95       	ror	r27
    10aa:	88 0f       	add	r24, r24
    10ac:	91 1d       	adc	r25, r1
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	97 f9       	bld	r25, 7
    10b4:	08 95       	ret

000010b6 <__fp_nan>:
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	80 ec       	ldi	r24, 0xC0	; 192
    10ba:	08 95       	ret

000010bc <__fp_pscA>:
    10bc:	00 24       	eor	r0, r0
    10be:	0a 94       	dec	r0
    10c0:	16 16       	cp	r1, r22
    10c2:	17 06       	cpc	r1, r23
    10c4:	18 06       	cpc	r1, r24
    10c6:	09 06       	cpc	r0, r25
    10c8:	08 95       	ret

000010ca <__fp_pscB>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	12 16       	cp	r1, r18
    10d0:	13 06       	cpc	r1, r19
    10d2:	14 06       	cpc	r1, r20
    10d4:	05 06       	cpc	r0, r21
    10d6:	08 95       	ret

000010d8 <__fp_round>:
    10d8:	09 2e       	mov	r0, r25
    10da:	03 94       	inc	r0
    10dc:	00 0c       	add	r0, r0
    10de:	11 f4       	brne	.+4      	; 0x10e4 <__fp_round+0xc>
    10e0:	88 23       	and	r24, r24
    10e2:	52 f0       	brmi	.+20     	; 0x10f8 <__fp_round+0x20>
    10e4:	bb 0f       	add	r27, r27
    10e6:	40 f4       	brcc	.+16     	; 0x10f8 <__fp_round+0x20>
    10e8:	bf 2b       	or	r27, r31
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__fp_round+0x18>
    10ec:	60 ff       	sbrs	r22, 0
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <__fp_round+0x20>
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	8f 4f       	sbci	r24, 0xFF	; 255
    10f6:	9f 4f       	sbci	r25, 0xFF	; 255
    10f8:	08 95       	ret

000010fa <__fp_split3>:
    10fa:	57 fd       	sbrc	r21, 7
    10fc:	90 58       	subi	r25, 0x80	; 128
    10fe:	44 0f       	add	r20, r20
    1100:	55 1f       	adc	r21, r21
    1102:	59 f0       	breq	.+22     	; 0x111a <__fp_splitA+0x10>
    1104:	5f 3f       	cpi	r21, 0xFF	; 255
    1106:	71 f0       	breq	.+28     	; 0x1124 <__fp_splitA+0x1a>
    1108:	47 95       	ror	r20

0000110a <__fp_splitA>:
    110a:	88 0f       	add	r24, r24
    110c:	97 fb       	bst	r25, 7
    110e:	99 1f       	adc	r25, r25
    1110:	61 f0       	breq	.+24     	; 0x112a <__fp_splitA+0x20>
    1112:	9f 3f       	cpi	r25, 0xFF	; 255
    1114:	79 f0       	breq	.+30     	; 0x1134 <__fp_splitA+0x2a>
    1116:	87 95       	ror	r24
    1118:	08 95       	ret
    111a:	12 16       	cp	r1, r18
    111c:	13 06       	cpc	r1, r19
    111e:	14 06       	cpc	r1, r20
    1120:	55 1f       	adc	r21, r21
    1122:	f2 cf       	rjmp	.-28     	; 0x1108 <__fp_split3+0xe>
    1124:	46 95       	lsr	r20
    1126:	f1 df       	rcall	.-30     	; 0x110a <__fp_splitA>
    1128:	08 c0       	rjmp	.+16     	; 0x113a <__fp_splitA+0x30>
    112a:	16 16       	cp	r1, r22
    112c:	17 06       	cpc	r1, r23
    112e:	18 06       	cpc	r1, r24
    1130:	99 1f       	adc	r25, r25
    1132:	f1 cf       	rjmp	.-30     	; 0x1116 <__fp_splitA+0xc>
    1134:	86 95       	lsr	r24
    1136:	71 05       	cpc	r23, r1
    1138:	61 05       	cpc	r22, r1
    113a:	08 94       	sec
    113c:	08 95       	ret

0000113e <__fp_zero>:
    113e:	e8 94       	clt

00001140 <__fp_szero>:
    1140:	bb 27       	eor	r27, r27
    1142:	66 27       	eor	r22, r22
    1144:	77 27       	eor	r23, r23
    1146:	cb 01       	movw	r24, r22
    1148:	97 f9       	bld	r25, 7
    114a:	08 95       	ret

0000114c <__gesf2>:
    114c:	0e 94 23 08 	call	0x1046	; 0x1046 <__fp_cmp>
    1150:	08 f4       	brcc	.+2      	; 0x1154 <__gesf2+0x8>
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	08 95       	ret

00001156 <__mulsf3>:
    1156:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3x>
    115a:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_round>
    115e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__fp_pscA>
    1162:	38 f0       	brcs	.+14     	; 0x1172 <__mulsf3+0x1c>
    1164:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscB>
    1168:	20 f0       	brcs	.+8      	; 0x1172 <__mulsf3+0x1c>
    116a:	95 23       	and	r25, r21
    116c:	11 f0       	breq	.+4      	; 0x1172 <__mulsf3+0x1c>
    116e:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_inf>
    1172:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__fp_nan>
    1176:	11 24       	eor	r1, r1
    1178:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>

0000117c <__mulsf3x>:
    117c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_split3>
    1180:	70 f3       	brcs	.-36     	; 0x115e <__mulsf3+0x8>

00001182 <__mulsf3_pse>:
    1182:	95 9f       	mul	r25, r21
    1184:	c1 f3       	breq	.-16     	; 0x1176 <__mulsf3+0x20>
    1186:	95 0f       	add	r25, r21
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	55 1f       	adc	r21, r21
    118c:	62 9f       	mul	r22, r18
    118e:	f0 01       	movw	r30, r0
    1190:	72 9f       	mul	r23, r18
    1192:	bb 27       	eor	r27, r27
    1194:	f0 0d       	add	r31, r0
    1196:	b1 1d       	adc	r27, r1
    1198:	63 9f       	mul	r22, r19
    119a:	aa 27       	eor	r26, r26
    119c:	f0 0d       	add	r31, r0
    119e:	b1 1d       	adc	r27, r1
    11a0:	aa 1f       	adc	r26, r26
    11a2:	64 9f       	mul	r22, r20
    11a4:	66 27       	eor	r22, r22
    11a6:	b0 0d       	add	r27, r0
    11a8:	a1 1d       	adc	r26, r1
    11aa:	66 1f       	adc	r22, r22
    11ac:	82 9f       	mul	r24, r18
    11ae:	22 27       	eor	r18, r18
    11b0:	b0 0d       	add	r27, r0
    11b2:	a1 1d       	adc	r26, r1
    11b4:	62 1f       	adc	r22, r18
    11b6:	73 9f       	mul	r23, r19
    11b8:	b0 0d       	add	r27, r0
    11ba:	a1 1d       	adc	r26, r1
    11bc:	62 1f       	adc	r22, r18
    11be:	83 9f       	mul	r24, r19
    11c0:	a0 0d       	add	r26, r0
    11c2:	61 1d       	adc	r22, r1
    11c4:	22 1f       	adc	r18, r18
    11c6:	74 9f       	mul	r23, r20
    11c8:	33 27       	eor	r19, r19
    11ca:	a0 0d       	add	r26, r0
    11cc:	61 1d       	adc	r22, r1
    11ce:	23 1f       	adc	r18, r19
    11d0:	84 9f       	mul	r24, r20
    11d2:	60 0d       	add	r22, r0
    11d4:	21 1d       	adc	r18, r1
    11d6:	82 2f       	mov	r24, r18
    11d8:	76 2f       	mov	r23, r22
    11da:	6a 2f       	mov	r22, r26
    11dc:	11 24       	eor	r1, r1
    11de:	9f 57       	subi	r25, 0x7F	; 127
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	9a f0       	brmi	.+38     	; 0x120a <__mulsf3_pse+0x88>
    11e4:	f1 f0       	breq	.+60     	; 0x1222 <__mulsf3_pse+0xa0>
    11e6:	88 23       	and	r24, r24
    11e8:	4a f0       	brmi	.+18     	; 0x11fc <__mulsf3_pse+0x7a>
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	bb 1f       	adc	r27, r27
    11f0:	66 1f       	adc	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	91 50       	subi	r25, 0x01	; 1
    11f8:	50 40       	sbci	r21, 0x00	; 0
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <__mulsf3_pse+0x64>
    11fc:	9e 3f       	cpi	r25, 0xFE	; 254
    11fe:	51 05       	cpc	r21, r1
    1200:	80 f0       	brcs	.+32     	; 0x1222 <__mulsf3_pse+0xa0>
    1202:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_inf>
    1206:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>
    120a:	5f 3f       	cpi	r21, 0xFF	; 255
    120c:	e4 f3       	brlt	.-8      	; 0x1206 <__mulsf3_pse+0x84>
    120e:	98 3e       	cpi	r25, 0xE8	; 232
    1210:	d4 f3       	brlt	.-12     	; 0x1206 <__mulsf3_pse+0x84>
    1212:	86 95       	lsr	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b7 95       	ror	r27
    121a:	f7 95       	ror	r31
    121c:	e7 95       	ror	r30
    121e:	9f 5f       	subi	r25, 0xFF	; 255
    1220:	c1 f7       	brne	.-16     	; 0x1212 <__mulsf3_pse+0x90>
    1222:	fe 2b       	or	r31, r30
    1224:	88 0f       	add	r24, r24
    1226:	91 1d       	adc	r25, r1
    1228:	96 95       	lsr	r25
    122a:	87 95       	ror	r24
    122c:	97 f9       	bld	r25, 7
    122e:	08 95       	ret

00001230 <round>:
    1230:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_splitA>
    1234:	e8 f0       	brcs	.+58     	; 0x1270 <round+0x40>
    1236:	9e 37       	cpi	r25, 0x7E	; 126
    1238:	e8 f0       	brcs	.+58     	; 0x1274 <round+0x44>
    123a:	96 39       	cpi	r25, 0x96	; 150
    123c:	b8 f4       	brcc	.+46     	; 0x126c <round+0x3c>
    123e:	9e 38       	cpi	r25, 0x8E	; 142
    1240:	48 f4       	brcc	.+18     	; 0x1254 <round+0x24>
    1242:	67 2f       	mov	r22, r23
    1244:	78 2f       	mov	r23, r24
    1246:	88 27       	eor	r24, r24
    1248:	98 5f       	subi	r25, 0xF8	; 248
    124a:	f9 cf       	rjmp	.-14     	; 0x123e <round+0xe>
    124c:	86 95       	lsr	r24
    124e:	77 95       	ror	r23
    1250:	67 95       	ror	r22
    1252:	93 95       	inc	r25
    1254:	95 39       	cpi	r25, 0x95	; 149
    1256:	d0 f3       	brcs	.-12     	; 0x124c <round+0x1c>
    1258:	b6 2f       	mov	r27, r22
    125a:	b1 70       	andi	r27, 0x01	; 1
    125c:	6b 0f       	add	r22, r27
    125e:	71 1d       	adc	r23, r1
    1260:	81 1d       	adc	r24, r1
    1262:	20 f4       	brcc	.+8      	; 0x126c <round+0x3c>
    1264:	87 95       	ror	r24
    1266:	77 95       	ror	r23
    1268:	67 95       	ror	r22
    126a:	93 95       	inc	r25
    126c:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_mintl>
    1270:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_mpack>
    1274:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_szero>

00001278 <__fp_mintl>:
    1278:	88 23       	and	r24, r24
    127a:	71 f4       	brne	.+28     	; 0x1298 <__fp_mintl+0x20>
    127c:	77 23       	and	r23, r23
    127e:	21 f0       	breq	.+8      	; 0x1288 <__fp_mintl+0x10>
    1280:	98 50       	subi	r25, 0x08	; 8
    1282:	87 2b       	or	r24, r23
    1284:	76 2f       	mov	r23, r22
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <__fp_mintl+0x1e>
    1288:	66 23       	and	r22, r22
    128a:	11 f4       	brne	.+4      	; 0x1290 <__fp_mintl+0x18>
    128c:	99 27       	eor	r25, r25
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <__fp_mintl+0x32>
    1290:	90 51       	subi	r25, 0x10	; 16
    1292:	86 2b       	or	r24, r22
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	2a f0       	brmi	.+10     	; 0x12a4 <__fp_mintl+0x2c>
    129a:	9a 95       	dec	r25
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	da f7       	brpl	.-10     	; 0x129a <__fp_mintl+0x22>
    12a4:	88 0f       	add	r24, r24
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	97 f9       	bld	r25, 7
    12ac:	08 95       	ret

000012ae <__tablejump2__>:
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	05 90       	lpm	r0, Z+
    12b4:	f4 91       	lpm	r31, Z
    12b6:	e0 2d       	mov	r30, r0
    12b8:	09 94       	ijmp

000012ba <_exit>:
    12ba:	f8 94       	cli

000012bc <__stop_program>:
    12bc:	ff cf       	rjmp	.-2      	; 0x12bc <__stop_program>
