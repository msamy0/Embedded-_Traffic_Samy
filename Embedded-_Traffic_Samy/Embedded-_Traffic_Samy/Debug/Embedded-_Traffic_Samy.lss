
Embedded-_Traffic_Samy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000073e  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000629  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000468  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d8  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  74:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <global_interrupt_init>:


void global_interrupt_init()
{
	// function from avr/intterupt.h library that sets the global interrupt enabled
	sei();
  7c:	78 94       	sei
  7e:	08 95       	ret

00000080 <external_interrupt_sense_mode>:
}

void external_interrupt_sense_mode(uint8_t interrupt_num,  INT_sense_mode mode)
{
	switch (interrupt_num)
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	31 f1       	breq	.+76     	; 0xd0 <external_interrupt_sense_mode+0x50>
  84:	20 f0       	brcs	.+8      	; 0x8e <external_interrupt_sense_mode+0xe>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	09 f4       	brne	.+2      	; 0x8c <external_interrupt_sense_mode+0xc>
  8a:	43 c0       	rjmp	.+134    	; 0x112 <external_interrupt_sense_mode+0x92>
  8c:	08 95       	ret
	{
		/***********************************************/
		case 0: //in case user chose External interrupt 0
			if (mode == rising_edge)
  8e:	61 11       	cpse	r22, r1
  90:	04 c0       	rjmp	.+8      	; 0x9a <external_interrupt_sense_mode+0x1a>
			{
				MCUCR |= (1<<ISC00) | (1<<ISC01);//setting (MCU Control Register Bit-0 and Bit-1) for rising edge mode
  92:	85 b7       	in	r24, 0x35	; 53
  94:	83 60       	ori	r24, 0x03	; 3
  96:	85 bf       	out	0x35, r24	; 53
				break;
  98:	08 95       	ret
			}
			else if (mode == falling_edge)
  9a:	61 30       	cpi	r22, 0x01	; 1
  9c:	39 f4       	brne	.+14     	; 0xac <external_interrupt_sense_mode+0x2c>
			{
				MCUCR &= ~(1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for falling edge mode
  9e:	85 b7       	in	r24, 0x35	; 53
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	85 bf       	out	0x35, r24	; 53
				MCUCR |= (1<<ISC01); 
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	85 bf       	out	0x35, r24	; 53
				
				break;
  aa:	08 95       	ret
			}
			
			else if (mode == logic_change)
  ac:	62 30       	cpi	r22, 0x02	; 2
  ae:	39 f4       	brne	.+14     	; 0xbe <external_interrupt_sense_mode+0x3e>
			{
				MCUCR |= (1<<ISC00);//setting (MCU Control Register Bit-0 and Bit-1) for logic change mode
  b0:	85 b7       	in	r24, 0x35	; 53
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC01);
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	85 bf       	out	0x35, r24	; 53
				
				break;
  bc:	08 95       	ret
			}
			
			else if (mode == low_level)
  be:	63 30       	cpi	r22, 0x03	; 3
  c0:	d1 f5       	brne	.+116    	; 0x136 <external_interrupt_sense_mode+0xb6>
			{
				MCUCR &= ~(1<<ISC00); //setting (MCU Control Register Bit-0 and Bit-1) for low_level mode
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC01);
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	85 bf       	out	0x35, r24	; 53
				break;
  ce:	08 95       	ret
				break;
			}
			
		/***********************************************/
		case 1: //in case user chose External interrupt 1
			if (mode == rising_edge)
  d0:	61 11       	cpse	r22, r1
  d2:	04 c0       	rjmp	.+8      	; 0xdc <external_interrupt_sense_mode+0x5c>
			{
				MCUCR |= (1<<ISC10) | (1<<ISC11);	//setting (MCU Control Register Bit-2 and Bit-3) for rising edge mode
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	8c 60       	ori	r24, 0x0C	; 12
  d8:	85 bf       	out	0x35, r24	; 53
				break;
  da:	08 95       	ret
			}
			else if (mode == falling_edge)
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	39 f4       	brne	.+14     	; 0xee <external_interrupt_sense_mode+0x6e>
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for falling edge mode
  e0:	85 b7       	in	r24, 0x35	; 53
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	85 bf       	out	0x35, r24	; 53
				MCUCR |= (1<<ISC11); 
  e6:	85 b7       	in	r24, 0x35	; 53
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	85 bf       	out	0x35, r24	; 53
				break;
  ec:	08 95       	ret
			}
		
			else if (mode == logic_change)
  ee:	62 30       	cpi	r22, 0x02	; 2
  f0:	39 f4       	brne	.+14     	; 0x100 <external_interrupt_sense_mode+0x80>
			{
				MCUCR |= (1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for logic change mode
  f2:	85 b7       	in	r24, 0x35	; 53
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC11);
  f8:	85 b7       	in	r24, 0x35	; 53
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	85 bf       	out	0x35, r24	; 53
				break;
  fe:	08 95       	ret
			}
		
			else if (mode == low_level)
 100:	63 30       	cpi	r22, 0x03	; 3
 102:	c9 f4       	brne	.+50     	; 0x136 <external_interrupt_sense_mode+0xb6>
			{
				MCUCR &= ~(1<<ISC10); //setting (MCU Control Register Bit-2 and Bit-3) for low_level mode
 104:	85 b7       	in	r24, 0x35	; 53
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC11);
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	85 bf       	out	0x35, r24	; 53
				break;
 110:	08 95       	ret
				break;
			}
		
		/***********************************************/
		case 2: //in case user chose External interrupt 2
			if (mode == rising_edge)
 112:	61 11       	cpse	r22, r1
 114:	04 c0       	rjmp	.+8      	; 0x11e <external_interrupt_sense_mode+0x9e>
			{
				MCUCSR |= (1<<ISC2);	//setting (MCUCSR Bit-6) for rising edge mode
 116:	84 b7       	in	r24, 0x34	; 52
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	84 bf       	out	0x34, r24	; 52
				break;
 11c:	08 95       	ret
			}
			else if (mode == falling_edge)
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	21 f4       	brne	.+8      	; 0x12a <external_interrupt_sense_mode+0xaa>
			{
				MCUCSR &= ~(1<<ISC2); //setting (MCUCSR Bit-6) for falling edge mode
 122:	84 b7       	in	r24, 0x34	; 52
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	84 bf       	out	0x34, r24	; 52
				break;
 128:	08 95       	ret
			}
		
			else if (mode == logic_change || mode == low_level)
 12a:	62 50       	subi	r22, 0x02	; 2
 12c:	62 30       	cpi	r22, 0x02	; 2
 12e:	18 f4       	brcc	.+6      	; 0x136 <external_interrupt_sense_mode+0xb6>
			{
				/*force setting (MCUCSR Bit-6) for rising edge mode
				as logic change and low level modes are not options for EXT_INT2*/
				MCUCSR |= (1<<ISC2);	
 130:	84 b7       	in	r24, 0x34	; 52
 132:	80 64       	ori	r24, 0x40	; 64
 134:	84 bf       	out	0x34, r24	; 52
 136:	08 95       	ret

00000138 <external_interrupt_init>:
}


void external_interrupt_init(uint8_t interrupt_num)
{
	switch (interrupt_num)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	41 f0       	breq	.+16     	; 0x14c <external_interrupt_init+0x14>
 13c:	18 f0       	brcs	.+6      	; 0x144 <external_interrupt_init+0xc>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	49 f0       	breq	.+18     	; 0x154 <external_interrupt_init+0x1c>
 142:	08 95       	ret
	{
		case 0:
		{
			GICR |= 1<<6; //setting bit-6 in GICR register HIGH to enable interrupt 0
 144:	8b b7       	in	r24, 0x3b	; 59
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8b bf       	out	0x3b, r24	; 59
			break;
 14a:	08 95       	ret
		}
		case 1:
		{
			GICR |= (1<<INT1);//setting bit-7 in GICR register HIGH to enable interrupt 1
 14c:	8b b7       	in	r24, 0x3b	; 59
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	8b bf       	out	0x3b, r24	; 59
			break;
 152:	08 95       	ret
		}
		case 2:
		{
			GICR |= (1<<INT2);//setting bit-5 in GICR register HIGH to enable interrupt 2
 154:	8b b7       	in	r24, 0x3b	; 59
 156:	80 62       	ori	r24, 0x20	; 32
 158:	8b bf       	out	0x3b, r24	; 59
 15a:	08 95       	ret

0000015c <main>:
uint8_t flag = 0;

int main(void)
{

    global_interrupt_init();
 15c:	0e 94 3e 00 	call	0x7c	; 0x7c <global_interrupt_init>
	external_interrupt_sense_mode(INT_NUM,falling_edge);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 40 00 	call	0x80	; 0x80 <external_interrupt_sense_mode>
	external_interrupt_init(INT_NUM);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 9c 00 	call	0x138	; 0x138 <external_interrupt_init>
	
	DDRA |= (1<<2);
 16e:	8a b3       	in	r24, 0x1a	; 26
 170:	84 60       	ori	r24, 0x04	; 4
 172:	8a bb       	out	0x1a, r24	; 26
	DDRD &=~ (1<<2);
 174:	81 b3       	in	r24, 0x11	; 17
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	81 bb       	out	0x11, r24	; 17
	
    while (1) 
	{
		switch (flag)
 17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17e:	88 23       	and	r24, r24
 180:	31 f0       	breq	.+12     	; 0x18e <main+0x32>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	d1 f7       	brne	.-12     	; 0x17a <main+0x1e>
			{
				case 1:
				{
					PORTA |= (1<<2);
 186:	8b b3       	in	r24, 0x1b	; 27
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	8b bb       	out	0x1b, r24	; 27
					break;	
 18c:	f6 cf       	rjmp	.-20     	; 0x17a <main+0x1e>
				}
				case 0:
				{
					PORTA &=~ (1<<2);
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	8b bb       	out	0x1b, r24	; 27
					break;
 194:	f2 cf       	rjmp	.-28     	; 0x17a <main+0x1e>

00000196 <__vector_1>:
	}

}

ISR(INT0_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
	if (flag == 1)
 1a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <__vector_1+0x1a>
	{
		flag = 0;
 1aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <__vector_1+0x20>
	}
	else
	{
		flag = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
